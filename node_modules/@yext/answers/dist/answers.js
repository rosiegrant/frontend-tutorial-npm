var ANSWERS = (function () {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n.default || n;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var path = {};

	var aFunction = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	var wrapConstructor = function (NativeConstructor) {
	  var Wrapper = function (a, b, c) {
	    if (this instanceof NativeConstructor) {
	      switch (arguments.length) {
	        case 0: return new NativeConstructor();
	        case 1: return new NativeConstructor(a);
	        case 2: return new NativeConstructor(a, b);
	      } return new NativeConstructor(a, b, c);
	    } return NativeConstructor.apply(this, arguments);
	  };
	  Wrapper.prototype = NativeConstructor.prototype;
	  return Wrapper;
	};

	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var PROTO = options.proto;

	  var nativeSource = GLOBAL ? global_1 : STATIC ? global_1[TARGET] : (global_1[TARGET] || {}).prototype;

	  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
	  var targetPrototype = target.prototype;

	  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
	  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

	  for (key in source) {
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contains in native
	    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);

	    targetProperty = target[key];

	    if (USE_NATIVE) if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
	      nativeProperty = descriptor && descriptor.value;
	    } else nativeProperty = nativeSource[key];

	    // export native or implementation
	    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

	    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;

	    // bind timers to global for call from export context
	    if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global_1);
	    // wrap global constructors for prevent changs in this version
	    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
	    // make static versions for prototype methods
	    else if (PROTO && typeof sourceProperty == 'function') resultProperty = functionBindContext(Function.call, sourceProperty);
	    // default case
	    else resultProperty = sourceProperty;

	    // add a flag to not completely full polyfills
	    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(resultProperty, 'sham', true);
	    }

	    target[key] = resultProperty;

	    if (PROTO) {
	      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
	      if (!has(path, VIRTUAL_PROTOTYPE)) {
	        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
	      }
	      // export virtual prototype methods
	      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;
	      // export real prototype methods
	      if (options.real && targetPrototype && !targetPrototype[key]) {
	        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
	      }
	    }
	  }
	};

	var aFunction$1 = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction$1(path[namespace]) || aFunction$1(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var slice = [].slice;
	var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check

	var wrap = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice.call(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
	    } : handler, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	_export({ global: true, bind: true, forced: MSIE }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap(global_1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap(global_1.setInterval)
	});

	var setTimeout$1 = path.setTimeout;

	var setTimeout$2 = setTimeout$1;

	var $stringify = getBuiltIn('JSON', 'stringify');
	var re = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function (match, offset, string) {
	  var prev = string.charAt(offset - 1);
	  var next = string.charAt(offset + 1);
	  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
	    return '\\u' + match.charCodeAt(0).toString(16);
	  } return match;
	};

	var FORCED = fails(function () {
	  return $stringify('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify('\uDEAD') !== '"\\udead"';
	});

	if ($stringify) {
	  // https://github.com/tc39/proposal-well-formed-stringify
	  _export({ target: 'JSON', stat: true, forced: FORCED }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var result = $stringify.apply(null, arguments);
	      return typeof result == 'string' ? result.replace(re, fix) : result;
	    }
	  });
	}

	if (!path.JSON) path.JSON = { stringify: JSON.stringify };

	// eslint-disable-next-line no-unused-vars
	var stringify = function stringify(it, replacer, space) {
	  return path.JSON.stringify.apply(null, arguments);
	};

	var stringify$1 = stringify;

	var stringify$2 = stringify$1;

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod(true)
	};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var isPure = true;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.4',
	  mode: 'pure',
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var hiddenKeys = {};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO = sharedKey('IE_PROTO');
	var ObjectPrototype = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype : null;
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod$1 = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod$1(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod$1(false)
	};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	var defineProperty = objectDefineProperty.f;





	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC, SET_METHOD) {
	  if (it) {
	    var target = STATIC ? it : it.prototype;
	    if (!has(target, TO_STRING_TAG$2)) {
	      defineProperty(target, TO_STRING_TAG$2, { configurable: true, value: TAG });
	    }
	    if (SET_METHOD && !toStringTagSupport) {
	      createNonEnumerableProperty(target, 'toString', objectToString);
	    }
	  }
	};

	var iterators = {};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
	  iterators[TO_STRING_TAG] = returnThis;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var redefine = function (target, key, value, options) {
	  if (options && options.enumerable) target[key] = value;
	  else createNonEnumerableProperty(target, key, value);
	};

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$1 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      if (!isPure && objectGetPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype$2) {
	        if (objectSetPrototypeOf) {
	          objectSetPrototypeOf(CurrentIteratorPrototype, IteratorPrototype$2);
	        } else if (typeof CurrentIteratorPrototype[ITERATOR$1] != 'function') {
	          createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR$1, returnThis$1);
	        }
	      }
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
	      if (isPure) iterators[TO_STRING_TAG] = returnThis$1;
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if ((!isPure || FORCED) && IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var charAt = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var ITERATOR$2 = wellKnownSymbol('iterator');

	var nativeUrl = !fails(function () {
	  var url = new URL('b?a=1&b=2&c=3', 'http://a');
	  var searchParams = url.searchParams;
	  var result = '';
	  url.pathname = 'c%20d';
	  searchParams.forEach(function (value, key) {
	    searchParams['delete']('b');
	    result += key + value;
	  });
	  return (!url.toJSON)
	    || !searchParams.sort
	    || url.href !== 'http://a/c%20d?a=1&c=3'
	    || searchParams.get('c') !== '3'
	    || String(new URLSearchParams('?a=1')) !== 'a=1'
	    || !searchParams[ITERATOR$2]
	    // throws in Edge
	    || new URL('https://a@b').username !== 'a'
	    || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
	    // not punycoded in Edge
	    || new URL('http://тест').host !== 'xn--e1aybc'
	    // not escaped in Chrome 62-
	    || new URL('http://a#б').hash !== '#%D0%B1'
	    // fails in Chrome 66-
	    || result !== 'a1c3'
	    // throws in Safari
	    || new URL('http://x', undefined).host !== 'x';
	});

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var f$3 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$3
	};

	var nativeAssign = Object.assign;
	var defineProperty$1 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$1({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$1(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');
	var ArrayPrototype = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype[ITERATOR$3] === it);
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	var ITERATOR$4 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$4]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	// based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
	var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
	var base = 36;
	var tMin = 1;
	var tMax = 26;
	var skew = 38;
	var damp = 700;
	var initialBias = 72;
	var initialN = 128; // 0x80
	var delimiter = '-'; // '\x2D'
	var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
	var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
	var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
	var baseMinusTMin = base - tMin;
	var floor$1 = Math.floor;
	var stringFromCharCode = String.fromCharCode;

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 */
	var ucs2decode = function (string) {
	  var output = [];
	  var counter = 0;
	  var length = string.length;
	  while (counter < length) {
	    var value = string.charCodeAt(counter++);
	    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	      // It's a high surrogate, and there is a next character.
	      var extra = string.charCodeAt(counter++);
	      if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
	        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	      } else {
	        // It's an unmatched surrogate; only append this code unit, in case the
	        // next code unit is the high surrogate of a surrogate pair.
	        output.push(value);
	        counter--;
	      }
	    } else {
	      output.push(value);
	    }
	  }
	  return output;
	};

	/**
	 * Converts a digit/integer into a basic code point.
	 */
	var digitToBasic = function (digit) {
	  //  0..25 map to ASCII a..z or A..Z
	  // 26..35 map to ASCII 0..9
	  return digit + 22 + 75 * (digit < 26);
	};

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 */
	var adapt = function (delta, numPoints, firstTime) {
	  var k = 0;
	  delta = firstTime ? floor$1(delta / damp) : delta >> 1;
	  delta += floor$1(delta / numPoints);
	  for (; delta > baseMinusTMin * tMax >> 1; k += base) {
	    delta = floor$1(delta / baseMinusTMin);
	  }
	  return floor$1(k + (baseMinusTMin + 1) * delta / (delta + skew));
	};

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 */
	// eslint-disable-next-line  max-statements
	var encode = function (input) {
	  var output = [];

	  // Convert the input in UCS-2 to an array of Unicode code points.
	  input = ucs2decode(input);

	  // Cache the length.
	  var inputLength = input.length;

	  // Initialize the state.
	  var n = initialN;
	  var delta = 0;
	  var bias = initialBias;
	  var i, currentValue;

	  // Handle the basic code points.
	  for (i = 0; i < input.length; i++) {
	    currentValue = input[i];
	    if (currentValue < 0x80) {
	      output.push(stringFromCharCode(currentValue));
	    }
	  }

	  var basicLength = output.length; // number of basic code points.
	  var handledCPCount = basicLength; // number of code points that have been handled;

	  // Finish the basic string with a delimiter unless it's empty.
	  if (basicLength) {
	    output.push(delimiter);
	  }

	  // Main encoding loop:
	  while (handledCPCount < inputLength) {
	    // All non-basic code points < n have been handled already. Find the next larger one:
	    var m = maxInt;
	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue >= n && currentValue < m) {
	        m = currentValue;
	      }
	    }

	    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
	    var handledCPCountPlusOne = handledCPCount + 1;
	    if (m - n > floor$1((maxInt - delta) / handledCPCountPlusOne)) {
	      throw RangeError(OVERFLOW_ERROR);
	    }

	    delta += (m - n) * handledCPCountPlusOne;
	    n = m;

	    for (i = 0; i < input.length; i++) {
	      currentValue = input[i];
	      if (currentValue < n && ++delta > maxInt) {
	        throw RangeError(OVERFLOW_ERROR);
	      }
	      if (currentValue == n) {
	        // Represent delta as a generalized variable-length integer.
	        var q = delta;
	        for (var k = base; /* no condition */; k += base) {
	          var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	          if (q < t) break;
	          var qMinusT = q - t;
	          var baseMinusT = base - t;
	          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
	          q = floor$1(qMinusT / baseMinusT);
	        }

	        output.push(stringFromCharCode(digitToBasic(q)));
	        bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	        delta = 0;
	        ++handledCPCount;
	      }
	    }

	    ++delta;
	    ++n;
	  }
	  return output.join('');
	};

	var stringPunycodeToAscii = function (input) {
	  var encoded = [];
	  var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
	  var i, label;
	  for (i = 0; i < labels.length; i++) {
	    label = labels[i];
	    encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
	  }
	  return encoded.join('.');
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState$1(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState$1(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	var redefineAll = function (target, src, options) {
	  for (var key in src) {
	    if (options && options.unsafe && target[key]) target[key] = src[key];
	    else redefine(target, key, src[key], options);
	  } return target;
	};

	var getIterator = function (it) {
	  var iteratorMethod = getIteratorMethod(it);
	  if (typeof iteratorMethod != 'function') {
	    throw TypeError(String(it) + ' is not iterable');
	  } return anObject(iteratorMethod.call(it));
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`





















	var $fetch = getBuiltIn('fetch');
	var Headers = getBuiltIn('Headers');
	var ITERATOR$5 = wellKnownSymbol('iterator');
	var URL_SEARCH_PARAMS = 'URLSearchParams';
	var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalParamsState = internalState.getterFor(URL_SEARCH_PARAMS);
	var getInternalIteratorState = internalState.getterFor(URL_SEARCH_PARAMS_ITERATOR);

	var plus = /\+/g;
	var sequences = Array(4);

	var percentSequence = function (bytes) {
	  return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
	};

	var percentDecode = function (sequence) {
	  try {
	    return decodeURIComponent(sequence);
	  } catch (error) {
	    return sequence;
	  }
	};

	var deserialize = function (it) {
	  var result = it.replace(plus, ' ');
	  var bytes = 4;
	  try {
	    return decodeURIComponent(result);
	  } catch (error) {
	    while (bytes) {
	      result = result.replace(percentSequence(bytes--), percentDecode);
	    }
	    return result;
	  }
	};

	var find = /[!'()~]|%20/g;

	var replace = {
	  '!': '%21',
	  "'": '%27',
	  '(': '%28',
	  ')': '%29',
	  '~': '%7E',
	  '%20': '+'
	};

	var replacer = function (match) {
	  return replace[match];
	};

	var serialize = function (it) {
	  return encodeURIComponent(it).replace(find, replacer);
	};

	var parseSearchParams = function (result, query) {
	  if (query) {
	    var attributes = query.split('&');
	    var index = 0;
	    var attribute, entry;
	    while (index < attributes.length) {
	      attribute = attributes[index++];
	      if (attribute.length) {
	        entry = attribute.split('=');
	        result.push({
	          key: deserialize(entry.shift()),
	          value: deserialize(entry.join('='))
	        });
	      }
	    }
	  }
	};

	var updateSearchParams = function (query) {
	  this.entries.length = 0;
	  parseSearchParams(this.entries, query);
	};

	var validateArgumentsLength = function (passed, required) {
	  if (passed < required) throw TypeError('Not enough arguments');
	};

	var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
	  setInternalState$2(this, {
	    type: URL_SEARCH_PARAMS_ITERATOR,
	    iterator: getIterator(getInternalParamsState(params).entries),
	    kind: kind
	  });
	}, 'Iterator', function next() {
	  var state = getInternalIteratorState(this);
	  var kind = state.kind;
	  var step = state.iterator.next();
	  var entry = step.value;
	  if (!step.done) {
	    step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
	  } return step;
	});

	// `URLSearchParams` constructor
	// https://url.spec.whatwg.org/#interface-urlsearchparams
	var URLSearchParamsConstructor = function URLSearchParams(/* init */) {
	  anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
	  var init = arguments.length > 0 ? arguments[0] : undefined;
	  var that = this;
	  var entries = [];
	  var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

	  setInternalState$2(that, {
	    type: URL_SEARCH_PARAMS,
	    entries: entries,
	    updateURL: function () { /* empty */ },
	    updateSearchParams: updateSearchParams
	  });

	  if (init !== undefined) {
	    if (isObject(init)) {
	      iteratorMethod = getIteratorMethod(init);
	      if (typeof iteratorMethod === 'function') {
	        iterator = iteratorMethod.call(init);
	        next = iterator.next;
	        while (!(step = next.call(iterator)).done) {
	          entryIterator = getIterator(anObject(step.value));
	          entryNext = entryIterator.next;
	          if (
	            (first = entryNext.call(entryIterator)).done ||
	            (second = entryNext.call(entryIterator)).done ||
	            !entryNext.call(entryIterator).done
	          ) throw TypeError('Expected sequence with length 2');
	          entries.push({ key: first.value + '', value: second.value + '' });
	        }
	      } else for (key in init) if (has(init, key)) entries.push({ key: key, value: init[key] + '' });
	    } else {
	      parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
	    }
	  }
	};

	var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

	redefineAll(URLSearchParamsPrototype, {
	  // `URLSearchParams.prototype.appent` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-append
	  append: function append(name, value) {
	    validateArgumentsLength(arguments.length, 2);
	    var state = getInternalParamsState(this);
	    state.entries.push({ key: name + '', value: value + '' });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.delete` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
	  'delete': function (name) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index].key === key) entries.splice(index, 1);
	      else index++;
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.get` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-get
	  get: function get(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) return entries[index].value;
	    }
	    return null;
	  },
	  // `URLSearchParams.prototype.getAll` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
	  getAll: function getAll(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var result = [];
	    var index = 0;
	    for (; index < entries.length; index++) {
	      if (entries[index].key === key) result.push(entries[index].value);
	    }
	    return result;
	  },
	  // `URLSearchParams.prototype.has` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-has
	  has: function has(name) {
	    validateArgumentsLength(arguments.length, 1);
	    var entries = getInternalParamsState(this).entries;
	    var key = name + '';
	    var index = 0;
	    while (index < entries.length) {
	      if (entries[index++].key === key) return true;
	    }
	    return false;
	  },
	  // `URLSearchParams.prototype.set` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-set
	  set: function set(name, value) {
	    validateArgumentsLength(arguments.length, 1);
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    var found = false;
	    var key = name + '';
	    var val = value + '';
	    var index = 0;
	    var entry;
	    for (; index < entries.length; index++) {
	      entry = entries[index];
	      if (entry.key === key) {
	        if (found) entries.splice(index--, 1);
	        else {
	          found = true;
	          entry.value = val;
	        }
	      }
	    }
	    if (!found) entries.push({ key: key, value: val });
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.sort` method
	  // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
	  sort: function sort() {
	    var state = getInternalParamsState(this);
	    var entries = state.entries;
	    // Array#sort is not stable in some engines
	    var slice = entries.slice();
	    var entry, entriesIndex, sliceIndex;
	    entries.length = 0;
	    for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
	      entry = slice[sliceIndex];
	      for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
	        if (entries[entriesIndex].key > entry.key) {
	          entries.splice(entriesIndex, 0, entry);
	          break;
	        }
	      }
	      if (entriesIndex === sliceIndex) entries.push(entry);
	    }
	    state.updateURL();
	  },
	  // `URLSearchParams.prototype.forEach` method
	  forEach: function forEach(callback /* , thisArg */) {
	    var entries = getInternalParamsState(this).entries;
	    var boundFunction = functionBindContext(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var index = 0;
	    var entry;
	    while (index < entries.length) {
	      entry = entries[index++];
	      boundFunction(entry.value, entry.key, this);
	    }
	  },
	  // `URLSearchParams.prototype.keys` method
	  keys: function keys() {
	    return new URLSearchParamsIterator(this, 'keys');
	  },
	  // `URLSearchParams.prototype.values` method
	  values: function values() {
	    return new URLSearchParamsIterator(this, 'values');
	  },
	  // `URLSearchParams.prototype.entries` method
	  entries: function entries() {
	    return new URLSearchParamsIterator(this, 'entries');
	  }
	}, { enumerable: true });

	// `URLSearchParams.prototype[@@iterator]` method
	redefine(URLSearchParamsPrototype, ITERATOR$5, URLSearchParamsPrototype.entries);

	// `URLSearchParams.prototype.toString` method
	// https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
	redefine(URLSearchParamsPrototype, 'toString', function toString() {
	  var entries = getInternalParamsState(this).entries;
	  var result = [];
	  var index = 0;
	  var entry;
	  while (index < entries.length) {
	    entry = entries[index++];
	    result.push(serialize(entry.key) + '=' + serialize(entry.value));
	  } return result.join('&');
	}, { enumerable: true });

	setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

	_export({ global: true, forced: !nativeUrl }, {
	  URLSearchParams: URLSearchParamsConstructor
	});

	// Wrap `fetch` for correct work with polyfilled `URLSearchParams`
	// https://github.com/zloirock/core-js/issues/674
	if (!nativeUrl && typeof $fetch == 'function' && typeof Headers == 'function') {
	  _export({ global: true, enumerable: true, forced: true }, {
	    fetch: function fetch(input /* , init */) {
	      var args = [input];
	      var init, body, headers;
	      if (arguments.length > 1) {
	        init = arguments[1];
	        if (isObject(init)) {
	          body = init.body;
	          if (classof(body) === URL_SEARCH_PARAMS) {
	            headers = init.headers ? new Headers(init.headers) : new Headers();
	            if (!headers.has('content-type')) {
	              headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	            }
	            init = objectCreate(init, {
	              body: createPropertyDescriptor(0, String(body)),
	              headers: createPropertyDescriptor(0, headers)
	            });
	          }
	        }
	        args.push(init);
	      } return $fetch.apply(this, args);
	    }
	  });
	}

	var web_urlSearchParams = {
	  URLSearchParams: URLSearchParamsConstructor,
	  getState: getInternalParamsState
	};

	// TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`











	var codeAt = stringMultibyte.codeAt;





	var NativeURL = global_1.URL;
	var URLSearchParams$1 = web_urlSearchParams.URLSearchParams;
	var getInternalSearchParamsState = web_urlSearchParams.getState;
	var setInternalState$3 = internalState.set;
	var getInternalURLState = internalState.getterFor('URL');
	var floor$2 = Math.floor;
	var pow = Math.pow;

	var INVALID_AUTHORITY = 'Invalid authority';
	var INVALID_SCHEME = 'Invalid scheme';
	var INVALID_HOST = 'Invalid host';
	var INVALID_PORT = 'Invalid port';

	var ALPHA = /[A-Za-z]/;
	var ALPHANUMERIC = /[\d+\-.A-Za-z]/;
	var DIGIT = /\d/;
	var HEX_START = /^(0x|0X)/;
	var OCT = /^[0-7]+$/;
	var DEC = /^\d+$/;
	var HEX = /^[\dA-Fa-f]+$/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT = /[\u0000\u0009\u000A\u000D #%/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\u0000\u0009\u000A\u000D #/:?@[\\]]/;
	// eslint-disable-next-line no-control-regex
	var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
	// eslint-disable-next-line no-control-regex
	var TAB_AND_NEW_LINE = /[\u0009\u000A\u000D]/g;
	var EOF;

	var parseHost = function (url, input) {
	  var result, codePoints, index;
	  if (input.charAt(0) == '[') {
	    if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
	    result = parseIPv6(input.slice(1, -1));
	    if (!result) return INVALID_HOST;
	    url.host = result;
	  // opaque host
	  } else if (!isSpecial(url)) {
	    if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
	    result = '';
	    codePoints = arrayFrom(input);
	    for (index = 0; index < codePoints.length; index++) {
	      result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
	    }
	    url.host = result;
	  } else {
	    input = stringPunycodeToAscii(input);
	    if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
	    result = parseIPv4(input);
	    if (result === null) return INVALID_HOST;
	    url.host = result;
	  }
	};

	var parseIPv4 = function (input) {
	  var parts = input.split('.');
	  var partsLength, numbers, index, part, radix, number, ipv4;
	  if (parts.length && parts[parts.length - 1] == '') {
	    parts.pop();
	  }
	  partsLength = parts.length;
	  if (partsLength > 4) return input;
	  numbers = [];
	  for (index = 0; index < partsLength; index++) {
	    part = parts[index];
	    if (part == '') return input;
	    radix = 10;
	    if (part.length > 1 && part.charAt(0) == '0') {
	      radix = HEX_START.test(part) ? 16 : 8;
	      part = part.slice(radix == 8 ? 1 : 2);
	    }
	    if (part === '') {
	      number = 0;
	    } else {
	      if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
	      number = parseInt(part, radix);
	    }
	    numbers.push(number);
	  }
	  for (index = 0; index < partsLength; index++) {
	    number = numbers[index];
	    if (index == partsLength - 1) {
	      if (number >= pow(256, 5 - partsLength)) return null;
	    } else if (number > 255) return null;
	  }
	  ipv4 = numbers.pop();
	  for (index = 0; index < numbers.length; index++) {
	    ipv4 += numbers[index] * pow(256, 3 - index);
	  }
	  return ipv4;
	};

	// eslint-disable-next-line max-statements
	var parseIPv6 = function (input) {
	  var address = [0, 0, 0, 0, 0, 0, 0, 0];
	  var pieceIndex = 0;
	  var compress = null;
	  var pointer = 0;
	  var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

	  var char = function () {
	    return input.charAt(pointer);
	  };

	  if (char() == ':') {
	    if (input.charAt(1) != ':') return;
	    pointer += 2;
	    pieceIndex++;
	    compress = pieceIndex;
	  }
	  while (char()) {
	    if (pieceIndex == 8) return;
	    if (char() == ':') {
	      if (compress !== null) return;
	      pointer++;
	      pieceIndex++;
	      compress = pieceIndex;
	      continue;
	    }
	    value = length = 0;
	    while (length < 4 && HEX.test(char())) {
	      value = value * 16 + parseInt(char(), 16);
	      pointer++;
	      length++;
	    }
	    if (char() == '.') {
	      if (length == 0) return;
	      pointer -= length;
	      if (pieceIndex > 6) return;
	      numbersSeen = 0;
	      while (char()) {
	        ipv4Piece = null;
	        if (numbersSeen > 0) {
	          if (char() == '.' && numbersSeen < 4) pointer++;
	          else return;
	        }
	        if (!DIGIT.test(char())) return;
	        while (DIGIT.test(char())) {
	          number = parseInt(char(), 10);
	          if (ipv4Piece === null) ipv4Piece = number;
	          else if (ipv4Piece == 0) return;
	          else ipv4Piece = ipv4Piece * 10 + number;
	          if (ipv4Piece > 255) return;
	          pointer++;
	        }
	        address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
	        numbersSeen++;
	        if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
	      }
	      if (numbersSeen != 4) return;
	      break;
	    } else if (char() == ':') {
	      pointer++;
	      if (!char()) return;
	    } else if (char()) return;
	    address[pieceIndex++] = value;
	  }
	  if (compress !== null) {
	    swaps = pieceIndex - compress;
	    pieceIndex = 7;
	    while (pieceIndex != 0 && swaps > 0) {
	      swap = address[pieceIndex];
	      address[pieceIndex--] = address[compress + swaps - 1];
	      address[compress + --swaps] = swap;
	    }
	  } else if (pieceIndex != 8) return;
	  return address;
	};

	var findLongestZeroSequence = function (ipv6) {
	  var maxIndex = null;
	  var maxLength = 1;
	  var currStart = null;
	  var currLength = 0;
	  var index = 0;
	  for (; index < 8; index++) {
	    if (ipv6[index] !== 0) {
	      if (currLength > maxLength) {
	        maxIndex = currStart;
	        maxLength = currLength;
	      }
	      currStart = null;
	      currLength = 0;
	    } else {
	      if (currStart === null) currStart = index;
	      ++currLength;
	    }
	  }
	  if (currLength > maxLength) {
	    maxIndex = currStart;
	    maxLength = currLength;
	  }
	  return maxIndex;
	};

	var serializeHost = function (host) {
	  var result, index, compress, ignore0;
	  // ipv4
	  if (typeof host == 'number') {
	    result = [];
	    for (index = 0; index < 4; index++) {
	      result.unshift(host % 256);
	      host = floor$2(host / 256);
	    } return result.join('.');
	  // ipv6
	  } else if (typeof host == 'object') {
	    result = '';
	    compress = findLongestZeroSequence(host);
	    for (index = 0; index < 8; index++) {
	      if (ignore0 && host[index] === 0) continue;
	      if (ignore0) ignore0 = false;
	      if (compress === index) {
	        result += index ? ':' : '::';
	        ignore0 = true;
	      } else {
	        result += host[index].toString(16);
	        if (index < 7) result += ':';
	      }
	    }
	    return '[' + result + ']';
	  } return host;
	};

	var C0ControlPercentEncodeSet = {};
	var fragmentPercentEncodeSet = objectAssign({}, C0ControlPercentEncodeSet, {
	  ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
	});
	var pathPercentEncodeSet = objectAssign({}, fragmentPercentEncodeSet, {
	  '#': 1, '?': 1, '{': 1, '}': 1
	});
	var userinfoPercentEncodeSet = objectAssign({}, pathPercentEncodeSet, {
	  '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
	});

	var percentEncode = function (char, set) {
	  var code = codeAt(char, 0);
	  return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
	};

	var specialSchemes = {
	  ftp: 21,
	  file: null,
	  http: 80,
	  https: 443,
	  ws: 80,
	  wss: 443
	};

	var isSpecial = function (url) {
	  return has(specialSchemes, url.scheme);
	};

	var includesCredentials = function (url) {
	  return url.username != '' || url.password != '';
	};

	var cannotHaveUsernamePasswordPort = function (url) {
	  return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
	};

	var isWindowsDriveLetter = function (string, normalized) {
	  var second;
	  return string.length == 2 && ALPHA.test(string.charAt(0))
	    && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
	};

	var startsWithWindowsDriveLetter = function (string) {
	  var third;
	  return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
	    string.length == 2 ||
	    ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
	  );
	};

	var shortenURLsPath = function (url) {
	  var path = url.path;
	  var pathSize = path.length;
	  if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
	    path.pop();
	  }
	};

	var isSingleDot = function (segment) {
	  return segment === '.' || segment.toLowerCase() === '%2e';
	};

	var isDoubleDot = function (segment) {
	  segment = segment.toLowerCase();
	  return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
	};

	// States:
	var SCHEME_START = {};
	var SCHEME = {};
	var NO_SCHEME = {};
	var SPECIAL_RELATIVE_OR_AUTHORITY = {};
	var PATH_OR_AUTHORITY = {};
	var RELATIVE = {};
	var RELATIVE_SLASH = {};
	var SPECIAL_AUTHORITY_SLASHES = {};
	var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
	var AUTHORITY = {};
	var HOST = {};
	var HOSTNAME = {};
	var PORT = {};
	var FILE = {};
	var FILE_SLASH = {};
	var FILE_HOST = {};
	var PATH_START = {};
	var PATH = {};
	var CANNOT_BE_A_BASE_URL_PATH = {};
	var QUERY = {};
	var FRAGMENT = {};

	// eslint-disable-next-line max-statements
	var parseURL = function (url, input, stateOverride, base) {
	  var state = stateOverride || SCHEME_START;
	  var pointer = 0;
	  var buffer = '';
	  var seenAt = false;
	  var seenBracket = false;
	  var seenPasswordToken = false;
	  var codePoints, char, bufferCodePoints, failure;

	  if (!stateOverride) {
	    url.scheme = '';
	    url.username = '';
	    url.password = '';
	    url.host = null;
	    url.port = null;
	    url.path = [];
	    url.query = null;
	    url.fragment = null;
	    url.cannotBeABaseURL = false;
	    input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
	  }

	  input = input.replace(TAB_AND_NEW_LINE, '');

	  codePoints = arrayFrom(input);

	  while (pointer <= codePoints.length) {
	    char = codePoints[pointer];
	    switch (state) {
	      case SCHEME_START:
	        if (char && ALPHA.test(char)) {
	          buffer += char.toLowerCase();
	          state = SCHEME;
	        } else if (!stateOverride) {
	          state = NO_SCHEME;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case SCHEME:
	        if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
	          buffer += char.toLowerCase();
	        } else if (char == ':') {
	          if (stateOverride && (
	            (isSpecial(url) != has(specialSchemes, buffer)) ||
	            (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
	            (url.scheme == 'file' && !url.host)
	          )) return;
	          url.scheme = buffer;
	          if (stateOverride) {
	            if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
	            return;
	          }
	          buffer = '';
	          if (url.scheme == 'file') {
	            state = FILE;
	          } else if (isSpecial(url) && base && base.scheme == url.scheme) {
	            state = SPECIAL_RELATIVE_OR_AUTHORITY;
	          } else if (isSpecial(url)) {
	            state = SPECIAL_AUTHORITY_SLASHES;
	          } else if (codePoints[pointer + 1] == '/') {
	            state = PATH_OR_AUTHORITY;
	            pointer++;
	          } else {
	            url.cannotBeABaseURL = true;
	            url.path.push('');
	            state = CANNOT_BE_A_BASE_URL_PATH;
	          }
	        } else if (!stateOverride) {
	          buffer = '';
	          state = NO_SCHEME;
	          pointer = 0;
	          continue;
	        } else return INVALID_SCHEME;
	        break;

	      case NO_SCHEME:
	        if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
	        if (base.cannotBeABaseURL && char == '#') {
	          url.scheme = base.scheme;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          url.cannotBeABaseURL = true;
	          state = FRAGMENT;
	          break;
	        }
	        state = base.scheme == 'file' ? FILE : RELATIVE;
	        continue;

	      case SPECIAL_RELATIVE_OR_AUTHORITY:
	        if (char == '/' && codePoints[pointer + 1] == '/') {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	          pointer++;
	        } else {
	          state = RELATIVE;
	          continue;
	        } break;

	      case PATH_OR_AUTHORITY:
	        if (char == '/') {
	          state = AUTHORITY;
	          break;
	        } else {
	          state = PATH;
	          continue;
	        }

	      case RELATIVE:
	        url.scheme = base.scheme;
	        if (char == EOF) {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	        } else if (char == '/' || (char == '\\' && isSpecial(url))) {
	          state = RELATIVE_SLASH;
	        } else if (char == '?') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.query = base.query;
	          url.fragment = '';
	          state = FRAGMENT;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          url.path = base.path.slice();
	          url.path.pop();
	          state = PATH;
	          continue;
	        } break;

	      case RELATIVE_SLASH:
	        if (isSpecial(url) && (char == '/' || char == '\\')) {
	          state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        } else if (char == '/') {
	          state = AUTHORITY;
	        } else {
	          url.username = base.username;
	          url.password = base.password;
	          url.host = base.host;
	          url.port = base.port;
	          state = PATH;
	          continue;
	        } break;

	      case SPECIAL_AUTHORITY_SLASHES:
	        state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
	        if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
	        pointer++;
	        break;

	      case SPECIAL_AUTHORITY_IGNORE_SLASHES:
	        if (char != '/' && char != '\\') {
	          state = AUTHORITY;
	          continue;
	        } break;

	      case AUTHORITY:
	        if (char == '@') {
	          if (seenAt) buffer = '%40' + buffer;
	          seenAt = true;
	          bufferCodePoints = arrayFrom(buffer);
	          for (var i = 0; i < bufferCodePoints.length; i++) {
	            var codePoint = bufferCodePoints[i];
	            if (codePoint == ':' && !seenPasswordToken) {
	              seenPasswordToken = true;
	              continue;
	            }
	            var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
	            if (seenPasswordToken) url.password += encodedCodePoints;
	            else url.username += encodedCodePoints;
	          }
	          buffer = '';
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (seenAt && buffer == '') return INVALID_AUTHORITY;
	          pointer -= arrayFrom(buffer).length + 1;
	          buffer = '';
	          state = HOST;
	        } else buffer += char;
	        break;

	      case HOST:
	      case HOSTNAME:
	        if (stateOverride && url.scheme == 'file') {
	          state = FILE_HOST;
	          continue;
	        } else if (char == ':' && !seenBracket) {
	          if (buffer == '') return INVALID_HOST;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PORT;
	          if (stateOverride == HOSTNAME) return;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url))
	        ) {
	          if (isSpecial(url) && buffer == '') return INVALID_HOST;
	          if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
	          failure = parseHost(url, buffer);
	          if (failure) return failure;
	          buffer = '';
	          state = PATH_START;
	          if (stateOverride) return;
	          continue;
	        } else {
	          if (char == '[') seenBracket = true;
	          else if (char == ']') seenBracket = false;
	          buffer += char;
	        } break;

	      case PORT:
	        if (DIGIT.test(char)) {
	          buffer += char;
	        } else if (
	          char == EOF || char == '/' || char == '?' || char == '#' ||
	          (char == '\\' && isSpecial(url)) ||
	          stateOverride
	        ) {
	          if (buffer != '') {
	            var port = parseInt(buffer, 10);
	            if (port > 0xFFFF) return INVALID_PORT;
	            url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
	            buffer = '';
	          }
	          if (stateOverride) return;
	          state = PATH_START;
	          continue;
	        } else return INVALID_PORT;
	        break;

	      case FILE:
	        url.scheme = 'file';
	        if (char == '/' || char == '\\') state = FILE_SLASH;
	        else if (base && base.scheme == 'file') {
	          if (char == EOF) {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	          } else if (char == '?') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.host = base.host;
	            url.path = base.path.slice();
	            url.query = base.query;
	            url.fragment = '';
	            state = FRAGMENT;
	          } else {
	            if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	              url.host = base.host;
	              url.path = base.path.slice();
	              shortenURLsPath(url);
	            }
	            state = PATH;
	            continue;
	          }
	        } else {
	          state = PATH;
	          continue;
	        } break;

	      case FILE_SLASH:
	        if (char == '/' || char == '\\') {
	          state = FILE_HOST;
	          break;
	        }
	        if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
	          if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
	          else url.host = base.host;
	        }
	        state = PATH;
	        continue;

	      case FILE_HOST:
	        if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
	          if (!stateOverride && isWindowsDriveLetter(buffer)) {
	            state = PATH;
	          } else if (buffer == '') {
	            url.host = '';
	            if (stateOverride) return;
	            state = PATH_START;
	          } else {
	            failure = parseHost(url, buffer);
	            if (failure) return failure;
	            if (url.host == 'localhost') url.host = '';
	            if (stateOverride) return;
	            buffer = '';
	            state = PATH_START;
	          } continue;
	        } else buffer += char;
	        break;

	      case PATH_START:
	        if (isSpecial(url)) {
	          state = PATH;
	          if (char != '/' && char != '\\') continue;
	        } else if (!stateOverride && char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          state = PATH;
	          if (char != '/') continue;
	        } break;

	      case PATH:
	        if (
	          char == EOF || char == '/' ||
	          (char == '\\' && isSpecial(url)) ||
	          (!stateOverride && (char == '?' || char == '#'))
	        ) {
	          if (isDoubleDot(buffer)) {
	            shortenURLsPath(url);
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else if (isSingleDot(buffer)) {
	            if (char != '/' && !(char == '\\' && isSpecial(url))) {
	              url.path.push('');
	            }
	          } else {
	            if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
	              if (url.host) url.host = '';
	              buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
	            }
	            url.path.push(buffer);
	          }
	          buffer = '';
	          if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
	            while (url.path.length > 1 && url.path[0] === '') {
	              url.path.shift();
	            }
	          }
	          if (char == '?') {
	            url.query = '';
	            state = QUERY;
	          } else if (char == '#') {
	            url.fragment = '';
	            state = FRAGMENT;
	          }
	        } else {
	          buffer += percentEncode(char, pathPercentEncodeSet);
	        } break;

	      case CANNOT_BE_A_BASE_URL_PATH:
	        if (char == '?') {
	          url.query = '';
	          state = QUERY;
	        } else if (char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case QUERY:
	        if (!stateOverride && char == '#') {
	          url.fragment = '';
	          state = FRAGMENT;
	        } else if (char != EOF) {
	          if (char == "'" && isSpecial(url)) url.query += '%27';
	          else if (char == '#') url.query += '%23';
	          else url.query += percentEncode(char, C0ControlPercentEncodeSet);
	        } break;

	      case FRAGMENT:
	        if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
	        break;
	    }

	    pointer++;
	  }
	};

	// `URL` constructor
	// https://url.spec.whatwg.org/#url-class
	var URLConstructor = function URL(url /* , base */) {
	  var that = anInstance(this, URLConstructor, 'URL');
	  var base = arguments.length > 1 ? arguments[1] : undefined;
	  var urlString = String(url);
	  var state = setInternalState$3(that, { type: 'URL' });
	  var baseState, failure;
	  if (base !== undefined) {
	    if (base instanceof URLConstructor) baseState = getInternalURLState(base);
	    else {
	      failure = parseURL(baseState = {}, String(base));
	      if (failure) throw TypeError(failure);
	    }
	  }
	  failure = parseURL(state, urlString, null, baseState);
	  if (failure) throw TypeError(failure);
	  var searchParams = state.searchParams = new URLSearchParams$1();
	  var searchParamsState = getInternalSearchParamsState(searchParams);
	  searchParamsState.updateSearchParams(state.query);
	  searchParamsState.updateURL = function () {
	    state.query = String(searchParams) || null;
	  };
	  if (!descriptors) {
	    that.href = serializeURL.call(that);
	    that.origin = getOrigin.call(that);
	    that.protocol = getProtocol.call(that);
	    that.username = getUsername.call(that);
	    that.password = getPassword.call(that);
	    that.host = getHost.call(that);
	    that.hostname = getHostname.call(that);
	    that.port = getPort.call(that);
	    that.pathname = getPathname.call(that);
	    that.search = getSearch.call(that);
	    that.searchParams = getSearchParams.call(that);
	    that.hash = getHash.call(that);
	  }
	};

	var URLPrototype = URLConstructor.prototype;

	var serializeURL = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var username = url.username;
	  var password = url.password;
	  var host = url.host;
	  var port = url.port;
	  var path = url.path;
	  var query = url.query;
	  var fragment = url.fragment;
	  var output = scheme + ':';
	  if (host !== null) {
	    output += '//';
	    if (includesCredentials(url)) {
	      output += username + (password ? ':' + password : '') + '@';
	    }
	    output += serializeHost(host);
	    if (port !== null) output += ':' + port;
	  } else if (scheme == 'file') output += '//';
	  output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	  if (query !== null) output += '?' + query;
	  if (fragment !== null) output += '#' + fragment;
	  return output;
	};

	var getOrigin = function () {
	  var url = getInternalURLState(this);
	  var scheme = url.scheme;
	  var port = url.port;
	  if (scheme == 'blob') try {
	    return new URL(scheme.path[0]).origin;
	  } catch (error) {
	    return 'null';
	  }
	  if (scheme == 'file' || !isSpecial(url)) return 'null';
	  return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
	};

	var getProtocol = function () {
	  return getInternalURLState(this).scheme + ':';
	};

	var getUsername = function () {
	  return getInternalURLState(this).username;
	};

	var getPassword = function () {
	  return getInternalURLState(this).password;
	};

	var getHost = function () {
	  var url = getInternalURLState(this);
	  var host = url.host;
	  var port = url.port;
	  return host === null ? ''
	    : port === null ? serializeHost(host)
	    : serializeHost(host) + ':' + port;
	};

	var getHostname = function () {
	  var host = getInternalURLState(this).host;
	  return host === null ? '' : serializeHost(host);
	};

	var getPort = function () {
	  var port = getInternalURLState(this).port;
	  return port === null ? '' : String(port);
	};

	var getPathname = function () {
	  var url = getInternalURLState(this);
	  var path = url.path;
	  return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
	};

	var getSearch = function () {
	  var query = getInternalURLState(this).query;
	  return query ? '?' + query : '';
	};

	var getSearchParams = function () {
	  return getInternalURLState(this).searchParams;
	};

	var getHash = function () {
	  var fragment = getInternalURLState(this).fragment;
	  return fragment ? '#' + fragment : '';
	};

	var accessorDescriptor = function (getter, setter) {
	  return { get: getter, set: setter, configurable: true, enumerable: true };
	};

	if (descriptors) {
	  objectDefineProperties(URLPrototype, {
	    // `URL.prototype.href` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-href
	    href: accessorDescriptor(serializeURL, function (href) {
	      var url = getInternalURLState(this);
	      var urlString = String(href);
	      var failure = parseURL(url, urlString);
	      if (failure) throw TypeError(failure);
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.origin` getter
	    // https://url.spec.whatwg.org/#dom-url-origin
	    origin: accessorDescriptor(getOrigin),
	    // `URL.prototype.protocol` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-protocol
	    protocol: accessorDescriptor(getProtocol, function (protocol) {
	      var url = getInternalURLState(this);
	      parseURL(url, String(protocol) + ':', SCHEME_START);
	    }),
	    // `URL.prototype.username` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-username
	    username: accessorDescriptor(getUsername, function (username) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(username));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.username = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.password` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-password
	    password: accessorDescriptor(getPassword, function (password) {
	      var url = getInternalURLState(this);
	      var codePoints = arrayFrom(String(password));
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      url.password = '';
	      for (var i = 0; i < codePoints.length; i++) {
	        url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
	      }
	    }),
	    // `URL.prototype.host` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-host
	    host: accessorDescriptor(getHost, function (host) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(host), HOST);
	    }),
	    // `URL.prototype.hostname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hostname
	    hostname: accessorDescriptor(getHostname, function (hostname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      parseURL(url, String(hostname), HOSTNAME);
	    }),
	    // `URL.prototype.port` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-port
	    port: accessorDescriptor(getPort, function (port) {
	      var url = getInternalURLState(this);
	      if (cannotHaveUsernamePasswordPort(url)) return;
	      port = String(port);
	      if (port == '') url.port = null;
	      else parseURL(url, port, PORT);
	    }),
	    // `URL.prototype.pathname` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-pathname
	    pathname: accessorDescriptor(getPathname, function (pathname) {
	      var url = getInternalURLState(this);
	      if (url.cannotBeABaseURL) return;
	      url.path = [];
	      parseURL(url, pathname + '', PATH_START);
	    }),
	    // `URL.prototype.search` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-search
	    search: accessorDescriptor(getSearch, function (search) {
	      var url = getInternalURLState(this);
	      search = String(search);
	      if (search == '') {
	        url.query = null;
	      } else {
	        if ('?' == search.charAt(0)) search = search.slice(1);
	        url.query = '';
	        parseURL(url, search, QUERY);
	      }
	      getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
	    }),
	    // `URL.prototype.searchParams` getter
	    // https://url.spec.whatwg.org/#dom-url-searchparams
	    searchParams: accessorDescriptor(getSearchParams),
	    // `URL.prototype.hash` accessors pair
	    // https://url.spec.whatwg.org/#dom-url-hash
	    hash: accessorDescriptor(getHash, function (hash) {
	      var url = getInternalURLState(this);
	      hash = String(hash);
	      if (hash == '') {
	        url.fragment = null;
	        return;
	      }
	      if ('#' == hash.charAt(0)) hash = hash.slice(1);
	      url.fragment = '';
	      parseURL(url, hash, FRAGMENT);
	    })
	  });
	}

	// `URL.prototype.toJSON` method
	// https://url.spec.whatwg.org/#dom-url-tojson
	redefine(URLPrototype, 'toJSON', function toJSON() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	// `URL.prototype.toString` method
	// https://url.spec.whatwg.org/#URL-stringification-behavior
	redefine(URLPrototype, 'toString', function toString() {
	  return serializeURL.call(this);
	}, { enumerable: true });

	if (NativeURL) {
	  var nativeCreateObjectURL = NativeURL.createObjectURL;
	  var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
	  // `URL.createObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
	    return nativeCreateObjectURL.apply(NativeURL, arguments);
	  });
	  // `URL.revokeObjectURL` method
	  // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
	  // eslint-disable-next-line no-unused-vars
	  if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
	    return nativeRevokeObjectURL.apply(NativeURL, arguments);
	  });
	}

	setToStringTag(URLConstructor, 'URL');

	_export({ global: true, forced: !nativeUrl, sham: !descriptors }, {
	  URL: URLConstructor
	});

	// empty

	var url = path.URL;

	var url$1 = url;

	var url$2 = url$1;

	var defineProperty$2 = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;

	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty$2(O, 1, { enumerable: true, get: thrower });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $includes = arrayIncludes.includes;



	var USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var entryVirtual = function (CONSTRUCTOR) {
	  return path[CONSTRUCTOR + 'Prototype'];
	};

	var includes = entryVirtual('Array').includes;

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$1 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$1] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible(this))
	      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var includes$1 = entryVirtual('String').includes;

	var ArrayPrototype$1 = Array.prototype;
	var StringPrototype = String.prototype;

	var includes$2 = function (it) {
	  var own = it.includes;
	  if (it === ArrayPrototype$1 || (it instanceof Array && own === ArrayPrototype$1.includes)) return includes;
	  if (typeof it === 'string' || it === StringPrototype || (it instanceof String && own === StringPrototype.includes)) {
	    return includes$1;
	  } return own;
	};

	var includes$3 = includes$2;

	var includes$4 = includes$3;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var assign = path.Object.assign;

	var assign$1 = assign;

	var assign$2 = assign$1;

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = assign$2 || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	// empty

	var es_object_toString = /*#__PURE__*/Object.freeze({

	});

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG$3) {
	    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
	  }
	  iterators[COLLECTION_NAME] = iterators.Array;
	}

	var nativePromiseConstructor = global_1.Promise;

	var SPECIES = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES]) {
	    defineProperty(Constructor, SPECIES, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var ITERATOR$6 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$6] = function () {
	    return this;
	  };
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$6] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var SPECIES$1 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$1]) == undefined ? defaultConstructor : aFunction(S);
	};

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var location$1 = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location$1.protocol + '//' + location$1.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (global_1.addEventListener && typeof postMessage == 'function' && !global_1.importScripts && !fails(post)) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver$1 = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$1 = global_1.process;
	var Promise = global_1.Promise;
	var IS_NODE = classofRaw(process$1) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$2(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$1.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$1.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver$1 && !engineIsIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver$1(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise && Promise.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$4 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$4
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var process$2 = global_1.process;
	var versions = process$2 && process$2.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var task$1 = task.set;










	var SPECIES$2 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$2 = internalState.get;
	var setInternalState$4 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$3 = global_1.process;
	var $fetch$1 = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$3) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper;

	var FORCED$1 = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We need Promise#finally in the pure version for preventing prototype pollution
	  if (!PromiseConstructor.prototype['finally']) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$2] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION = FORCED$1 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$1) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction(executor);
	    Internal.call(this);
	    var state = getInternalState$2(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$4(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$3.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$2(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export({ global: true, wrap: true, forced: FORCED$1 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false, true);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced: isPure }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve(this === PromiseWrapper ? PromiseConstructor : this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `Promise.allSettled` method
	// https://github.com/tc39/proposal-promise-allSettled
	_export({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aFunction(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (e) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: e };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC = !!nativePromiseConstructor && fails(function () {
	  nativePromiseConstructor.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
	_export({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor(this, getBuiltIn('Promise'));
	    var isFunction = typeof onFinally == 'function';
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	getCjsExportFromNamespace(es_object_toString);

	var promise$1 = path.Promise;

	var promise$2 = promise$1;

	var promise$3 = promise$2;

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var SPECIES$3 = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES$3];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$2 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$2(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$2(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$2(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$2(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$2(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$2(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$2(6)
	};

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var $forEach = arrayIteration.forEach;



	var STRICT_METHOD = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = (!STRICT_METHOD || !USES_TO_LENGTH$1) ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var forEach = entryVirtual('Array').forEach;

	var forEach$1 = forEach;

	var ArrayPrototype$2 = Array.prototype;

	var DOMIterables = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var forEach_1 = function (it) {
	  var own = it.forEach;
	  return it === ArrayPrototype$2 || (it instanceof Array && own === ArrayPrototype$2.forEach)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables.hasOwnProperty(classof(it)) ? forEach$1 : own;
	};

	var forEach$2 = forEach_1;

	var forEach$3 = forEach$2;

	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor$1(1); });
	var FORCED$2 = !descriptors || FAILS_ON_PRIMITIVES;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED$2, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$1(toIndexedObject(it), key);
	  }
	});

	var getOwnPropertyDescriptor_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {
	  return Object.getOwnPropertyDescriptor(it, key);
	};

	if (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;
	});

	var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor_1;

	var getOwnPropertyDescriptor$4 = getOwnPropertyDescriptor$3;

	var SPECIES$4 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$4] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH$2 = arrayMethodUsesToLength('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH$2 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var filter = entryVirtual('Array').filter;

	var ArrayPrototype$3 = Array.prototype;

	var filter_1 = function (it) {
	  var own = it.filter;
	  return it === ArrayPrototype$3 || (it instanceof Array && own === ArrayPrototype$3.filter) ? filter : own;
	};

	var filter$1 = filter_1;

	var filter$2 = filter$1;

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$3 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$3 }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var concat = entryVirtual('Array').concat;

	var ArrayPrototype$4 = Array.prototype;

	var concat_1 = function (it) {
	  var own = it.concat;
	  return it === ArrayPrototype$4 || (it instanceof Array && own === ArrayPrototype$4.concat) ? concat : own;
	};

	var concat$1 = concat_1;

	var concat$2 = concat$1;

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$5
	};

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$6 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$6
	};

	var f$7 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$7
	};

	var defineProperty$3 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty$3(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var $forEach$1 = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState$5 = internalState.set;
	var getInternalState$3 = internalState.getterFor(SYMBOL);
	var ObjectPrototype$1 = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify$1 = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype$1, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
	    nativeDefineProperty$1(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap$1 = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState$5(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);
	  if (has(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$1(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$1.call(this, P);
	  if (this === ObjectPrototype$1 && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype$1 && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
	  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype$1, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$1) setter.call(ObjectPrototypeSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
	    return wrap$1(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState$3(this).tag;
	  });

	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap$1(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap$1(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$3(this).description;
	      }
	    });
	    if (!isPure) {
	      redefine(ObjectPrototype$1, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
	    }
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify$1) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify$1([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify$1({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify$1(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify$1.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	var getOwnPropertySymbols = path.Object.getOwnPropertySymbols;

	var getOwnPropertySymbols$1 = getOwnPropertySymbols;

	var getOwnPropertySymbols$2 = getOwnPropertySymbols$1;

	var FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var keys$1 = path.Object.keys;

	var keys$2 = keys$1;

	var keys$3 = keys$2;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	var defineProperty_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var defineProperty = module.exports = function defineProperty(it, key, desc) {
	  return Object.defineProperty(it, key, desc);
	};

	if (Object.defineProperty.sham) defineProperty.sham = true;
	});

	var defineProperty$4 = defineProperty_1;

	var defineProperty$5 = defineProperty$4;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    defineProperty$5(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty$6 = _defineProperty;

	function _objectSpread(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? Object(arguments[i]) : {};

	    var ownKeys = keys$3(source);

	    if (typeof getOwnPropertySymbols$2 === 'function') {
	      var _context;

	      ownKeys = concat$2(ownKeys).call(ownKeys, filter$2(_context = getOwnPropertySymbols$2(source)).call(_context, function (sym) {
	        return getOwnPropertyDescriptor$4(source, sym).enumerable;
	      }));
	    }

	    forEach$3(ownKeys).call(ownKeys, function (key) {
	      defineProperty$6(target, key, source[key]);
	    });
	  }

	  return target;
	}

	var objectSpread = _objectSpread;

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$3 = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$3 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var map = entryVirtual('Array').map;

	var ArrayPrototype$5 = Array.prototype;

	var map_1 = function (it) {
	  var own = it.map;
	  return it === ArrayPrototype$5 || (it instanceof Array && own === ArrayPrototype$5.map) ? map : own;
	};

	var map$1 = map_1;

	var map$2 = map$1;

	// `Array.prototype.{ reduce, reduceRight }` methods implementation
	var createMethod$3 = function (IS_RIGHT) {
	  return function (that, callbackfn, argumentsLength, memo) {
	    aFunction(callbackfn);
	    var O = toObject(that);
	    var self = indexedObject(O);
	    var length = toLength(O.length);
	    var index = IS_RIGHT ? length - 1 : 0;
	    var i = IS_RIGHT ? -1 : 1;
	    if (argumentsLength < 2) while (true) {
	      if (index in self) {
	        memo = self[index];
	        index += i;
	        break;
	      }
	      index += i;
	      if (IS_RIGHT ? index < 0 : length <= index) {
	        throw TypeError('Reduce of empty array with no initial value');
	      }
	    }
	    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
	      memo = callbackfn(memo, self[index], index, O);
	    }
	    return memo;
	  };
	};

	var arrayReduce = {
	  // `Array.prototype.reduce` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	  left: createMethod$3(false),
	  // `Array.prototype.reduceRight` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.reduceright
	  right: createMethod$3(true)
	};

	var $reduce = arrayReduce.left;



	var STRICT_METHOD$1 = arrayMethodIsStrict('reduce');
	var USES_TO_LENGTH$4 = arrayMethodUsesToLength('reduce', { 1: 0 });

	// `Array.prototype.reduce` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reduce
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$1 || !USES_TO_LENGTH$4 }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var reduce = entryVirtual('Array').reduce;

	var ArrayPrototype$6 = Array.prototype;

	var reduce_1 = function (it) {
	  var own = it.reduce;
	  return it === ArrayPrototype$6 || (it instanceof Array && own === ArrayPrototype$6.reduce) ? reduce : own;
	};

	var reduce$1 = reduce_1;

	var reduce$2 = reduce$1;

	var keys$4 = keys$1;

	var keys$5 = keys$4;

	var filter$3 = filter_1;

	var filter$4 = filter$3;

	// `Array.isArray` method
	// https://tc39.github.io/ecma262/#sec-array.isarray
	_export({ target: 'Array', stat: true }, {
	  isArray: isArray
	});

	var isArray$1 = path.Array.isArray;

	var isArray$2 = isArray$1;

	var isArray$3 = isArray$2;

	/** @module SearchStates */

	/**
	 * SearchStates is an ENUM for the various stages of searching,
	 * used to show different templates
	 * @enum {string}
	 */
	var SearchStates = {
	  PRE_SEARCH: 'pre-search',
	  SEARCH_LOADING: 'search-loading',
	  SEARCH_COMPLETE: 'search-complete'
	};

	var propertyIsEnumerable = objectPropertyIsEnumerable.f;

	// `Object.{ entries, values }` methods implementation
	var createMethod$4 = function (TO_ENTRIES) {
	  return function (it) {
	    var O = toIndexedObject(it);
	    var keys = objectKeys(O);
	    var length = keys.length;
	    var i = 0;
	    var result = [];
	    var key;
	    while (length > i) {
	      key = keys[i++];
	      if (!descriptors || propertyIsEnumerable.call(O, key)) {
	        result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
	      }
	    }
	    return result;
	  };
	};

	var objectToArray = {
	  // `Object.entries` method
	  // https://tc39.github.io/ecma262/#sec-object.entries
	  entries: createMethod$4(true),
	  // `Object.values` method
	  // https://tc39.github.io/ecma262/#sec-object.values
	  values: createMethod$4(false)
	};

	var $entries = objectToArray.entries;

	// `Object.entries` method
	// https://tc39.github.io/ecma262/#sec-object.entries
	_export({ target: 'Object', stat: true }, {
	  entries: function entries(O) {
	    return $entries(O);
	  }
	});

	var entries = path.Object.entries;

	var entries$1 = entries;

	var entries$2 = entries$1;

	var forEach$4 = forEach_1;

	/** @module Result */
	var Result = function Result(data) {
	  if (data === void 0) {
	    data = {};
	  }

	  /**
	   * The raw profile data
	   * @type {Object}
	   * @private
	   */
	  this._raw = data.raw || null;
	  /**
	   * The formatted profile data
	   * @type {Object}
	   * @private
	   */

	  this._formatted = data.formatted;
	  /**
	   * The highlighted profile data with highlights applied to applicable fields
	   * @type {Object}
	   * @private
	   */

	  this._highlighted = data.highlighted;
	  /**
	   * The index number of the result
	   * @type {Number}
	   */

	  this.ordinal = data.ordinal || null;
	  /**
	   * The title of the result card
	   * @type {string|null}
	   */

	  this.title = data.title || null;
	  /**
	   * The body of the details section of the result card, can contain HTML
	   * @type {string| null}
	   */

	  this.details = data.details || null;
	  /**
	   * The destination link for the title of the result card
	   * @type {string|null}
	   */

	  this.link = data.link || null;
	  /**
	   * The Entity ID, or other unique identifier, used for to power interactivity
	   * @type {string|null}
	   */

	  this.id = data.id || null;
	  /**
	   * The subtitle on the result card
	   * @type {string|null}
	   */

	  this.subtitle = data.subtitle || null;
	  /**
	   * The class modifier, usually derived from the vertical configuration ID
	   * Used to apply different styling to different result card types
	   * @type {string|null}
	   */

	  this.modifier = data.modifier || null;
	  /**
	   * A large date, of the format { month: 'Jan', day: '01' }
	   * @type {Object|null}
	   */

	  this.bigDate = data.bigDate || null;
	  /**
	   * An image profile object, expected to have a url property
	   * @type {Object|null}
	   */

	  this.image = data.image || null;
	  /**
	   * An array of calls to action, of the format:
	   * { icon: '', url: '', text: '', eventType: '', eventOptions: {}}
	   * @type {Array}
	   */

	  this.callsToAction = data.callsToAction || [];
	  /**
	   * Determines if an accordian result should be collapsed by default
	   * @type {boolean}
	   */

	  this.collapsed = data.collapsed === undefined ? true : data.collapsed;
	  /**
	   * @type {number}
	   */

	  this.distance = data.distance || null;
	  /**
	   * @type {number}
	   */

	  this.distanceFromFilter = data.distanceFromFilter || null;
	};

	var test$1 = [];
	var nativeSort = test$1.sort;

	// IE8-
	var FAILS_ON_UNDEFINED = fails(function () {
	  test$1.sort(undefined);
	});
	// V8 bug
	var FAILS_ON_NULL = fails(function () {
	  test$1.sort(null);
	});
	// Old WebKit
	var STRICT_METHOD$2 = arrayMethodIsStrict('sort');

	var FORCED$4 = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD$2;

	// `Array.prototype.sort` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.sort
	_export({ target: 'Array', proto: true, forced: FORCED$4 }, {
	  sort: function sort(comparefn) {
	    return comparefn === undefined
	      ? nativeSort.call(toObject(this))
	      : nativeSort.call(toObject(this), aFunction(comparefn));
	  }
	});

	var sort = entryVirtual('Array').sort;

	var ArrayPrototype$7 = Array.prototype;

	var sort_1 = function (it) {
	  var own = it.sort;
	  return it === ArrayPrototype$7 || (it instanceof Array && own === ArrayPrototype$7.sort) ? sort : own;
	};

	var sort$1 = sort_1;

	var sort$2 = sort$1;

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$5 = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$5 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$1 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$5 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$5];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var slice$1 = entryVirtual('Array').slice;

	var ArrayPrototype$8 = Array.prototype;

	var slice_1 = function (it) {
	  var own = it.slice;
	  return it === ArrayPrototype$8 || (it instanceof Array && own === ArrayPrototype$8.slice) ? slice$1 : own;
	};

	var slice$2 = slice_1;

	var slice$3 = slice$2;

	/** @module HighlightedValue */

	/**
	 * Model representing a highlighted value.
	 */
	var HighlightedValue =
	/*#__PURE__*/
	function () {
	  function HighlightedValue(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    this.value = data.value || data.shortValue || '';
	    this.matchedSubstrings = data.matchedSubstrings || [];
	  }
	  /**
	   * get highlighted value string
	   * @returns {string}
	   */


	  var _proto = HighlightedValue.prototype;

	  _proto.get = function get() {
	    this._sortMatchedSubstrings();

	    return this.buildHighlightedValue(this.value, this.matchedSubstrings);
	  }
	  /**
	   * get highlighted value string
	   * @param {Function} transformFunction takes a string and returns the transformed string
	   * @returns {string} The value interpolated with highlighting markup and transformed in between
	   */
	  ;

	  _proto.getWithTransformFunction = function getWithTransformFunction(transformFunction) {
	    this._sortMatchedSubstrings();

	    return this.buildHighlightedValue(this.value, this.matchedSubstrings, transformFunction);
	  }
	  /**
	   * get inverted highlighted value string
	   * @returns {string}
	   */
	  ;

	  _proto.getInverted = function getInverted() {
	    this._sortMatchedSubstrings();

	    var invertedSubstrings = this._getInvertedSubstrings(this.matchedSubstrings, this.value.length);

	    return this.buildHighlightedValue(this.value, invertedSubstrings);
	  }
	  /**
	   * get inverted highlighted value string
	   * @param {Function} transformFunction takes a string and returns the transformed string
	   * @returns {string} The value interpolated with highlighting markup and transformed in between
	   */
	  ;

	  _proto.getInvertedWithTransformFunction = function getInvertedWithTransformFunction(transformFunction) {
	    this._sortMatchedSubstrings();

	    var invertedSubstrings = this._getInvertedSubstrings(this.matchedSubstrings, this.value.length);

	    return this.buildHighlightedValue(this.value, invertedSubstrings, transformFunction);
	  }
	  /**
	   * introduces highlighting to input data according to highlighting specifiers
	   *
	   * @param {Object} val input object to apply highlighting to
	   *
	   *  example object :
	   *  {
	   *    name: 'ATM',
	   *    featuredMessage: {
	   *      description: 'Save time & bank on your terms at over 1,800 ATMs'
	   *    }
	   *  }
	   *
	   * @param {Object} highlightedSubstrings highlighting specifiers to apply to input object
	   *
	   *  example object :
	   *  {
	   *    name: {
	   *      matchedSubstrings: [{
	   *        length: 3,
	   *        offset: 0
	   *      }],
	   *      value: 'ATM'
	   *    },
	   *    featuredMessage: {
	   *      description: {
	   *        matchedSubstrings: [{
	   *          length: 4,
	   *          offset: 45
	   *        }],
	   *        value: 'Save time & bank on your terms at over 1,800 ATMs'
	   *      }
	   *    }
	   *  }
	   *
	   * @param {Function} transformFunction function to apply to strings in between highlighting markup
	   *
	   *  example function :
	   *  function (string) {
	   *    return handlebars.escapeExpression(string);
	   *  }
	   *
	   * @returns {string} copy of input value with highlighting applied
	   *
	   *  example object :
	   *  {
	   *    name: '<strong>ATM</strong>',
	   *    featuredMessage: {
	   *      description: 'Save time & bank on your terms at over 1,800 <strong>ATMs</strong>'
	   *    }
	   *  }
	   *
	   */
	  ;

	  _proto.buildHighlightedValue = function buildHighlightedValue(val, highlightedSubstrings, transformFunction) {
	    if (transformFunction === void 0) {
	      transformFunction = function transformFunction(x) {
	        return x;
	      };
	    }

	    var highlightedValue = '';
	    var nextStart = 0;

	    if (highlightedSubstrings.length === 0) {
	      return transformFunction(val);
	    }

	    for (var j = 0; j < highlightedSubstrings.length; j++) {
	      var start = Number(highlightedSubstrings[j].offset);
	      var end = start + highlightedSubstrings[j].length;
	      highlightedValue += [transformFunction(slice$3(val).call(val, nextStart, start)), '<strong>', transformFunction(slice$3(val).call(val, start, end)), '</strong>'].join('');

	      if (j === highlightedSubstrings.length - 1 && end < val.length) {
	        highlightedValue += transformFunction(slice$3(val).call(val, end));
	      }

	      nextStart = end;
	    }

	    return highlightedValue;
	  };

	  _proto._sortMatchedSubstrings = function _sortMatchedSubstrings() {
	    var _context;

	    sort$2(_context = this.matchedSubstrings).call(_context, function (a, b) {
	      if (a.offset < b.offset) {
	        return -1;
	      }

	      if (a.offset > b.offset) {
	        return 1;
	      }

	      return 0;
	    });
	  };

	  _proto._getInvertedSubstrings = function _getInvertedSubstrings(matchedSubstrings, valueLength) {
	    var invertedSubstrings = [];

	    for (var i = 0; i < matchedSubstrings.length; i++) {
	      var substring = matchedSubstrings[i];
	      var nextOffset = substring.offset + substring.length;

	      if (i === 0 && substring.offset !== 0) {
	        invertedSubstrings.push({
	          offset: 0,
	          length: substring.offset
	        });
	      }

	      if (valueLength > nextOffset) {
	        invertedSubstrings.push({
	          offset: nextOffset,
	          length: i < matchedSubstrings.length - 1 ? matchedSubstrings[i + 1].offset - nextOffset : valueLength - nextOffset
	        });
	      }
	    }

	    return invertedSubstrings;
	  };

	  return HighlightedValue;
	}();

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  create: objectCreate
	});

	var Object$1 = path.Object;

	var create = function create(P, D) {
	  return Object$1.create(P, D);
	};

	var create$1 = create;

	var create$2 = create$1;

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = create$2(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var inheritsLoose = _inheritsLoose;

	var freezing = !fails(function () {
	  return Object.isExtensible(Object.preventExtensions({}));
	});

	var internalMetadata = createCommonjsModule(function (module) {
	var defineProperty = objectDefineProperty.f;



	var METADATA = uid('meta');
	var id = 0;

	var isExtensible = Object.isExtensible || function () {
	  return true;
	};

	var setMetadata = function (it) {
	  defineProperty(it, METADATA, { value: {
	    objectID: 'O' + ++id, // object ID
	    weakData: {}          // weak collections IDs
	  } });
	};

	var fastKey = function (it, create) {
	  // return a primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMetadata(it);
	  // return object ID
	  } return it[METADATA].objectID;
	};

	var getWeakData = function (it, create) {
	  if (!has(it, METADATA)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMetadata(it);
	  // return the store of weak collections IDs
	  } return it[METADATA].weakData;
	};

	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (freezing && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
	  return it;
	};

	var meta = module.exports = {
	  REQUIRED: false,
	  fastKey: fastKey,
	  getWeakData: getWeakData,
	  onFreeze: onFreeze
	};

	hiddenKeys[METADATA] = true;
	});
	var internalMetadata_1 = internalMetadata.REQUIRED;
	var internalMetadata_2 = internalMetadata.fastKey;
	var internalMetadata_3 = internalMetadata.getWeakData;
	var internalMetadata_4 = internalMetadata.onFreeze;

	var defineProperty$7 = objectDefineProperty.f;
	var forEach$5 = arrayIteration.forEach;



	var setInternalState$6 = internalState.set;
	var internalStateGetterFor = internalState.getterFor;

	var collection = function (CONSTRUCTOR_NAME, wrapper, common) {
	  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
	  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
	  var ADDER = IS_MAP ? 'set' : 'add';
	  var NativeConstructor = global_1[CONSTRUCTOR_NAME];
	  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
	  var exported = {};
	  var Constructor;

	  if (!descriptors || typeof NativeConstructor != 'function'
	    || !(IS_WEAK || NativePrototype.forEach && !fails(function () { new NativeConstructor().entries().next(); }))
	  ) {
	    // create collection constructor
	    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
	    internalMetadata.REQUIRED = true;
	  } else {
	    Constructor = wrapper(function (target, iterable) {
	      setInternalState$6(anInstance(target, Constructor, CONSTRUCTOR_NAME), {
	        type: CONSTRUCTOR_NAME,
	        collection: new NativeConstructor()
	      });
	      if (iterable != undefined) iterate_1(iterable, target[ADDER], target, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

	    forEach$5(['add', 'clear', 'delete', 'forEach', 'get', 'has', 'set', 'keys', 'values', 'entries'], function (KEY) {
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if (KEY in NativePrototype && !(IS_WEAK && KEY == 'clear')) {
	        createNonEnumerableProperty(Constructor.prototype, KEY, function (a, b) {
	          var collection = getInternalState(this).collection;
	          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
	          var result = collection[KEY](a === 0 ? 0 : a, b);
	          return IS_ADDER ? this : result;
	        });
	      }
	    });

	    IS_WEAK || defineProperty$7(Constructor.prototype, 'size', {
	      configurable: true,
	      get: function () {
	        return getInternalState(this).collection.size;
	      }
	    });
	  }

	  setToStringTag(Constructor, CONSTRUCTOR_NAME, false, true);

	  exported[CONSTRUCTOR_NAME] = Constructor;
	  _export({ global: true, forced: true }, exported);

	  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

	  return Constructor;
	};

	var defineProperty$8 = objectDefineProperty.f;








	var fastKey = internalMetadata.fastKey;


	var setInternalState$7 = internalState.set;
	var internalStateGetterFor$1 = internalState.getterFor;

	var collectionStrong = {
	  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
	    var C = wrapper(function (that, iterable) {
	      anInstance(that, C, CONSTRUCTOR_NAME);
	      setInternalState$7(that, {
	        type: CONSTRUCTOR_NAME,
	        index: objectCreate(null),
	        first: undefined,
	        last: undefined,
	        size: 0
	      });
	      if (!descriptors) that.size = 0;
	      if (iterable != undefined) iterate_1(iterable, that[ADDER], that, IS_MAP);
	    });

	    var getInternalState = internalStateGetterFor$1(CONSTRUCTOR_NAME);

	    var define = function (that, key, value) {
	      var state = getInternalState(that);
	      var entry = getEntry(that, key);
	      var previous, index;
	      // change existing entry
	      if (entry) {
	        entry.value = value;
	      // create new entry
	      } else {
	        state.last = entry = {
	          index: index = fastKey(key, true),
	          key: key,
	          value: value,
	          previous: previous = state.last,
	          next: undefined,
	          removed: false
	        };
	        if (!state.first) state.first = entry;
	        if (previous) previous.next = entry;
	        if (descriptors) state.size++;
	        else that.size++;
	        // add to index
	        if (index !== 'F') state.index[index] = entry;
	      } return that;
	    };

	    var getEntry = function (that, key) {
	      var state = getInternalState(that);
	      // fast case
	      var index = fastKey(key);
	      var entry;
	      if (index !== 'F') return state.index[index];
	      // frozen object case
	      for (entry = state.first; entry; entry = entry.next) {
	        if (entry.key == key) return entry;
	      }
	    };

	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        var that = this;
	        var state = getInternalState(that);
	        var data = state.index;
	        var entry = state.first;
	        while (entry) {
	          entry.removed = true;
	          if (entry.previous) entry.previous = entry.previous.next = undefined;
	          delete data[entry.index];
	          entry = entry.next;
	        }
	        state.first = state.last = undefined;
	        if (descriptors) state.size = 0;
	        else that.size = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function (key) {
	        var that = this;
	        var state = getInternalState(that);
	        var entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.next;
	          var prev = entry.previous;
	          delete state.index[entry.index];
	          entry.removed = true;
	          if (prev) prev.next = next;
	          if (next) next.previous = prev;
	          if (state.first == entry) state.first = next;
	          if (state.last == entry) state.last = prev;
	          if (descriptors) state.size--;
	          else that.size--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /* , that = undefined */) {
	        var state = getInternalState(this);
	        var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	        var entry;
	        while (entry = entry ? entry.next : state.first) {
	          boundFunction(entry.value, entry.key, this);
	          // revert to the last existing entry
	          while (entry && entry.removed) entry = entry.previous;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });

	    redefineAll(C.prototype, IS_MAP ? {
	      // 23.1.3.6 Map.prototype.get(key)
	      get: function get(key) {
	        var entry = getEntry(this, key);
	        return entry && entry.value;
	      },
	      // 23.1.3.9 Map.prototype.set(key, value)
	      set: function set(key, value) {
	        return define(this, key === 0 ? 0 : key, value);
	      }
	    } : {
	      // 23.2.3.1 Set.prototype.add(value)
	      add: function add(value) {
	        return define(this, value = value === 0 ? 0 : value, value);
	      }
	    });
	    if (descriptors) defineProperty$8(C.prototype, 'size', {
	      get: function () {
	        return getInternalState(this).size;
	      }
	    });
	    return C;
	  },
	  setStrong: function (C, CONSTRUCTOR_NAME, IS_MAP) {
	    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
	    var getInternalCollectionState = internalStateGetterFor$1(CONSTRUCTOR_NAME);
	    var getInternalIteratorState = internalStateGetterFor$1(ITERATOR_NAME);
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
	      setInternalState$7(this, {
	        type: ITERATOR_NAME,
	        target: iterated,
	        state: getInternalCollectionState(iterated),
	        kind: kind,
	        last: undefined
	      });
	    }, function () {
	      var state = getInternalIteratorState(this);
	      var kind = state.kind;
	      var entry = state.last;
	      // revert to the last existing entry
	      while (entry && entry.removed) entry = entry.previous;
	      // get next entry
	      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
	        // or finish the iteration
	        state.target = undefined;
	        return { value: undefined, done: true };
	      }
	      // return step by kind
	      if (kind == 'keys') return { value: entry.key, done: false };
	      if (kind == 'values') return { value: entry.value, done: false };
	      return { value: [entry.key, entry.value], done: false };
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(CONSTRUCTOR_NAME);
	  }
	};

	// `Map` constructor
	// https://tc39.github.io/ecma262/#sec-map-objects
	var es_map = collection('Map', function (init) {
	  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
	}, collectionStrong);

	var map$3 = path.Map;

	// https://tc39.github.io/proposal-setmap-offrom/




	var collectionFrom = function from(source /* , mapFn, thisArg */) {
	  var length = arguments.length;
	  var mapFn = length > 1 ? arguments[1] : undefined;
	  var mapping, A, n, boundFunction;
	  aFunction(this);
	  mapping = mapFn !== undefined;
	  if (mapping) aFunction(mapFn);
	  if (source == undefined) return new this();
	  A = [];
	  if (mapping) {
	    n = 0;
	    boundFunction = functionBindContext(mapFn, length > 2 ? arguments[2] : undefined, 2);
	    iterate_1(source, function (nextItem) {
	      A.push(boundFunction(nextItem, n++));
	    });
	  } else {
	    iterate_1(source, A.push, A);
	  }
	  return new this(A);
	};

	// `Map.from` method
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
	_export({ target: 'Map', stat: true }, {
	  from: collectionFrom
	});

	// https://tc39.github.io/proposal-setmap-offrom/
	var collectionOf = function of() {
	  var length = arguments.length;
	  var A = new Array(length);
	  while (length--) A[length] = arguments[length];
	  return new this(A);
	};

	// `Map.of` method
	// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
	_export({ target: 'Map', stat: true }, {
	  of: collectionOf
	});

	// https://github.com/tc39/collection-methods
	var collectionDeleteAll = function (/* ...elements */) {
	  var collection = anObject(this);
	  var remover = aFunction(collection['delete']);
	  var allDeleted = true;
	  var wasDeleted;
	  for (var k = 0, len = arguments.length; k < len; k++) {
	    wasDeleted = remover.call(collection, arguments[k]);
	    allDeleted = allDeleted && wasDeleted;
	  }
	  return !!allDeleted;
	};

	// `Map.prototype.deleteAll` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  deleteAll: function deleteAll(/* ...elements */) {
	    return collectionDeleteAll.apply(this, arguments);
	  }
	});

	var getMapIterator = getIterator;

	// `Map.prototype.every` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  every: function every(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return !iterate_1(iterator, function (key, value) {
	      if (!boundFunction(value, key, map)) return iterate_1.stop();
	    }, undefined, true, true).stopped;
	  }
	});

	// `Map.prototype.filter` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
	    var setter = aFunction(newMap.set);
	    iterate_1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) setter.call(newMap, key, value);
	    }, undefined, true, true);
	    return newMap;
	  }
	});

	// `Map.prototype.find` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  find: function find(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return iterate_1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) return iterate_1.stop(value);
	    }, undefined, true, true).result;
	  }
	});

	// `Map.prototype.findKey` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  findKey: function findKey(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return iterate_1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) return iterate_1.stop(key);
	    }, undefined, true, true).result;
	  }
	});

	// `Map.groupBy` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', stat: true }, {
	  groupBy: function groupBy(iterable, keyDerivative) {
	    var newMap = new this();
	    aFunction(keyDerivative);
	    var has = aFunction(newMap.has);
	    var get = aFunction(newMap.get);
	    var set = aFunction(newMap.set);
	    iterate_1(iterable, function (element) {
	      var derivedKey = keyDerivative(element);
	      if (!has.call(newMap, derivedKey)) set.call(newMap, derivedKey, [element]);
	      else get.call(newMap, derivedKey).push(element);
	    });
	    return newMap;
	  }
	});

	// `SameValueZero` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevaluezero
	var sameValueZero = function (x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y || x != x && y != y;
	};

	// `Map.prototype.includes` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  includes: function includes(searchElement) {
	    return iterate_1(getMapIterator(anObject(this)), function (key, value) {
	      if (sameValueZero(value, searchElement)) return iterate_1.stop();
	    }, undefined, true, true).stopped;
	  }
	});

	// `Map.keyBy` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', stat: true }, {
	  keyBy: function keyBy(iterable, keyDerivative) {
	    var newMap = new this();
	    aFunction(keyDerivative);
	    var setter = aFunction(newMap.set);
	    iterate_1(iterable, function (element) {
	      setter.call(newMap, keyDerivative(element), element);
	    });
	    return newMap;
	  }
	});

	// `Map.prototype.includes` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  keyOf: function keyOf(searchElement) {
	    return iterate_1(getMapIterator(anObject(this)), function (key, value) {
	      if (value === searchElement) return iterate_1.stop(key);
	    }, undefined, true, true).result;
	  }
	});

	// `Map.prototype.mapKeys` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  mapKeys: function mapKeys(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
	    var setter = aFunction(newMap.set);
	    iterate_1(iterator, function (key, value) {
	      setter.call(newMap, boundFunction(value, key, map), value);
	    }, undefined, true, true);
	    return newMap;
	  }
	});

	// `Map.prototype.mapValues` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  mapValues: function mapValues(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
	    var setter = aFunction(newMap.set);
	    iterate_1(iterator, function (key, value) {
	      setter.call(newMap, key, boundFunction(value, key, map));
	    }, undefined, true, true);
	    return newMap;
	  }
	});

	// `Map.prototype.merge` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  // eslint-disable-next-line no-unused-vars
	  merge: function merge(iterable /* ...iterbles */) {
	    var map = anObject(this);
	    var setter = aFunction(map.set);
	    var i = 0;
	    while (i < arguments.length) {
	      iterate_1(arguments[i++], setter, map, true);
	    }
	    return map;
	  }
	});

	// `Map.prototype.reduce` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  reduce: function reduce(callbackfn /* , initialValue */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var noInitial = arguments.length < 2;
	    var accumulator = noInitial ? undefined : arguments[1];
	    aFunction(callbackfn);
	    iterate_1(iterator, function (key, value) {
	      if (noInitial) {
	        noInitial = false;
	        accumulator = value;
	      } else {
	        accumulator = callbackfn(accumulator, value, key, map);
	      }
	    }, undefined, true, true);
	    if (noInitial) throw TypeError('Reduce of empty map with no initial value');
	    return accumulator;
	  }
	});

	// `Set.prototype.some` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  some: function some(callbackfn /* , thisArg */) {
	    var map = anObject(this);
	    var iterator = getMapIterator(map);
	    var boundFunction = functionBindContext(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
	    return iterate_1(iterator, function (key, value) {
	      if (boundFunction(value, key, map)) return iterate_1.stop();
	    }, undefined, true, true).stopped;
	  }
	});

	// `Set.prototype.update` method
	// https://github.com/tc39/proposal-collection-methods
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  update: function update(key, callback /* , thunk */) {
	    var map = anObject(this);
	    var length = arguments.length;
	    aFunction(callback);
	    var isPresentInMap = map.has(key);
	    if (!isPresentInMap && length < 3) {
	      throw TypeError('Updating absent value');
	    }
	    var value = isPresentInMap ? map.get(key) : aFunction(length > 2 ? arguments[2] : undefined)(key, map);
	    map.set(key, callback(value, key, map));
	    return map;
	  }
	});

	// `Map.prototype.upsert` method
	// https://github.com/thumbsupep/proposal-upsert
	var mapUpsert = function upsert(key, updateFn /* , insertFn */) {
	  var map = anObject(this);
	  var insertFn = arguments.length > 2 ? arguments[2] : undefined;
	  var value;
	  if (typeof updateFn != 'function' && typeof insertFn != 'function') {
	    throw TypeError('At least one callback required');
	  }
	  if (map.has(key)) {
	    value = map.get(key);
	    if (typeof updateFn == 'function') {
	      value = updateFn(value);
	      map.set(key, value);
	    }
	  } else if (typeof insertFn == 'function') {
	    value = insertFn();
	    map.set(key, value);
	  } return value;
	};

	// `Map.prototype.upsert` method
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  upsert: mapUpsert
	});

	// TODO: remove from `core-js@4`




	// `Map.prototype.updateOrInsert` method (replaced by `Map.prototype.upsert`)
	// https://github.com/thumbsupep/proposal-upsert
	_export({ target: 'Map', proto: true, real: true, forced: isPure }, {
	  updateOrInsert: mapUpsert
	});

	// TODO: remove from `core-js@4`


	var map$4 = map$3;

	var map$5 = map$4;

	var FAILS_ON_PRIMITIVES$2 = fails(function () { objectGetPrototypeOf(1); });

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$2, sham: !correctPrototypeGetter }, {
	  getPrototypeOf: function getPrototypeOf(it) {
	    return objectGetPrototypeOf(toObject(it));
	  }
	});

	var getPrototypeOf = path.Object.getPrototypeOf;

	var getPrototypeOf$1 = getPrototypeOf;

	var getPrototypeOf$2 = getPrototypeOf$1;

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	_export({ target: 'Object', stat: true }, {
	  setPrototypeOf: objectSetPrototypeOf
	});

	var setPrototypeOf = path.Object.setPrototypeOf;

	var setPrototypeOf$1 = setPrototypeOf;

	var setPrototypeOf$2 = setPrototypeOf$1;

	var getPrototypeOf$3 = createCommonjsModule(function (module) {
	function _getPrototypeOf(o) {
	  module.exports = _getPrototypeOf = setPrototypeOf$2 ? getPrototypeOf$2 : function _getPrototypeOf(o) {
	    return o.__proto__ || getPrototypeOf$2(o);
	  };
	  return _getPrototypeOf(o);
	}

	module.exports = _getPrototypeOf;
	});

	var setPrototypeOf$3 = createCommonjsModule(function (module) {
	function _setPrototypeOf(o, p) {
	  module.exports = _setPrototypeOf = setPrototypeOf$2 || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	module.exports = _setPrototypeOf;
	});

	var $indexOf = arrayIncludes.indexOf;



	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$3 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$6 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$3 || !USES_TO_LENGTH$6 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var indexOf$1 = entryVirtual('Array').indexOf;

	var ArrayPrototype$9 = Array.prototype;

	var indexOf_1 = function (it) {
	  var own = it.indexOf;
	  return it === ArrayPrototype$9 || (it instanceof Array && own === ArrayPrototype$9.indexOf) ? indexOf$1 : own;
	};

	var indexOf$2 = indexOf_1;

	var indexOf$3 = indexOf$2;

	function _isNativeFunction(fn) {
	  var _context;

	  return indexOf$3(_context = Function.toString.call(fn)).call(_context, "[native code]") !== -1;
	}

	var isNativeFunction = _isNativeFunction;

	var slice$4 = [].slice;
	var factories = {};

	var construct = function (C, argsLength, args) {
	  if (!(argsLength in factories)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	var functionBind = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = slice$4.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice$4.call(arguments));
	    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	// `Function.prototype.bind` method
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	_export({ target: 'Function', proto: true }, {
	  bind: functionBind
	});

	var bind$1 = entryVirtual('Function').bind;

	var FunctionPrototype = Function.prototype;

	var bind_1 = function (it) {
	  var own = it.bind;
	  return it === FunctionPrototype || (it instanceof Function && own === FunctionPrototype.bind) ? bind$1 : own;
	};

	var bind$2 = bind_1;

	var bind$3 = bind$2;

	var nativeConstruct = getBuiltIn('Reflect', 'construct');

	// `Reflect.construct` method
	// https://tc39.github.io/ecma262/#sec-reflect.construct
	// MS Edge supports only 2 arguments and argumentsList argument is optional
	// FF Nightly sets third argument as `new.target`, but does not create `this` from it
	var NEW_TARGET_BUG = fails(function () {
	  function F() { /* empty */ }
	  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
	});
	var ARGS_BUG = !fails(function () {
	  nativeConstruct(function () { /* empty */ });
	});
	var FORCED$5 = NEW_TARGET_BUG || ARGS_BUG;

	_export({ target: 'Reflect', stat: true, forced: FORCED$5, sham: FORCED$5 }, {
	  construct: function construct(Target, args /* , newTarget */) {
	    aFunction(Target);
	    anObject(args);
	    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
	    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
	    if (Target == newTarget) {
	      // w/o altered newTarget, optimization for 0-4 arguments
	      switch (args.length) {
	        case 0: return new Target();
	        case 1: return new Target(args[0]);
	        case 2: return new Target(args[0], args[1]);
	        case 3: return new Target(args[0], args[1], args[2]);
	        case 4: return new Target(args[0], args[1], args[2], args[3]);
	      }
	      // w/o altered newTarget, lot of arguments case
	      var $args = [null];
	      $args.push.apply($args, args);
	      return new (functionBind.apply(Target, $args))();
	    }
	    // with altered newTarget, not support built-in constructors
	    var proto = newTarget.prototype;
	    var instance = objectCreate(isObject(proto) ? proto : Object.prototype);
	    var result = Function.apply.call(Target, instance, args);
	    return isObject(result) ? result : instance;
	  }
	});

	var construct$1 = path.Reflect.construct;

	var construct$2 = construct$1;

	var construct$3 = construct$2;

	var construct$4 = createCommonjsModule(function (module) {
	function isNativeReflectConstruct() {
	  if (typeof Reflect === "undefined" || !construct$3) return false;
	  if (construct$3.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(construct$3(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _construct(Parent, args, Class) {
	  if (isNativeReflectConstruct()) {
	    module.exports = _construct = construct$3;
	  } else {
	    module.exports = _construct = function _construct(Parent, args, Class) {
	      var a = [null];
	      a.push.apply(a, args);

	      var Constructor = bind$3(Function).apply(Parent, a);

	      var instance = new Constructor();
	      if (Class) setPrototypeOf$3(instance, Class.prototype);
	      return instance;
	    };
	  }

	  return _construct.apply(null, arguments);
	}

	module.exports = _construct;
	});

	var wrapNativeSuper = createCommonjsModule(function (module) {
	function _wrapNativeSuper(Class) {
	  var _cache = typeof map$5 === "function" ? new map$5() : undefined;

	  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
	    if (Class === null || !isNativeFunction(Class)) return Class;

	    if (typeof Class !== "function") {
	      throw new TypeError("Super expression must either be null or a function");
	    }

	    if (typeof _cache !== "undefined") {
	      if (_cache.has(Class)) return _cache.get(Class);

	      _cache.set(Class, Wrapper);
	    }

	    function Wrapper() {
	      return construct$4(Class, arguments, getPrototypeOf$3(this).constructor);
	    }

	    Wrapper.prototype = create$2(Class.prototype, {
	      constructor: {
	        value: Wrapper,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	    return setPrototypeOf$3(Wrapper, Class);
	  };

	  return _wrapNativeSuper(Class);
	}

	module.exports = _wrapNativeSuper;
	});

	/** @module Errors */

	/**
	 * AnswersBaseError is an extension of the base Error object.
	 * This is the object that is used to when reporting to the server.
	 * @extends Error
	 *
	 * Error codes fall into one of four categories:
	 * 1XX errors: Basic errors
	 * 2XX errors: UI errors
	 * 3XX errors: Endpoint errors
	 * 4XX errors: Core errors
	 */
	var AnswersBaseError =
	/*#__PURE__*/
	function (_Error) {
	  inheritsLoose(AnswersBaseError, _Error);

	  function AnswersBaseError(errorCode, message, boundary, causedBy) {
	    var _this;

	    if (boundary === void 0) {
	      boundary = 'unknown';
	    }

	    _this = _Error.call(this, message) || this;
	    _this.errorCode = errorCode;
	    _this.errorMessage = message;
	    _this.boundary = boundary;
	    _this.reported = false;

	    if (causedBy) {
	      _this.causedBy = causedBy instanceof AnswersBaseError ? causedBy : AnswersBaseError.from(causedBy);
	      _this.stack = _this.stack + "\nCaused By: " + _this.causedBy.stack;
	    }

	    return _this;
	  }

	  var _proto = AnswersBaseError.prototype;

	  _proto.toJson = function toJson() {
	    return stringify$2(this);
	  };

	  _proto.toString = function toString() {
	    var string = this.errorMessage + " (" + this.boundary + ")";

	    if (this.causedBy) {
	      string += "\n  Caused By: " + this.causedBy.toString();
	    }

	    return string;
	  };

	  AnswersBaseError.from = function from(builtinError, boundary) {
	    var error = new AnswersBasicError(builtinError.message, boundary);
	    error.stack = builtinError.stack;
	    return error;
	  };

	  return AnswersBaseError;
	}(wrapNativeSuper(Error));
	/**
	 * AnswersBasicError is a wrapper around all the built-in errors
	 * e.g. undefined variables, incorrect syntax, types, missing methods, etc.
	 * @extends AnswersBaseError
	 */

	var AnswersBasicError =
	/*#__PURE__*/
	function (_AnswersBaseError) {
	  inheritsLoose(AnswersBasicError, _AnswersBaseError);

	  function AnswersBasicError(message, boundary, causedBy) {
	    return _AnswersBaseError.call(this, 100, message, boundary, causedBy) || this;
	  }

	  return AnswersBasicError;
	}(AnswersBaseError);
	/**
	 * AnswersUiError used for things like DOM errors.
	 * @extends AnswersBaseError
	 */

	var AnswersConfigError =
	/*#__PURE__*/
	function (_AnswersBaseError2) {
	  inheritsLoose(AnswersConfigError, _AnswersBaseError2);

	  function AnswersConfigError(message, boundary, causedBy) {
	    return _AnswersBaseError2.call(this, 101, message, boundary, causedBy) || this;
	  }

	  return AnswersConfigError;
	}(AnswersBaseError);
	/**
	 * AnswersComponentError is used for Component oriented errors
	 * e.g. failure to render, or catching unknowns.
	 * @extends AnswersBaseError
	 */

	var AnswersComponentError =
	/*#__PURE__*/
	function (_AnswersBaseError4) {
	  inheritsLoose(AnswersComponentError, _AnswersBaseError4);

	  function AnswersComponentError(message, component, causedBy) {
	    return _AnswersBaseError4.call(this, 201, message, component, causedBy) || this;
	  }

	  return AnswersComponentError;
	}(AnswersBaseError);
	/**
	 * AnswersEndpointError represents all network related errors.
	 * @extends AnswersBaseError
	 */

	var AnswersEndpointError =
	/*#__PURE__*/
	function (_AnswersBaseError5) {
	  inheritsLoose(AnswersEndpointError, _AnswersBaseError5);

	  function AnswersEndpointError(message, boundary, causedBy) {
	    return _AnswersBaseError5.call(this, 300, message, boundary, causedBy) || this;
	  }

	  return AnswersEndpointError;
	}(AnswersBaseError);
	/**
	 * AnswersCoreError represents errors for precondition failures in the core library
	 * @extends AnswersBaseError
	 */

	var AnswersCoreError =
	/*#__PURE__*/
	function (_AnswersBaseError6) {
	  inheritsLoose(AnswersCoreError, _AnswersBaseError6);

	  function AnswersCoreError(message, boundary, causedBy) {
	    return _AnswersBaseError6.call(this, 400, message, boundary, causedBy) || this;
	  }

	  return AnswersCoreError;
	}(AnswersBaseError);
	/**
	 * AnswersStorageError represents storage related errors
	 * @extends AnswersBaseError
	 */

	var AnswersStorageError =
	/*#__PURE__*/
	function (_AnswersBaseError7) {
	  inheritsLoose(AnswersStorageError, _AnswersBaseError7);

	  function AnswersStorageError(message, storageKey, data, causedBy) {
	    var _this2;

	    _this2 = _AnswersBaseError7.call(this, 401, message, 'Storage', causedBy) || this;
	    _this2.storageKey = storageKey;
	    _this2.data = data;
	    return _this2;
	  }

	  return AnswersStorageError;
	}(AnswersBaseError);
	/**
	 * AnswersAnalyticsError is used for errors when reporting analytics
	 * @extends AnswersBaseError
	 */

	var AnswersAnalyticsError =
	/*#__PURE__*/
	function (_AnswersBaseError8) {
	  inheritsLoose(AnswersAnalyticsError, _AnswersBaseError8);

	  function AnswersAnalyticsError(message, event, causedBy) {
	    var _this3;

	    _this3 = _AnswersBaseError8.call(this, 402, message, 'Analytics', causedBy) || this;
	    _this3.event = event;
	    return _this3;
	  }

	  return AnswersAnalyticsError;
	}(AnswersBaseError);

	var ResultFactory =
	/*#__PURE__*/
	function () {
	  function ResultFactory() {}

	  /**
	   * Converts an API result object into a Result view model.
	   * Includes default mappings of GoogleCustomSearchEngine results to
	   * the fields exposed by the template.
	   * @param resultsData  {Array} expected format: { data: { ... }, highlightedFields: { ... }}
	   * @param {Object.<string, function>} formatters The formatters to apply to the result
	   * @param {string} verticalId The vertical of these results
	   * @param {string} source Backend source of these results
	   * @returns {Result[]}
	   */
	  ResultFactory.from = function from(resultsData, formatters, verticalId, source) {
	    var results = [];

	    for (var i = 0; i < resultsData.length; i++) {
	      var data = resultsData[i].data || resultsData[i];
	      var distance = resultsData[i].distance;
	      var distanceFromFilter = resultsData[i].distanceFromFilter;

	      switch (source) {
	        case 'GOOGLE_CSE':
	          results.push(ResultFactory.fromGoogleCustomSearchEngine(data));
	          break;

	        case 'BING_CSE':
	          results.push(ResultFactory.fromBingCustomSearchEngine(data));
	          break;

	        case 'ZENDESK':
	          results.push(ResultFactory.fromZendeskSearchEngine(data));
	          break;

	        case 'ALGOLIA':
	          results.push(ResultFactory.fromAlgoliaSearchEngine(data));
	          break;

	        case 'KNOWLEDGE_MANAGER':
	          var highlightedFields = resultsData[i].highlightedFields || {};
	          results.push(ResultFactory.fromKnowledgeManager(data, formatters, verticalId, highlightedFields, i, distance, distanceFromFilter));
	          break;

	        default:
	          results.push(ResultFactory.fromGeneric(data, i));
	      }
	    }

	    return results;
	  }
	  /**
	   * Applies field formatters to Knowledge Manager Entity Profile Data
	   *
	   * @param {Object} entityProfileData Entity Profile Data
	   * @param {Object} formatters Developer specified Field Formatters
	   * @param {string} verticalId Identifier for Vertical
	   * @param {Object} highlightedEntityProfileData Subset of Entity Profile Data with highlighting applied
	   * @returns {Object} Subset of Entity Profile Data Fields with field formatters applied
	   */
	  ;

	  ResultFactory.computeFormattedData = function computeFormattedData(entityProfileData, formatters, verticalId, highlightedEntityProfileData) {
	    var _context;

	    // if no field formatters specified, nothing to format
	    if (keys$5(formatters).length === 0) {
	      return {};
	    }

	    var formattedData = {};

	    forEach$4(_context = entries$2(entityProfileData)).call(_context, function (_ref) {
	      var fieldName = _ref[0],
	          fieldVal = _ref[1];

	      // check if a field formatter exists for the current entity profile field
	      if (formatters[fieldName] === undefined) {
	        return;
	      } // verify the field formatter provided is a formatter function as expected


	      if (typeof formatters[fieldName] !== 'function') {
	        throw new AnswersCoreError('Field formatter is not of expected type function', 'ResultFactory');
	      } // if highlighted version of field value is available, make it available to field formatter


	      var highlightedFieldVal = null;

	      if (highlightedEntityProfileData && highlightedEntityProfileData[fieldName]) {
	        highlightedFieldVal = highlightedEntityProfileData[fieldName];
	      } // call formatter function associated with the field name
	      // the input object defines the interface that field formatter functions work with


	      formattedData[fieldName] = formatters[fieldName]({
	        entityProfileData: entityProfileData,
	        entityFieldValue: fieldVal,
	        highlightedEntityFieldValue: highlightedFieldVal,
	        verticalId: verticalId,
	        isDirectAnswer: false
	      });
	    });

	    return formattedData;
	  }
	  /**
	   * Applies highlighting to substrings within Knowledge Manager Entity Field Values
	   * according to highlighting specifiers returned from the Knowledge Manager Search Backend
	   *
	   * @param {Object} entityProfileData Entity Profile Data
	   * @param {Object} highlightedFields KM specified highlighting instructions to highlight certain Fields
	   * @returns {Object} Subset of Entity Profile Data Fields with highlighting applied
	   */
	  ;

	  ResultFactory.computeHighlightedData = function computeHighlightedData(entityProfileData, highlightedFields) {
	    var _context2;

	    // if no highlighted fields specified, nothing to highlight
	    if (keys$5(highlightedFields).length === 0) {
	      return {};
	    }

	    var highlightedData = {}; // iterate through entity fields that have highlighting instructions

	    forEach$4(_context2 = entries$2(highlightedFields)).call(_context2, function (_ref2) {
	      var highlightedFieldName = _ref2[0];

	      // verify that the highlighted field name corresponds to an existing entity profile field
	      if (entityProfileData[highlightedFieldName] === undefined) {
	        throw new AnswersCoreError('Highlighted Field Name does not exist in Entity Profile', 'ResultFactory');
	      }

	      var highlightedField = highlightedFields[highlightedFieldName]; // check for nested fields

	      if (typeof highlightedField === 'object' && keys$5(highlightedField).length > 0 && highlightedField['matchedSubstrings'] === undefined) {
	        // recurse to children fields
	        highlightedData[highlightedFieldName] = ResultFactory.computeHighlightedData(entityProfileData[highlightedFieldName], highlightedFields[highlightedFieldName]);
	      } else {
	        var highlightedDataValue = new HighlightedValue(entityProfileData).buildHighlightedValue(highlightedField.value, highlightedField.matchedSubstrings);
	        highlightedData[highlightedFieldName] = highlightedDataValue;
	      }
	    });

	    return highlightedData;
	  }
	  /**
	   * Converts an API result object into a generic result view model.
	   * @param {Object} data
	   * @param {number} index
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromGeneric = function fromGeneric(data, index) {
	    return new Result({
	      raw: data,
	      title: data.name,
	      details: this.truncate(data.description),
	      link: data.website,
	      id: data.id,
	      ordinal: index + 1
	    });
	  }
	  /**
	   * Converts an API result object into a Knowledge Manager result view model.
	   * @param {Object} data
	   * @param {Object} formatters
	   * @param {string} verticalId
	   * @param {Object} highlightedFields
	   * @param {number} index
	   * @param {number} distance
	   * @param {number} distanceFromFilter
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromKnowledgeManager = function fromKnowledgeManager(data, formatters, verticalId, highlightedFields, index, distance, distanceFromFilter) {
	    // compute highlighted entity profile data
	    var highlightedEntityProfileData = ResultFactory.computeHighlightedData(data, highlightedFields); // compute formatted entity profile data

	    var formattedEntityProfileData = ResultFactory.computeFormattedData(data, formatters, verticalId, highlightedEntityProfileData); // set result details checking the following in order of priority : formatted, highlighted, raw

	    var resultDetails = null;

	    if (formattedEntityProfileData.description !== undefined) {
	      resultDetails = formattedEntityProfileData.description;
	    } else if (highlightedEntityProfileData.description !== undefined) {
	      resultDetails = this.truncate(highlightedEntityProfileData.description);
	    } else {
	      resultDetails = this.truncate(data.description);
	    }

	    return new Result({
	      raw: data,
	      formatted: formattedEntityProfileData,
	      highlighted: highlightedEntityProfileData,
	      title: formattedEntityProfileData.name || data.name,
	      details: resultDetails,
	      link: data.website,
	      id: data.id,
	      ordinal: index + 1,
	      distance: distance,
	      distanceFromFilter: distanceFromFilter
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Google Custom Search Engine object.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromGoogleCustomSearchEngine = function fromGoogleCustomSearchEngine(data) {
	    return new Result({
	      raw: data,
	      title: data.htmlTitle.replace(/(<([^>]+)>)/ig, ''),
	      details: data.htmlSnippet,
	      link: data.link
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Bing Custom Search Engine object.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromBingCustomSearchEngine = function fromBingCustomSearchEngine(data) {
	    return new Result({
	      raw: data,
	      title: data.name,
	      details: data.snippet,
	      link: data.url
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Zendesk Search Engine object.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromZendeskSearchEngine = function fromZendeskSearchEngine(data) {
	    return new Result({
	      raw: data,
	      title: data.title,
	      details: data.snippet,
	      link: data.html_url
	    });
	  }
	  /**
	   * Converts an API result object into a result view model.
	   * Maps view model fields based on the API data for a Algolia Search Engine object.
	   * Details field is set to objectID since response has only one general field objectID.
	   * @param {Object} data
	   * @returns {Result}
	   */
	  ;

	  ResultFactory.fromAlgoliaSearchEngine = function fromAlgoliaSearchEngine(data) {
	    return new Result({
	      raw: data,
	      details: data.objectID,
	      id: data.objectID
	    });
	  }
	  /**
	   * Truncates strings to 250 characters, attempting to preserve whole words
	   * @param str {string} the string to truncate
	   * @param limit {Number} the maximum character length to return
	   * @param trailing {string} a trailing string to denote truncation, e.g. '...'
	   * @param sep {string} the word separator
	   * @returns {string}
	   */
	  ;

	  ResultFactory.truncate = function truncate(str, limit, trailing, sep) {
	    if (limit === void 0) {
	      limit = 250;
	    }

	    if (trailing === void 0) {
	      trailing = '...';
	    }

	    if (sep === void 0) {
	      sep = ' ';
	    }

	    if (!str || str.length <= limit) {
	      return str;
	    } // TODO (bmcginnis): split punctuation too so we don't end up with "foo,..."


	    var words = str.split(sep);
	    var max = limit - trailing.length;
	    var truncated = '';

	    for (var i = 0; i < words.length; i++) {
	      var word = words[i];

	      if (truncated.length + word.length > max || i !== 0 && truncated.length + word.length + sep.length > max) {
	        truncated += trailing;
	        break;
	      }

	      truncated += i === 0 ? word : sep + word;
	    }

	    return truncated;
	  };

	  return ResultFactory;
	}();

	var Section =
	/*#__PURE__*/
	function () {
	  function Section(data, url, formatters) {
	    this.searchState = SearchStates.SEARCH_COMPLETE;
	    this.verticalConfigId = data.verticalConfigId || null;
	    this.resultsCount = data.resultsCount || 0;
	    this.encodedState = data.encodedState || '';
	    this.appliedQueryFilters = AppliedQueryFilter.from(data.appliedQueryFilters);
	    this.facets = data.facets || null;
	    this.results = ResultFactory.from(data.results, formatters, this.verticalConfigId, data.source);
	    this.map = Section.parseMap(data.results);
	    this.verticalURL = url || null;
	    this.resultsContext = data.resultsContext;
	  }

	  Section.parseMap = function parseMap(results) {
	    var mapMarkers = [];
	    var centerCoordinates = {};

	    for (var j = 0; j < results.length; j++) {
	      // TODO(billy) Remove legacy fallback from all data format
	      var result = results[j].data || results[j];

	      if (result && result.yextDisplayCoordinate) {
	        if (!centerCoordinates.latitude) {
	          centerCoordinates = {
	            latitude: result.yextDisplayCoordinate.latitude,
	            longitude: result.yextDisplayCoordinate.longitude
	          };
	        }

	        mapMarkers.push({
	          item: result,
	          label: mapMarkers.length + 1,
	          latitude: result.yextDisplayCoordinate.latitude,
	          longitude: result.yextDisplayCoordinate.longitude
	        });
	      }
	    }

	    return {
	      'mapCenter': centerCoordinates,
	      'mapMarkers': mapMarkers
	    };
	  }
	  /**
	   * Create a section from the provided data
	   * @param {Object|Array} modules The result modules
	   * @param {Object} urls The tab urls
	   * @param {Object.<string, function>} formatters Field formatters for results
	   */
	  ;

	  Section.from = function from(modules, urls, formatters) {
	    var sections = [];

	    if (!modules) {
	      return sections;
	    }

	    if (!isArray$3(modules)) {
	      return new Section(modules, null, formatters);
	    } // Our sections should contain a property of mapMarker objects


	    for (var i = 0; i < modules.length; i++) {
	      sections.push(new Section(modules[i], urls[modules[i].verticalConfigId], formatters));
	    }

	    return sections;
	  };

	  return Section;
	}();

	var AppliedQueryFilter =
	/*#__PURE__*/
	function () {
	  // Support legacy model and new model until fully migrated.
	  // TODO(billy) Remove the left expression during assignment when migrated.
	  // TODO(SPR-2394): convert this into a FilterNode here instead of in VerticalResults
	  function AppliedQueryFilter(appliedQueryFilter) {
	    this.key = appliedQueryFilter.key || appliedQueryFilter.displayKey;
	    this.value = appliedQueryFilter.value || appliedQueryFilter.displayValue;
	    this.filter = filter$4(appliedQueryFilter);
	    this.fieldId = keys$5(filter$4(appliedQueryFilter))[0];
	  }

	  AppliedQueryFilter.from = function from(appliedQueryFilters) {
	    var filters = [];

	    for (var i = 0; i < appliedQueryFilters.length; i++) {
	      filters.push(new AppliedQueryFilter(appliedQueryFilters[i]));
	    }

	    return filters;
	  };

	  return AppliedQueryFilter;
	}();

	/** @module UniversalResults */

	var UniversalResults =
	/*#__PURE__*/
	function () {
	  function UniversalResults(data) {
	    this.queryId = data.queryId || null;
	    this.sections = data.sections || [];
	    /**
	     * The current state of the search, used to render different templates before, during,
	     * and after loading
	     * @type {string}
	     */

	    this.searchState = data.searchState || SearchStates.SEARCH_COMPLETE;
	  }
	  /**
	   * Create universal results from server data
	   * @param {Object} response The server response
	   * @param {Object} urls The tab urls
	   * @param {Object.<string, function>} formatters The field formatters to use
	   */


	  UniversalResults.from = function from(response, urls, formatters) {
	    return new UniversalResults({
	      queryId: response.queryId,
	      sections: Section.from(response.modules, urls, formatters)
	    });
	  }
	  /**
	   * Construct a UnivervalResults object representing loading results
	   * @return {UniversalResults}
	   */
	  ;

	  UniversalResults.searchLoading = function searchLoading() {
	    return new UniversalResults({
	      searchState: SearchStates.SEARCH_LOADING
	    });
	  };

	  return UniversalResults;
	}();

	var onFreeze = internalMetadata.onFreeze;

	var nativeFreeze = Object.freeze;
	var FAILS_ON_PRIMITIVES$3 = fails(function () { nativeFreeze(1); });

	// `Object.freeze` method
	// https://tc39.github.io/ecma262/#sec-object.freeze
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$3, sham: !freezing }, {
	  freeze: function freeze(it) {
	    return nativeFreeze && isObject(it) ? nativeFreeze(onFreeze(it)) : it;
	  }
	});

	var freeze = path.Object.freeze;

	var freeze$1 = freeze;

	var freeze$2 = freeze$1;

	/** @module DirectAnswer */
	var DirectAnswer =
	/*#__PURE__*/
	function () {
	  function DirectAnswer(directAnswer) {
	    if (directAnswer === void 0) {
	      directAnswer = {};
	    }

	    _extends_1(this, directAnswer);

	    freeze$2(this);
	  }
	  /**
	   * Create a DirectAnswer model from the given server data and formatters
	   * @param {Object} response The server direct answer
	   * @param {Object.<string, function>} formatters The formatters to apply to this direct answer
	   */


	  DirectAnswer.from = function from(response, formatters) {
	    var data = objectSpread({}, response);

	    var answer = data.answer,
	        relatedItem = data.relatedItem;

	    if (answer && formatters[answer.fieldApiName]) {
	      answer.value = formatters[answer.fieldApiName](answer.value, relatedItem.data.fieldValues, relatedItem.verticalConfigId, true);
	    }

	    return new DirectAnswer(data);
	  };

	  return DirectAnswer;
	}();

	/** @module Navigation */
	var Navigation =
	/*#__PURE__*/
	function () {
	  function Navigation(tabOrder) {
	    this.tabOrder = tabOrder || [];

	    freeze$2(this);
	  }

	  Navigation.from = function from(modules) {
	    var nav = [];

	    if (!modules || !isArray$3(modules)) {
	      return nav;
	    }

	    for (var i = 0; i < modules.length; i++) {
	      nav.push(modules[i].verticalConfigId);
	    }

	    return new Navigation(nav);
	  };

	  return Navigation;
	}();

	var concat$3 = concat_1;

	var concat$4 = concat$3;

	var VerticalResults =
	/*#__PURE__*/
	function () {
	  function VerticalResults(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    _extends_1(this, {
	      searchState: SearchStates.SEARCH_COMPLETE
	    }, data);
	    /**
	     * The context of the results, used to provide more information about why
	     * these specific results were returned.
	     * @type {ResultsContext}
	     */


	    this.resultsContext = data.resultsContext;

	    freeze$2(this);
	  }
	  /**
	   * Append the provided results to the current results
	   * @param {VerticalResults} results the results to append to the current results
	   */


	  var _proto = VerticalResults.prototype;

	  _proto.append = function append(results) {
	    var _context, _context2;

	    if (results.resultsContext !== this.resultsContext) {
	      throw new AnswersCoreError('Cannot merge results with different contexts', 'VerticalResults');
	    }

	    var merged = objectSpread({}, this);

	    merged.resultsContext = this.resultsContext;
	    merged.results = concat$4(_context = this.results).call(_context, results.results);
	    map$2(merged).mapMarkers = concat$4(_context2 = map$2(this).mapMarkers).call(_context2, map$2(results).mapMarkers);
	    return new VerticalResults(merged);
	  }
	  /**
	   * Create vertical results from server data
	   * @param {Object} response The server response
	   * @param {Object.<string, function>} formatters The field formatters to use
	   * @param {string} verticalKey the vertical key
	   */
	  ;

	  VerticalResults.from = function from(response, formatters, verticalKey) {
	    var data = Section.from(response, null, formatters);
	    return new VerticalResults(objectSpread({}, data, {
	      verticalConfigId: verticalKey
	    }));
	  }
	  /**
	   * Construct a VerticalResults object representing loading results
	   * @return {VerticalResults}
	   */
	  ;

	  VerticalResults.searchLoading = function searchLoading() {
	    return new VerticalResults({
	      searchState: SearchStates.SEARCH_LOADING
	    });
	  };

	  VerticalResults.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  return VerticalResults;
	}();

	/** @module SpellCheck */

	/**
	 * SpellCheck is the core state model
	 * to power the SpellCheck component
	 */
	var SpellCheck =
	/*#__PURE__*/
	function () {
	  function SpellCheck(data) {
	    /**
	     * The original query
	     * @type {string}
	     */
	    this.query = data.query || null;
	    /**
	     * The corrected query
	     * @type {string}
	     */

	    this.correctedQuery = data.correctedQuery || null;
	    /**
	     * The spell check type
	     * @type {string}
	     */

	    this.type = data.type || null;
	    /**
	     * Should show spell check or not
	     * @type {boolean}
	     */

	    this.shouldShow = this.correctedQuery !== null;
	  }
	  /**
	   * Create a spell check model from the provided data
	   * @param {Object} response The spell check response
	   */


	  SpellCheck.from = function from(response) {
	    if (!response) {
	      return {};
	    }

	    return new SpellCheck({
	      query: response.originalQuery,
	      correctedQuery: response.correctedQuery,
	      type: response.type
	    });
	  };

	  return SpellCheck;
	}();

	/** @module StorageKeys */

	/**
	 * StorageKeys is an ENUM are considered the root context
	 * for how data is stored and scoped in the storage.
	 *
	 * @enum {string}
	 */
	var StorageKeys = {
	  NAVIGATION: 'navigation',
	  UNIVERSAL_RESULTS: 'universal-results',
	  VERTICAL_RESULTS: 'vertical-results',
	  ALTERNATIVE_VERTICALS: 'alternative-verticals',
	  AUTOCOMPLETE: 'autocomplete',
	  DIRECT_ANSWER: 'direct-answer',
	  FILTER: 'filter',
	  // DEPRECATED
	  STATIC_FILTER_NODE: 'static-filter-node',
	  QUERY: 'query',
	  QUERY_ID: 'query-id',
	  FACET_FILTER_NODE: 'facet-filter-node',
	  DYNAMIC_FILTERS: 'dynamic-filters',
	  PARAMS: 'params',
	  GEOLOCATION: 'geolocation',
	  INTENTS: 'intents',
	  QUESTION_SUBMISSION: 'question-submission',
	  SEARCH_CONFIG: 'search-config',
	  SEARCH_OFFSET: 'search-offset',
	  SPELL_CHECK: 'spell-check',
	  LOCATION_BIAS: 'location-bias',
	  SESSIONS_OPT_IN: 'sessions-opt-in',
	  VERTICAL_PAGES_CONFIG: 'vertical-pages-config',
	  LOCALE: 'locale',
	  SORT_BYS: 'sort-bys',
	  NO_RESULTS_CONFIG: 'no-results-config',
	  LOCATION_RADIUS: 'location-radius',
	  RESULTS_HEADER: 'results-header',
	  API_CONTEXT: 'context',
	  REFERRER_PAGE_URL: 'referrerPageUrl',
	  QUERY_TRIGGER: 'queryTrigger',
	  FACETS_LOADED: 'facets-loaded',
	  QUERY_SOURCE: 'query-source'
	};

	/** @module DynamicFilters */

	/**
	 * Model representing a set of dynamic filters
	 */
	var DynamicFilters =
	/*#__PURE__*/
	function () {
	  function DynamicFilters(data) {
	    /**
	     * The list of filters this model holds
	     * @type {{label: string, fieldId: string, options: object[]}}
	     */
	    this.filters = data.filters || [];
	    /**
	     * The {@link ResultsContext} of the facets.
	     * @type {ResultsContext}
	     */

	    this.resultsContext = data.resultsContext;

	    freeze$2(this);
	  }
	  /**
	   * Organize 'facets' from the api response into dynamic filters
	   * @param {Object} response dynamic filter response from the api
	   * @returns {DynamicFilters}
	   */


	  DynamicFilters.from = function from(response) {
	    var facets = response.facets || [];

	    var dynamicFilters = map$2(facets).call(facets, function (f) {
	      var _context;

	      return {
	        label: f['displayName'],
	        fieldId: f['fieldId'],
	        options: map$2(_context = f.options).call(_context, function (o) {
	          return {
	            label: o['displayName'],
	            countLabel: o['count'],
	            selected: o['selected'],
	            filter: filter$4(o)
	          };
	        })
	      };
	    });

	    return new DynamicFilters({
	      filters: dynamicFilters,
	      resultsContext: response.resultsContext
	    });
	  };

	  return DynamicFilters;
	}();

	/** @module SearchIntents */
	var SearchIntents =
	/*#__PURE__*/
	function () {
	  function SearchIntents(intents) {
	    /**
	     * The intent to find results based on the user's location
	     * @type {boolean}
	     */
	    this.nearMe = intents.nearMe;

	    freeze$2(this);
	  }
	  /**
	   * Create SearchIntents from server response
	   * @param {Object} response The server response intents
	   * @returns {SearchIntents}
	   */


	  SearchIntents.from = function from(response) {
	    var intents = response || [];
	    return new SearchIntents({
	      nearMe: includes$4(intents).call(intents, 'NEAR_ME')
	    });
	  };

	  return SearchIntents;
	}();

	/** @module LocationBias */

	/**
	 * LocationBias is the core state model
	 * to power the LocationBias component
	 */
	var LocationBias =
	/*#__PURE__*/
	function () {
	  function LocationBias(data) {
	    /**
	     * The location bias accuracy which are IP, DEVICE and UNKNWON
	     * @type {string}
	     */
	    this.accuracy = data.accuracy || null;
	    /**
	     * The latitude used for location bias
	     * @type {number}
	     */

	    this.latitude = data.latitude || null;
	    /**
	     * The longitude used for location bias
	     * @type {number}
	     */

	    this.longitude = data.longitude || null;
	    /**
	     * The location display name
	     * @type {string}
	     */

	    this.locationDisplayName = data.locationDisplayName || null;
	  }
	  /**
	   * Create a location bias model from the provided data
	   * @param {Object} response The location bias response
	   */


	  LocationBias.from = function from(response) {
	    if (!response) {
	      return new LocationBias({
	        accuracy: 'UNKNOWN'
	      });
	    }

	    return new LocationBias({
	      accuracy: response.accuracy,
	      latitude: response.latitude,
	      longitude: response.longitude,
	      locationDisplayName: response.locationDisplayName
	    });
	  };

	  return LocationBias;
	}();

	/** @module AlternativeVerticals */

	var AlternativeVerticals =
	/*#__PURE__*/
	function () {
	  function AlternativeVerticals(data) {
	    /**
	     * Alternative verticals that have results for the current query
	     * @type {Section}
	     */
	    this.alternativeVerticals = data || [];
	  }
	  /**
	   * Create alternative verticals from server data
	   * @param {Object} response The server response
	   * @param {Object.<string, function>} formatters The field formatters to use
	   */


	  AlternativeVerticals.from = function from(response, formatters) {
	    var alternativeVerticals = response.alternativeVerticals;

	    if (!alternativeVerticals || !alternativeVerticals.modules) {
	      return new AlternativeVerticals();
	    }

	    return new AlternativeVerticals(Section.from(alternativeVerticals.modules, {}, formatters));
	  };

	  return AlternativeVerticals;
	}();

	/** @module ResultsContext */

	/**
	 * ResultsContext is an ENUM that provides context
	 * for the results that we are storing from server
	 * data
	 * @enum {string}
	 */
	var ResultsContext = {
	  NORMAL: 'normal',
	  NO_RESULTS: 'no-results'
	};

	/**
	 * A Data Transformer that takes the response object from a Search request
	 * And transforms in to a front-end oriented data structure that our
	 * component library and core storage understand.
	 */

	var SearchDataTransformer =
	/*#__PURE__*/
	function () {
	  function SearchDataTransformer() {}

	  SearchDataTransformer.transform = function transform(data, urls, formatters) {
	    var _ref;

	    if (urls === void 0) {
	      urls = {};
	    }

	    var response = data.response;
	    return _ref = {}, _ref[StorageKeys.QUERY_ID] = response.queryId, _ref[StorageKeys.NAVIGATION] = Navigation.from(response.modules), _ref[StorageKeys.DIRECT_ANSWER] = DirectAnswer.from(response.directAnswer, formatters), _ref[StorageKeys.UNIVERSAL_RESULTS] = UniversalResults.from(response, urls, formatters), _ref[StorageKeys.INTENTS] = SearchIntents.from(response.searchIntents), _ref[StorageKeys.SPELL_CHECK] = SpellCheck.from(response.spellCheck), _ref[StorageKeys.LOCATION_BIAS] = LocationBias.from(response.locationBias), _ref;
	  };

	  SearchDataTransformer.transformVertical = function transformVertical(data, formatters, verticalKey) {
	    var _ref2;

	    var response = SearchDataTransformer._parseVerticalResponse(data.response);

	    return _ref2 = {}, _ref2[StorageKeys.QUERY_ID] = response.queryId, _ref2[StorageKeys.NAVIGATION] = new Navigation(), _ref2[StorageKeys.VERTICAL_RESULTS] = VerticalResults.from(response, formatters, verticalKey), _ref2[StorageKeys.DYNAMIC_FILTERS] = DynamicFilters.from(response), _ref2[StorageKeys.INTENTS] = SearchIntents.from(response.searchIntents), _ref2[StorageKeys.SPELL_CHECK] = SpellCheck.from(response.spellCheck), _ref2[StorageKeys.ALTERNATIVE_VERTICALS] = AlternativeVerticals.from(response, formatters), _ref2[StorageKeys.LOCATION_BIAS] = LocationBias.from(response.locationBias), _ref2;
	  }
	  /**
	   * Form response as if the results from `allResultsForVertical` were the actual
	   * results in `results`
	   * @param {Object} response The server response
	   */
	  ;

	  SearchDataTransformer._parseVerticalResponse = function _parseVerticalResponse(response) {
	    var hasResults = response.results && response.resultsCount > 0;
	    var resultsContext = hasResults ? ResultsContext.NORMAL : ResultsContext.NO_RESULTS;

	    if (resultsContext === ResultsContext.NO_RESULTS) {
	      var _ref3 = response.allResultsForVertical || {},
	          results = _ref3.results,
	          resultsCount = _ref3.resultsCount,
	          facets = _ref3.facets;

	      return objectSpread({}, response, {
	        results: results || [],
	        resultsCount: resultsCount || 0,
	        resultsContext: resultsContext,
	        facets: facets
	      });
	    }

	    return objectSpread({}, response, {
	      resultsContext: resultsContext
	    });
	  };

	  return SearchDataTransformer;
	}();

	/** @module QuestionSubmission */

	/**
	 * QuestionSubmission is the core state model
	 * to power the QuestionSubmission component
	 */
	var QuestionSubmission =
	/*#__PURE__*/
	function () {
	  function QuestionSubmission(question, errors) {
	    if (question === void 0) {
	      question = {};
	    }

	    /**
	     * The author of the question
	     * @type {string}
	     */
	    this.name = question.name || null;
	    /**
	     * The email address of the question
	     * @type {string}
	     */

	    this.email = question.email || null;
	    /**
	     * True if the privacy policy was approved
	     * @type {boolean}
	     */

	    this.privacyPolicy = question.privacyPolicy || null;
	    /**
	     * The question to be sent to the server
	     * @type {string}
	     */

	    this.questionText = question.questionText || null;
	    /**
	     * Alternative question meta information
	     * @type {string}
	     */

	    this.questionDescription = question.questionDescription || null;
	    /**
	     * Whether the form is expanded or not. Defaults to true.
	     */

	    this.questionExpanded = typeof question.expanded !== 'boolean' || question.expanded;
	    /**
	     * Contains any errors about the question submission
	     * @type {object}
	     */

	    this.errors = errors || null;
	    /**
	     * Whether the form has been submitted or not. Defaults to false.
	     */

	    this.questionSubmitted = question.submitted || false;

	    freeze$2(this);
	  }

	  QuestionSubmission.submitted = function submitted() {
	    return {
	      questionSubmitted: true,
	      questionExpanded: true
	    };
	  };

	  QuestionSubmission.errors = function errors(question, _errors) {
	    return QuestionSubmission(question, _errors);
	  };

	  return QuestionSubmission;
	}();

	/** @module QueryTriggers */

	/**
	 * QueryTriggers is an ENUM of the possible triggers for a
	 * query update.
	 *
	 * @enum {string}
	 */
	var QueryTriggers = {
	  INITIALIZE: 'initialize',
	  QUERY_PARAMETER: 'query-parameter'
	};

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};

	  var sourceKeys = keys$3(source);

	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (indexOf$3(excluded).call(excluded, key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

	/**
	 * Model for the analytics event type
	 */
	var AnalyticsEvent =
	/*#__PURE__*/
	function () {
	  function AnalyticsEvent(type, label) {
	    /**
	     * The type of event to report
	     * @type {string}
	     */
	    this.eventType = type.toUpperCase();
	    /**
	     * An optional label to be provided for the event
	     * @type {string}
	     */

	    if (label) {
	      this.label = label;
	    }
	  }
	  /**
	   * Adds the provided options to the event
	   * @param {object} options Additional options for the event
	   */


	  var _proto = AnalyticsEvent.prototype;

	  _proto.addOptions = function addOptions(options) {
	    _extends_1(this, options);

	    return this;
	  }
	  /**
	   * Return the event in the api format, typically for reporting to the api
	   */
	  ;

	  _proto.toApiEvent = function toApiEvent() {
	    return _extends_1({}, this);
	  }
	  /**
	   * Creating an analytics event from raw data.
	   * @param {Object} data
	   */
	  ;

	  AnalyticsEvent.fromData = function fromData(data) {
	    var type = data.type,
	        label = data.label,
	        eventOptions = objectWithoutPropertiesLoose(data, ["type", "label"]);

	    var analyticsEvent = new AnalyticsEvent(type, label);
	    analyticsEvent.addOptions(eventOptions);
	    return analyticsEvent;
	  };

	  return AnalyticsEvent;
	}();

	// `FlattenIntoArray` abstract operation
	// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
	var flattenIntoArray = function (target, original, source, sourceLen, start, depth, mapper, thisArg) {
	  var targetIndex = start;
	  var sourceIndex = 0;
	  var mapFn = mapper ? functionBindContext(mapper, thisArg, 3) : false;
	  var element;

	  while (sourceIndex < sourceLen) {
	    if (sourceIndex in source) {
	      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

	      if (depth > 0 && isArray(element)) {
	        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
	      } else {
	        if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
	        target[targetIndex] = element;
	      }

	      targetIndex++;
	    }
	    sourceIndex++;
	  }
	  return targetIndex;
	};

	var flattenIntoArray_1 = flattenIntoArray;

	// `Array.prototype.flatMap` method
	// https://github.com/tc39/proposal-flatMap
	_export({ target: 'Array', proto: true }, {
	  flatMap: function flatMap(callbackfn /* , thisArg */) {
	    var O = toObject(this);
	    var sourceLen = toLength(O.length);
	    var A;
	    aFunction(callbackfn);
	    A = arraySpeciesCreate(O, 0);
	    A.length = flattenIntoArray_1(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	    return A;
	  }
	});

	var flatMap = entryVirtual('Array').flatMap;

	var ArrayPrototype$a = Array.prototype;

	var flatMap_1 = function (it) {
	  var own = it.flatMap;
	  return it === ArrayPrototype$a || (it instanceof Array && own === ArrayPrototype$a.flatMap) ? flatMap : own;
	};

	var flatMap$1 = flatMap_1;

	var flatMap$2 = flatMap$1;

	/** @module FilterCombinators */

	/**
	 * FilterCombinators are enums for valid ways to combine {@link Filter}s.
	 */
	var FilterCombinators = {
	  AND: '$and',
	  OR: '$or'
	};

	var $every = arrayIteration.every;



	var STRICT_METHOD$4 = arrayMethodIsStrict('every');
	var USES_TO_LENGTH$7 = arrayMethodUsesToLength('every');

	// `Array.prototype.every` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.every
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$4 || !USES_TO_LENGTH$7 }, {
	  every: function every(callbackfn /* , thisArg */) {
	    return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var every = entryVirtual('Array').every;

	var ArrayPrototype$b = Array.prototype;

	var every_1 = function (it) {
	  var own = it.every;
	  return it === ArrayPrototype$b || (it instanceof Array && own === ArrayPrototype$b.every) ? every : own;
	};

	var every$1 = every_1;

	var every$2 = every$1;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var assertThisInitialized = _assertThisInitialized;

	/**
	 * Represents an api filter and provides static methods for easily constructing Filters.
	 * See https://developer.yext.com/docs/api-reference/#operation/listEntities for structure details
	 */

	var Filter =
	/*#__PURE__*/
	function () {
	  function Filter(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    _extends_1(this, data);

	    freeze$2(this);
	  }
	  /**
	   * A filter should have exactly ONE key. That key is EITHER the field name to filter by, or
	   * a special string such as $or or $and.
	   * @type {string}
	   */


	  var _proto = Filter.prototype;

	  _proto.getFilterKey = function getFilterKey() {
	    if (keys$5(this).length > 0) {
	      return keys$5(this)[0];
	    }
	  }
	  /**
	   * Create an empty filter
	   */
	  ;

	  Filter.empty = function empty() {
	    return new Filter();
	  }
	  /**
	   * Wrap filter data in a Filter class
	   * @param {Object} filter
	   */
	  ;

	  Filter.from = function from(filter) {
	    return new Filter(filter);
	  }
	  /**
	   * Parse a JSON format filter returned from the server into a Filter
	   * @param {*} responseFilter A filter in JSON format returned from the backend
	   * @returns {Filter}
	   */
	  ;

	  Filter.fromResponse = function fromResponse(responseFilter) {
	    return new Filter(JSON.parse(responseFilter));
	  }
	  /**
	   * Return a new Filter representing the OR of all provided filters
	   * @param  {...Filter} filters The filters to OR together
	   * @returns {Filter}
	   */
	  ;

	  Filter.or = function or() {
	    var _ref;

	    for (var _len = arguments.length, filters = new Array(_len), _key = 0; _key < _len; _key++) {
	      filters[_key] = arguments[_key];
	    }

	    return new Filter((_ref = {}, _ref[FilterCombinators.OR] = filters, _ref));
	  }
	  /**
	   * Return a new Filter representing the AND of all provided filters
	   * @param  {...Filter} filters The filters to AND together
	   * @returns {Filter}
	   */
	  ;

	  Filter.and = function and() {
	    var _ref2;

	    for (var _len2 = arguments.length, filters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      filters[_key2] = arguments[_key2];
	    }

	    return new Filter((_ref2 = {}, _ref2[FilterCombinators.AND] = filters, _ref2));
	  }
	  /**
	   * Helper method for creating a range filter
	   * @param {string} field field id of the filter
	   * @param {number|string} min minimum value
	   * @param {number|string} max maximum value
	   * @param {boolean} isExclusive whether this is an inclusive or exclusive range
	   * @returns {Filter}
	   */
	  ;

	  Filter.range = function range(field, min, max, isExclusive) {
	    var falsyMin = min === null || min === undefined || min === '';
	    var falsyMax = max === null || max === undefined || max === '';

	    if (falsyMin && falsyMax) {
	      return Filter.empty();
	    } else if (falsyMax) {
	      return isExclusive ? Filter.greaterThan(field, min) : Filter.greaterThanEqual(field, min);
	    } else if (falsyMin) {
	      return isExclusive ? Filter.lessThan(field, max) : Filter.lessThanEqual(field, max);
	    } else if (min === max) {
	      return isExclusive ? Filter.empty() : Filter.equal(field, min);
	    }

	    return isExclusive ? Filter.exclusiveRange(field, min, max) : Filter.inclusiveRange(field, min, max);
	  }
	  /**
	   * Create a new "equal to" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be equal to
	   * @returns {Filter}
	   */
	  ;

	  Filter.equal = function equal(field, value) {
	    return Filter._fromMatcher(field, '$eq', value);
	  }
	  /**
	   * Create a new "less than" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be less than
	   * @returns {Filter}
	   */
	  ;

	  Filter.lessThan = function lessThan(field, value) {
	    return Filter._fromMatcher(field, '$lt', value);
	  }
	  /**
	   * Create a new "less than or equal to" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be less than or equal to
	   * @returns {Filter}
	   */
	  ;

	  Filter.lessThanEqual = function lessThanEqual(field, value) {
	    return Filter._fromMatcher(field, '$le', value);
	  }
	  /**
	   * Create a new "greater than" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be greater than
	   * @returns {Filter}
	   */
	  ;

	  Filter.greaterThan = function greaterThan(field, value) {
	    return Filter._fromMatcher(field, '$gt', value);
	  }
	  /**
	   * Create a new "greater than or equal to" filter for a field
	   * @param {string} field The subject field of the filter
	   * @param {*} value The value the field should be greater than or equal to
	   * @returns {Filter}
	   */
	  ;

	  Filter.greaterThanEqual = function greaterThanEqual(field, value) {
	    return Filter._fromMatcher(field, '$ge', value);
	  }
	  /**
	   * Create a new inclusive range filter
	   * @param {string} field The subject field of the filter
	   * @param {*} min The minimum value
	   * @param {*} max The maximum value
	   * @returns {Filter}
	   */
	  ;

	  Filter.inclusiveRange = function inclusiveRange(field, min, max) {
	    var _ref3;

	    return new Filter((_ref3 = {}, _ref3[field] = {
	      '$ge': min,
	      '$le': max
	    }, _ref3));
	  }
	  /**
	   * Create a new exclusive range filter
	   * @param {string} field The subject field of the filter
	   * @param {*} min The minimum value
	   * @param {*} max The maximum value
	   * @returns {Filter}
	   */
	  ;

	  Filter.exclusiveRange = function exclusiveRange(field, min, max) {
	    var _ref4;

	    return new Filter((_ref4 = {}, _ref4[field] = {
	      '$gt': min,
	      '$lt': max
	    }, _ref4));
	  }
	  /**
	   * Create a new position filter
	   * @param {number} lat The latitude of the position
	   * @param {number} lng The longitude of the position
	   * @param {number} radius The search radius (in meters)
	   */
	  ;

	  Filter.position = function position(lat, lng, radius) {
	    return Filter._fromMatcher('builtin.location', '$near', {
	      lat: lat,
	      lng: lng,
	      radius: radius
	    });
	  }
	  /**
	   * Create a new filter with the given matcher
	   * @private
	   * @param {string} field The subject field of the filter
	   * @param {string} matcher The matcher for the filer
	   * @param {*} value The value for the filter
	   * @returns {Filter}
	   */
	  ;

	  Filter._fromMatcher = function _fromMatcher(field, matcher, value) {
	    var _field, _ref5;

	    return new Filter((_ref5 = {}, _ref5[field] = (_field = {}, _field[matcher] = value, _field), _ref5));
	  };

	  return Filter;
	}();

	/** @module FilterTypes */

	/**
	 * FilterType is an ENUM for the different types of filters in the SDK.
	 * @enum {string}
	 */
	var FilterType = {
	  STATIC: 'filter-type-static',
	  FACET: 'filter-type-facet',
	  RADIUS: 'filter-type-radius',
	  NLP: 'filter-type-nlp'
	};

	/**
	 * FilterMetadata is a container for additional display data for a {@link Filter}.
	 */

	var FilterMetadata = function FilterMetadata(metadata) {
	  if (metadata === void 0) {
	    metadata = {};
	  }

	  var _metadata = metadata,
	      fieldName = _metadata.fieldName,
	      displayValue = _metadata.displayValue,
	      filterType = _metadata.filterType;
	  /**
	   * The display name for the field being filtered on.
	   * @type {string}
	   */

	  this.fieldName = fieldName;
	  /**
	   * The display value for the values being filtered on.
	   * Even if there are multiple values within the data of a filter,
	   * there should only be one display value for the whole filter.
	   * @type {string}
	   */

	  this.displayValue = displayValue;
	  /**
	   * What type of filter this is.
	   * @type {FilterType}
	   */

	  this.filterType = filterType || FilterType.STATIC;

	  freeze$2(this);
	};

	/** @module FilterNode */

	/**
	 * A FilterNode represents a single node in a filter tree.
	 * Each filter node has an associated filter, containing the filter
	 * data to send in a request, any additional filter metadata for display,
	 * and any children nodes.
	 *
	 * Implemented by {@link SimpleFilterNode} and {@link CombinedFilterNode}.
	 */
	var FilterNode =
	/*#__PURE__*/
	function () {
	  function FilterNode() {}

	  var _proto = FilterNode.prototype;

	  /**
	   * Returns this node's filter.
	   * @returns {Filter}
	   */
	  _proto.getFilter = function getFilter() {}
	  /**
	   * Returns the metadata for this node's filter.
	   * @returns {FilterMetadata}
	   */
	  ;

	  _proto.getMetadata = function getMetadata() {}
	  /**
	   * Returns the children of this node.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getChildren = function getChildren() {}
	  /**
	   * Recursively get all of the leaf SimpleFilterNodes.
	   * @returns {Array<SimpleFilterNode>}
	   */
	  ;

	  _proto.getSimpleDescendants = function getSimpleDescendants() {}
	  /**
	   * Remove this FilterNode from the FilterRegistry.
	   */
	  ;

	  _proto.remove = function remove() {};

	  return FilterNode;
	}();

	/**
	 * A SimpleFilterNode represents a single, atomic filter.
	 * An atomic filter is a filter that filters by a single value on a single field id,
	 * and does not contain any children filters.
	 */

	var SimpleFilterNode =
	/*#__PURE__*/
	function (_FilterNode) {
	  inheritsLoose(SimpleFilterNode, _FilterNode);

	  function SimpleFilterNode(filterNode) {
	    var _this;

	    if (filterNode === void 0) {
	      filterNode = {};
	    }

	    _this = _FilterNode.call(this) || this;

	    var _filterNode = filterNode,
	        filter = filter$4(_filterNode),
	        metadata = _filterNode.metadata,
	        remove = _filterNode.remove;
	    /**
	     * The filter data.
	     * @type {Filter}
	     */


	    _this.filter = Filter.from(filter);
	    /**
	     * Display metadata associated with the filter data.
	     * @type {FilterMetadata}
	     */

	    _this.metadata = new FilterMetadata(metadata);
	    /**
	     * Remove callback function.
	     * @type {Function}
	     */

	    _this._remove = remove || function () {};

	    freeze$2(assertThisInitialized(_this));

	    return _this;
	  }
	  /**
	   * Returns the filter associated with this node.
	   * @type {Filter}
	   */


	  var _proto = SimpleFilterNode.prototype;

	  _proto.getFilter = function getFilter() {
	    return filter$4(this);
	  }
	  /**
	   * Returns the children associated with this node (no children).
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getChildren = function getChildren() {
	    return [];
	  }
	  /**
	   * Returns the filter metadata for this node's filter.
	   * @returns {FilterMetadata}
	   */
	  ;

	  _proto.getMetadata = function getMetadata() {
	    return this.metadata;
	  }
	  /**
	   * Recursively get all of the leaf SimpleFilterNodes.
	   * Since SimpleFilterNodes have no children this just returns itself.
	   * @returns {Array<SimpleFilterNode>}
	   */
	  ;

	  _proto.getSimpleDescendants = function getSimpleDescendants() {
	    return this;
	  }
	  /**
	   * Removes this filter node from the FilterRegistry.
	   */
	  ;

	  _proto.remove = function remove() {
	    this._remove();
	  }
	  /**
	   * Returns whether this SimpleFilterNode's filter is equal to another SimpleFilterNode's
	   * @param {SimpleFilterNode} node
	   * @returns {boolean}
	   */
	  ;

	  _proto.hasSameFilterAs = function hasSameFilterAs(otherNode) {
	    var thisFilter = this.getFilter();
	    var otherFilter = otherNode.getFilter();
	    var thisFieldId = thisFilter.getFilterKey();
	    var otherFieldId = otherFilter.getFilterKey();

	    if (thisFieldId !== otherFieldId) {
	      return false;
	    }

	    var thisMatchersToValues = thisFilter[thisFieldId];
	    var otherMatchersToValues = otherFilter[otherFieldId];

	    var thisMatchers = keys$5(thisMatchersToValues);

	    var otherMatchers = keys$5(otherMatchersToValues);

	    if (thisMatchers.length !== otherMatchers.length) {
	      return false;
	    }

	    return every$2(thisMatchers).call(thisMatchers, function (m) {
	      return otherMatchersToValues.hasOwnProperty(m) && otherMatchersToValues[m] === thisMatchersToValues[m];
	    });
	  };

	  return SimpleFilterNode;
	}(FilterNode);

	/**
	 * A CombinedFilterNode represents a combined filter.
	 * A combined filter is a set of filters combined with a {@link FilterCombinators}
	 * ($and or $or). Since a combined filter is just a set of other filters,
	 * it does not have its own {@link FilterMetadata}, and its filter is dervied from
	 * its children.
	 */

	var CombinedFilterNode =
	/*#__PURE__*/
	function (_FilterNode) {
	  inheritsLoose(CombinedFilterNode, _FilterNode);

	  function CombinedFilterNode(filterNode) {
	    var _this;

	    if (filterNode === void 0) {
	      filterNode = {};
	    }

	    _this = _FilterNode.call(this) || this;
	    var _filterNode = filterNode,
	        combinator = _filterNode.combinator,
	        children = _filterNode.children;
	    /**
	     * @type {string}
	     */

	    _this.combinator = combinator;
	    /**
	     * @type {Array<FilterNode>}
	     */

	    _this.children = children || [];

	    freeze$2(assertThisInitialized(_this));

	    return _this;
	  }
	  /**
	   * Returns the filter created by combining this node's children.
	   * @type {Filter}
	   */


	  var _proto = CombinedFilterNode.prototype;

	  _proto.getFilter = function getFilter() {
	    var _context;

	    var filters = map$2(_context = this.children).call(_context, function (childNode) {
	      return childNode.getFilter();
	    });

	    switch (this.combinator) {
	      case FilterCombinators.AND:
	        return Filter.and.apply(Filter, filters);

	      case FilterCombinators.OR:
	        return Filter.or.apply(Filter, filters);
	    }

	    return Filter.empty();
	  }
	  /**
	   * Returns the metadata associated with this node's filter.
	   * Because a combined filter's purpose is solely to join together other filters,
	   * and does not have its own filter, this value is always null.
	   * @returns {null}
	   */
	  ;

	  _proto.getMetadata = function getMetadata() {
	    return null;
	  }
	  /**
	   * Returns this node's children.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getChildren = function getChildren() {
	    return this.children;
	  }
	  /**
	   * Recursively get all of the leaf SimpleFilterNodes.
	   * @returns {Array<SimpleFilterNode>}
	   */
	  ;

	  _proto.getSimpleDescendants = function getSimpleDescendants() {
	    var _context2;

	    return flatMap$2(_context2 = this.getChildren()).call(_context2, function (fn) {
	      return fn.getSimpleDescendants();
	    });
	  }
	  /**
	   * Removes this filter node from the FilterRegistry by calling remove on each of its
	   * child FilterNodes.
	   */
	  ;

	  _proto.remove = function remove() {
	    var _context3;

	    forEach$4(_context3 = this.children).call(_context3, function (child) {
	      child.remove();
	    });
	  };

	  return CombinedFilterNode;
	}(FilterNode);

	/**
	 * FilterNodeFactory is a class containing static helper methods for
	 * generating FilterNodes.
	 */

	var FilterNodeFactory =
	/*#__PURE__*/
	function () {
	  function FilterNodeFactory() {}

	  /**
	   * Create an AND filter node, with specified children.
	   * @param  {...FilterNode} childrenNodes
	   * @returns {FilterNode}
	   */
	  FilterNodeFactory.and = function and() {
	    for (var _len = arguments.length, childrenNodes = new Array(_len), _key = 0; _key < _len; _key++) {
	      childrenNodes[_key] = arguments[_key];
	    }

	    return FilterNodeFactory._combine(FilterCombinators.AND, childrenNodes);
	  }
	  /**
	   * Create an OR filter node, with specified children.
	   * @param  {...FilterNode} childrenNodes
	   * @returns {FilterNode}
	   */
	  ;

	  FilterNodeFactory.or = function or() {
	    for (var _len2 = arguments.length, childrenNodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      childrenNodes[_key2] = arguments[_key2];
	    }

	    return FilterNodeFactory._combine(FilterCombinators.OR, childrenNodes);
	  }
	  /**
	   * Creates a combined filter node with the given combinator and children.
	   * @param {string} combinator
	   * @param {Array<FilterNode>} filterNodes
	   * @returns {FilterNode}
	   * @private
	   */
	  ;

	  FilterNodeFactory._combine = function _combine(combinator, filterNodes) {
	    var children = filter$4(filterNodes).call(filterNodes, function (fn) {
	      return fn.getFilter().getFilterKey();
	    });

	    if (!children.length) {
	      return new SimpleFilterNode();
	    }

	    if (children.length === 1) {
	      return children[0];
	    }

	    return new CombinedFilterNode({
	      combinator: combinator,
	      children: children
	    });
	  }
	  /**
	   * Creates a filterNode from the given data.
	   * @param {Object|FilterNode} filterNode
	   * @returns {FilterNode}
	   */
	  ;

	  FilterNodeFactory.from = function from(filterNode) {
	    if (filterNode === void 0) {
	      filterNode = {};
	    }

	    if (filterNode.children && filterNode.children.length) {
	      return new CombinedFilterNode(filterNode);
	    }

	    return new SimpleFilterNode(filterNode);
	  };

	  return FilterNodeFactory;
	}();

	/** @module Facet */

	/**
	 * Model representing a facet filter with the format of
	 * {
	 *   "field_name": [ Filters... ],
	 *   ...
	 * }
	 *
	 * @see {@link Filter}
	 */
	var Facet =
	/*#__PURE__*/
	function () {
	  function Facet(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    _extends_1(this, data);

	    freeze$2(this);
	  }
	  /**
	   * Create a facet filter from a list of Filters
	   * @param {Array<string>} availableFieldIds array of expected field ids
	   * @param  {...Filter} filters The filters to use in this facet
	   * @returns {Facet}
	   */


	  Facet.fromFilters = function fromFilters(availableFieldIds) {
	    var groups = {};

	    forEach$4(availableFieldIds).call(availableFieldIds, function (fieldId) {
	      groups[fieldId] = [];
	    });

	    for (var _len = arguments.length, filters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      filters[_key - 1] = arguments[_key];
	    }

	    var flatFilters = flatMap$2(filters).call(filters, function (f) {
	      return f.$or || f;
	    });

	    forEach$4(flatFilters).call(flatFilters, function (f) {
	      var key = f.getFilterKey();

	      if (!groups[key]) {
	        groups[key] = [];
	      }

	      groups[key].push(f);
	    });

	    return new Facet(groups);
	  };

	  return Facet;
	}();

	/**
	 * FilterRegistry is a structure that manages static {@link Filter}s and {@link Facet} filters.
	 *
	 * Static filters and facet filters are stored within global storage using FilterNodes.
	 */

	var FilterRegistry =
	/*#__PURE__*/
	function () {
	  function FilterRegistry(globalStorage, availableFieldIds) {
	    if (availableFieldIds === void 0) {
	      availableFieldIds = [];
	    }

	    /**
	     * FilterRegistry uses {@link GlobalStorage} for storing FilterNodes.
	     * Each node is given a unique key in global storage.
	     */
	    this.globalStorage = globalStorage;
	    /**
	     * All available field ids for the current facet filters, including
	     * field ids for unused but available filters.
	     * @type {Array<string>}
	     */

	    this.availableFieldIds = availableFieldIds;
	  }
	  /**
	   * Returns an array containing all of the filternodes stored in global storage.
	   * @returns {Array<FilterNode>}
	   */


	  var _proto = FilterRegistry.prototype;

	  _proto.getAllFilterNodes = function getAllFilterNodes() {
	    var _context;

	    var globalStorageFilterNodes = concat$4(_context = []).call(_context, this.getStaticFilterNodes(), this.getFacetFilterNodes());

	    var locationRadiusFilterNode = this.getFilterNodeByKey(StorageKeys.LOCATION_RADIUS);

	    if (locationRadiusFilterNode) {
	      globalStorageFilterNodes.push(locationRadiusFilterNode);
	    }

	    return globalStorageFilterNodes;
	  }
	  /**
	   * Get all of the {@link FilterNode}s for static filters.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getStaticFilterNodes = function getStaticFilterNodes() {
	    return this.globalStorage.getAll(StorageKeys.STATIC_FILTER_NODE);
	  }
	  /**
	   * Get all of the active {@link FilterNode}s for facets.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getFacetFilterNodes = function getFacetFilterNodes() {
	    return this.globalStorage.getState(StorageKeys.FACET_FILTER_NODE) || [];
	  }
	  /**
	   * Gets the filter string to send in a search query.
	   * TODO: move payload method logic into core.js, since it is only used there.
	   * @returns {string}
	   */
	  ;

	  _proto.getStaticFilterPayload = function getStaticFilterPayload() {
	    return stringify$2(this._getStaticFilterPayload());
	  };

	  _proto._getStaticFilterPayload = function _getStaticFilterPayload() {
	    var filterNodes = this.getStaticFilterNodes();
	    var totalNode = FilterNodeFactory.and.apply(FilterNodeFactory, filterNodes);
	    return totalNode.getFilter();
	  }
	  /**
	   * Gets the facet filter string to send in a search query.
	   * @returns {string}
	   */
	  ;

	  _proto.getFacetFilterPayload = function getFacetFilterPayload() {
	    return stringify$2(this._getFacetFilterPayload());
	  };

	  _proto._getFacetFilterPayload = function _getFacetFilterPayload() {
	    var _context3, _context4;

	    var getFilters = function getFilters(fn) {
	      var _context2;

	      return fn.getChildren().length ? flatMap$2(_context2 = fn.getChildren()).call(_context2, getFilters) : fn.getFilter();
	    };

	    var filters = flatMap$2(_context3 = this.getFacetFilterNodes()).call(_context3, getFilters);

	    return Facet.fromFilters.apply(Facet, concat$4(_context4 = [this.availableFieldIds]).call(_context4, filters));
	  }
	  /**
	   * Get the FilterNode with the corresponding key. Defaults to null.
	   * @param {string} key
	   */
	  ;

	  _proto.getFilterNodeByKey = function getFilterNodeByKey(key) {
	    return this.globalStorage.getState(key);
	  }
	  /**
	   * Sets the specified {@link FilterNode} under the given key.
	   * Will replace a preexisting node if there is one.
	   * @param {string} key
	   * @param {FilterNode} filterNode
	   */
	  ;

	  _proto.setStaticFilterNodes = function setStaticFilterNodes(key, filterNode) {
	    this.globalStorage.set(StorageKeys.STATIC_FILTER_NODE + "." + key, filterNode);
	  }
	  /**
	   * Sets the filter nodes used for the current facet filters.
	   *
	   * Because the search response only sends back one
	   * set of facet filters, there can only be one active facet filter node
	   * at a time.
	   * @param {Array<string>} availableFieldIds
	   * @param {Array<FilterNode>} filterNodes
	   */
	  ;

	  _proto.setFacetFilterNodes = function setFacetFilterNodes(availableFieldIds, filterNodes) {
	    if (availableFieldIds === void 0) {
	      availableFieldIds = [];
	    }

	    if (filterNodes === void 0) {
	      filterNodes = [];
	    }

	    this.availableFieldIds = availableFieldIds;
	    this.globalStorage.set(StorageKeys.FACET_FILTER_NODE, filterNodes);
	  }
	  /**
	   * Sets the locationRadius filterNode. There may only be one locationRadius active
	   * at a time.
	   * @param {FilterNode} filterNode
	   */
	  ;

	  _proto.setLocationRadiusFilterNode = function setLocationRadiusFilterNode(filterNode) {
	    this.globalStorage.set(StorageKeys.LOCATION_RADIUS, filterNode);
	  }
	  /**
	   * Remove the static FilterNode with this namespace.
	   * @param {string} key
	   */
	  ;

	  _proto.clearStaticFilterNode = function clearStaticFilterNode(key) {
	    this.globalStorage["delete"](StorageKeys.STATIC_FILTER_NODE + "." + key);
	  }
	  /**
	   * Remove all facet FilterNodes.
	   */
	  ;

	  _proto.clearFacetFilterNodes = function clearFacetFilterNodes() {
	    this.globalStorage["delete"](StorageKeys.FACET_FILTER_NODE);
	  };

	  return FilterRegistry;
	}();

	/** @typedef {import('./services/searchservice').default} SearchService */

	/** @typedef {import('./services/autocompleteservice').default} AutoCompleteService */

	/** @typedef {import('./services/questionanswerservice').default} QuestionAnswerService */

	/**
	 * Core is the main application container for all of the network and storage
	 * related behaviors of the application.
	 */

	var Core =
	/*#__PURE__*/
	function () {
	  function Core(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * A reference to the client API Key used for all requests
	     * @type {string}
	     * @private
	     */
	    this._apiKey = config.apiKey;
	    /**
	     * A reference to the client Answers Key used for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceKey = config.experienceKey;
	    /**
	     * The answers config version to use for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceVersion = config.experienceVersion;
	    /**
	     * A reference to the client locale used for all requests. If not specified, defaults to "en" (for
	     * backwards compatibility).
	     * @type {string}
	     * @private
	     */

	    this._locale = config.locale;
	    /**
	     * A map of field formatters used to format results, if present
	     * @type {Object.<string, function>}
	     * @private
	     */

	    this._fieldFormatters = config.fieldFormatters || {};
	    /**
	     * A reference to the core data storage that powers the UI
	     * @type {GlobalStorage}
	     * @private
	     */

	    this.globalStorage = config.globalStorage;
	    /**
	     * A reference to the core persistent storage
	     * @type {PersistentStorage}
	     * @private
	     */

	    this.persistentStorage = config.persistentStorage;
	    /**
	     * The filterRegistry is in charge of setting, removing, and retrieving filters
	     * and facet filters from global storage.
	     * @type {FilterRegistry}
	     */

	    this.filterRegistry = new FilterRegistry(this.globalStorage);
	    /**
	     * An abstraction containing the integration with the RESTful search API
	     * For both vertical and universal search
	     * @type {SearchService}
	     * @private
	     */

	    this._searcher = config.searchService;
	    /**
	     * An abstraction containing the integration with the RESTful autocomplete API
	     * For filter search, vertical autocomplete, and universal autocomplete
	     * @type {AutoCompleteService}
	     * @private
	     */

	    this._autoComplete = config.autoCompleteService;
	    /**
	     * An abstraction for interacting with the Q&A rest interface
	     * @type {QuestionAnswerService}
	     * @private
	     */

	    this._questionAnswer = config.questionAnswerService;
	    /**
	     * A local reference to the analytics reporter, used to report events for this component
	     * @type {AnalyticsReporter}
	     */

	    this._analyticsReporter = config.analyticsReporter;
	    /**
	     * A user-given function that returns an analytics event to fire after a universal search.
	     * @type {Function}
	     */

	    this.onUniversalSearch = config.onUniversalSearch || function () {};
	    /**
	     * A user-given function that returns an analytics event to fire after a vertical search.
	     * @type {Function}
	     */


	    this.onVerticalSearch = config.onVerticalSearch || function () {};
	  }
	  /**
	   * Search in the context of a vertical
	   * @param {string} verticalKey vertical ID for the search
	   * @param {Object} options additional settings for the search.
	   * @param {Object} query The query details
	   * @param {string} query.input The input to search for
	   * @param {string} query.id The query ID to use. If paging within a query, the same ID should be used
	   * @param {boolean} query.append If true, adds the results of this query to the end of the current results, defaults false
	   */


	  var _proto = Core.prototype;

	  _proto.verticalSearch = function verticalSearch(verticalKey, options, query) {
	    var _this = this;

	    if (options === void 0) {
	      options = {};
	    }

	    if (query === void 0) {
	      query = {};
	    }

	    window.performance.mark('yext.answers.verticalQueryStart');

	    if (!query.append) {
	      this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, VerticalResults.searchLoading());
	      this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
	      this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
	    }

	    var _options = options,
	        resetPagination = _options.resetPagination,
	        useFacets = _options.useFacets;

	    if (resetPagination) {
	      this.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
	      this.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    }

	    if (!useFacets) {
	      this.filterRegistry.setFacetFilterNodes([], []);
	    }

	    var _options2 = options,
	        setQueryParams = _options2.setQueryParams;
	    var context = this.globalStorage.getState(StorageKeys.API_CONTEXT);
	    var referrerPageUrl = this.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);
	    var defaultQueryInput = this.globalStorage.getState(StorageKeys.QUERY) || '';

	    var parsedQuery = _extends_1({}, {
	      input: defaultQueryInput
	    }, query);

	    if (setQueryParams) {
	      if (context) {
	        this.persistentStorage.set(StorageKeys.API_CONTEXT, context, true);
	      }

	      if (referrerPageUrl !== null) {
	        this.persistentStorage.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl, true);
	      }
	    }

	    var searchConfig = this.globalStorage.getState(StorageKeys.SEARCH_CONFIG) || {};

	    if (!searchConfig.verticalKey) {
	      this.globalStorage.set(StorageKeys.SEARCH_CONFIG, objectSpread({}, searchConfig, {
	        verticalKey: verticalKey
	      }));
	    }

	    var locationRadiusFilterNode = this.getLocationRadiusFilterNode();
	    var queryTrigger = this.getQueryTriggerForSearchApi(this.globalStorage.getState(StorageKeys.QUERY_TRIGGER));
	    return this._searcher.verticalSearch(verticalKey, objectSpread({
	      limit: this.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit,
	      geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION)
	    }, parsedQuery, {
	      filter: this.filterRegistry.getStaticFilterPayload(),
	      facetFilter: this.filterRegistry.getFacetFilterPayload(),
	      offset: this.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0,
	      isDynamicFiltersEnabled: this._isDynamicFiltersEnabled,
	      skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
	      queryTrigger: queryTrigger,
	      sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN).value,
	      sortBys: this.globalStorage.getState(StorageKeys.SORT_BYS),
	      locationRadius: locationRadiusFilterNode ? locationRadiusFilterNode.getFilter().value : null,
	      context: context,
	      referrerPageUrl: referrerPageUrl,
	      querySource: this.globalStorage.getState(StorageKeys.QUERY_SOURCE)
	    })).then(function (response) {
	      return SearchDataTransformer.transformVertical(response, _this._fieldFormatters, verticalKey);
	    }).then(function (data) {
	      _this.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

	      _this.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

	      _this.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

	      _this.globalStorage.set(StorageKeys.ALTERNATIVE_VERTICALS, data[StorageKeys.ALTERNATIVE_VERTICALS]);

	      if (query.append) {
	        var mergedResults = _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).append(data[StorageKeys.VERTICAL_RESULTS]);

	        _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, mergedResults);
	      } else {
	        _this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, data[StorageKeys.VERTICAL_RESULTS]);
	      }

	      if (data[StorageKeys.DYNAMIC_FILTERS]) {
	        _this.globalStorage.set(StorageKeys.DYNAMIC_FILTERS, data[StorageKeys.DYNAMIC_FILTERS]);

	        _this.globalStorage.set(StorageKeys.RESULTS_HEADER, data[StorageKeys.DYNAMIC_FILTERS]);
	      }

	      if (data[StorageKeys.SPELL_CHECK]) {
	        _this.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);
	      }

	      if (data[StorageKeys.LOCATION_BIAS]) {
	        _this.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);
	      }

	      _this.globalStorage["delete"]('skipSpellCheck');

	      _this.globalStorage["delete"](StorageKeys.QUERY_TRIGGER);

	      var exposedParams = {
	        verticalKey: verticalKey,
	        queryString: parsedQuery.input,
	        resultsCount: _this.globalStorage.getState(StorageKeys.VERTICAL_RESULTS).resultsCount,
	        resultsContext: data[StorageKeys.VERTICAL_RESULTS].resultsContext
	      };

	      var analyticsEvent = _this.onVerticalSearch(exposedParams);

	      if (typeof analyticsEvent === 'object') {
	        _this._analyticsReporter.report(AnalyticsEvent.fromData(analyticsEvent));
	      }

	      window.performance.mark('yext.answers.verticalQueryResponseRendered');
	    });
	  };

	  _proto.clearResults = function clearResults() {
	    this.globalStorage.set(StorageKeys.QUERY, null);
	    this.globalStorage.set(StorageKeys.QUERY_ID, '');
	    this.globalStorage.set(StorageKeys.RESULTS_HEADER, {});
	    this.globalStorage.set(StorageKeys.SPELL_CHECK, {}); // TODO has a model but not cleared w new

	    this.globalStorage.set(StorageKeys.DYNAMIC_FILTERS, {}); // TODO has a model but not cleared w new

	    this.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, new QuestionSubmission({}));
	    this.globalStorage.set(StorageKeys.INTENTS, new SearchIntents({}));
	    this.globalStorage.set(StorageKeys.NAVIGATION, new Navigation());
	    this.globalStorage.set(StorageKeys.ALTERNATIVE_VERTICALS, new AlternativeVerticals({}));
	    this.globalStorage.set(StorageKeys.DIRECT_ANSWER, new DirectAnswer({}));
	    this.globalStorage.set(StorageKeys.LOCATION_BIAS, new LocationBias({}));
	    this.globalStorage.set(StorageKeys.VERTICAL_RESULTS, new VerticalResults({}));
	    this.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, new UniversalResults({}));
	  }
	  /**
	   * Page within the results of the last query
	   * TODO: Should id be in all searches? Currently is only in searches done by the pagination
	   * component
	   * @param {string} verticalKey The vertical key to use in the search
	   */
	  ;

	  _proto.verticalPage = function verticalPage(verticalKey) {
	    this.verticalSearch(verticalKey, {
	      useFacets: true,
	      setQueryParams: true
	    }, {
	      id: this.globalStorage.getState(StorageKeys.QUERY_ID)
	    });
	  };

	  _proto.search = function search(queryString, urls, options) {
	    var _this2 = this;

	    if (options === void 0) {
	      options = {};
	    }

	    window.performance.mark('yext.answers.universalQueryStart');
	    var _options3 = options,
	        setQueryParams = _options3.setQueryParams;
	    var context = this.globalStorage.getState(StorageKeys.API_CONTEXT);
	    var referrerPageUrl = this.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

	    if (setQueryParams) {
	      if (context) {
	        this.persistentStorage.set(StorageKeys.API_CONTEXT, context, true);
	      }

	      if (referrerPageUrl !== null) {
	        this.persistentStorage.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl, true);
	      }
	    }

	    this.globalStorage.set(StorageKeys.DIRECT_ANSWER, {});
	    this.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, UniversalResults.searchLoading());
	    this.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, {});
	    this.globalStorage.set(StorageKeys.SPELL_CHECK, {});
	    this.globalStorage.set(StorageKeys.LOCATION_BIAS, {});
	    var queryTrigger = this.getQueryTriggerForSearchApi(this.globalStorage.getState(StorageKeys.QUERY_TRIGGER));
	    return this._searcher.universalSearch(queryString, {
	      geolocation: this.globalStorage.getState(StorageKeys.GEOLOCATION),
	      skipSpellCheck: this.globalStorage.getState('skipSpellCheck'),
	      queryTrigger: queryTrigger,
	      sessionTrackingEnabled: this.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN).value,
	      context: context,
	      referrerPageUrl: referrerPageUrl,
	      querySource: this.globalStorage.getState(StorageKeys.QUERY_SOURCE)
	    }).then(function (response) {
	      return SearchDataTransformer.transform(response, urls, _this2._fieldFormatters);
	    }).then(function (data) {
	      _this2.globalStorage.set(StorageKeys.QUERY_ID, data[StorageKeys.QUERY_ID]);

	      _this2.globalStorage.set(StorageKeys.NAVIGATION, data[StorageKeys.NAVIGATION]);

	      _this2.globalStorage.set(StorageKeys.DIRECT_ANSWER, data[StorageKeys.DIRECT_ANSWER]);

	      _this2.globalStorage.set(StorageKeys.UNIVERSAL_RESULTS, data[StorageKeys.UNIVERSAL_RESULTS], urls);

	      _this2.globalStorage.set(StorageKeys.INTENTS, data[StorageKeys.INTENTS]);

	      _this2.globalStorage.set(StorageKeys.SPELL_CHECK, data[StorageKeys.SPELL_CHECK]);

	      _this2.globalStorage.set(StorageKeys.LOCATION_BIAS, data[StorageKeys.LOCATION_BIAS]);

	      _this2.globalStorage["delete"]('skipSpellCheck');

	      _this2.globalStorage["delete"](StorageKeys.QUERY_TRIGGER);

	      var exposedParams = _this2._getOnUniversalSearchParams(data[StorageKeys.UNIVERSAL_RESULTS].sections, queryString);

	      var analyticsEvent = _this2.onUniversalSearch(exposedParams);

	      if (typeof analyticsEvent === 'object') {
	        _this2._analyticsReporter.report(AnalyticsEvent.fromData(analyticsEvent));
	      }

	      window.performance.mark('yext.answers.universalQueryResponseRendered');
	    });
	  }
	  /**
	   * Builds the object passed as a parameter to onUniversalSearch. This object
	   * contains information about the universal search's query and result counts.
	   *
	   * @param {Array<Section>} sections The sections of results.
	   * @param {string} queryString The search query.
	   * @return {Object<string, ?>}
	   */
	  ;

	  _proto._getOnUniversalSearchParams = function _getOnUniversalSearchParams(sections, queryString) {
	    var resultsCountByVertical = reduce$2(sections).call(sections, function (resultsCountMap, section) {
	      var verticalConfigId = section.verticalConfigId,
	          resultsCount = section.resultsCount,
	          results = section.results;
	      resultsCountMap[verticalConfigId] = {
	        totalResultsCount: resultsCount,
	        displayedResultsCount: results.length
	      };
	      return resultsCountMap;
	    }, {});

	    var exposedParams = {
	      queryString: queryString,
	      sectionsCount: sections.length,
	      resultsCountByVertical: resultsCountByVertical
	    };
	    return exposedParams;
	  }
	  /**
	   * Given an input, query for a list of similar results and set into storage
	   *
	   * @param {string} input     the string to autocomplete
	   * @param {string} namespace the namespace to use for the storage key
	   */
	  ;

	  _proto.autoCompleteUniversal = function autoCompleteUniversal(input, namespace) {
	    var _this3 = this;

	    return this._autoComplete.queryUniversal(input).then(function (data) {
	      _this3.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + namespace, data);

	      return data;
	    });
	  }
	  /**
	   * Given an input, query for a list of similar results in the provided vertical
	   * and set into storage
	   *
	   * @param {string} input       the string to autocomplete
	   * @param {string} namespace the namespace to use for the storage key
	   * @param {string} verticalKey the vertical key for the experience
	   */
	  ;

	  _proto.autoCompleteVertical = function autoCompleteVertical(input, namespace, verticalKey) {
	    var _this4 = this;

	    return this._autoComplete.queryVertical(input, verticalKey).then(function (data) {
	      _this4.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + namespace, data);

	      return data;
	    });
	  }
	  /**
	   * Given an input, provide a list of suitable filters for autocompletion
	   *
	   * @param {string} input  the string to search for filters with
	   * @param {object} config  the config to serach for filters with
	   * @param {string} config.namespace  the namespace to use for the storage key
	   * @param {string} config.verticalKey the vertical key for the config
	   * @param {object} config.searchParameters  the search parameters for the config v2
	   */
	  ;

	  _proto.autoCompleteFilter = function autoCompleteFilter(input, config) {
	    var _this5 = this;

	    return this._autoComplete.queryFilter(input, config).then(function (data) {
	      _this5.globalStorage.set(StorageKeys.AUTOCOMPLETE + "." + config.namespace, data);
	    });
	  }
	  /**
	   * Submits a question to the server and updates the underlying question model
	   * @param {object} question The question object to submit to the server
	   * @param {number} question.entityId The entity to associate with the question (required)
	   * @param {string} question.lanuage The language of the question
	   * @param {string} question.site The "publisher" of the (e.g. 'FIRST_PARTY')
	   * @param {string} question.name The name of the author
	   * @param {string} question.email The email address of the author
	   * @param {string} question.questionText The question
	   * @param {string} question.questionDescription Additional information about the question
	   */
	  ;

	  _proto.submitQuestion = function submitQuestion(question) {
	    var _this6 = this;

	    return this._questionAnswer.submitQuestion(question).then(function (data) {
	      _this6.globalStorage.set(StorageKeys.QUESTION_SUBMISSION, QuestionSubmission.submitted());
	    });
	  }
	  /**
	   * Stores the given sortBy into storage, to be used for the next search
	   * @param {Object} sortByOptions
	   */
	  ;

	  _proto.setSortBys = function setSortBys() {
	    for (var _len = arguments.length, sortByOptions = new Array(_len), _key = 0; _key < _len; _key++) {
	      sortByOptions[_key] = arguments[_key];
	    }

	    var sortBys = map$2(sortByOptions).call(sortByOptions, function (option) {
	      return {
	        type: option.type,
	        field: option.field,
	        direction: option.direction
	      };
	    });

	    this.globalStorage.set(StorageKeys.SORT_BYS, stringify$2(sortBys));
	  }
	  /**
	   * Clears the sortBys key in global storage.
	   */
	  ;

	  _proto.clearSortBys = function clearSortBys() {
	    this.globalStorage["delete"](StorageKeys.SORT_BYS);
	  }
	  /**
	   * Stores the given query into storage, to be used for the next search
	   * @param {string} query the query to store
	   */
	  ;

	  _proto.setQuery = function setQuery(query) {
	    this.globalStorage.set(StorageKeys.QUERY, query);
	  }
	  /**
	   * Stores the provided query ID, to be used in analytics
	   * @param {string} queryId The query id to store
	   */
	  ;

	  _proto.setQueryId = function setQueryId(queryId) {
	    this.globalStorage.set(StorageKeys.QUERY_ID, queryId);
	  }
	  /**
	   * Get all of the {@link FilterNode}s for static filters.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getStaticFilterNodes = function getStaticFilterNodes() {
	    return this.filterRegistry.getStaticFilterNodes();
	  }
	  /**
	   * Get all of the active {@link FilterNode}s for facets.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto.getFacetFilterNodes = function getFacetFilterNodes() {
	    return this.filterRegistry.getFacetFilterNodes();
	  }
	  /**
	   * Get the {@link FilterNode} affecting the locationRadius url parameter.
	   * @returns {FilterNode}
	   */
	  ;

	  _proto.getLocationRadiusFilterNode = function getLocationRadiusFilterNode() {
	    return this.filterRegistry.getFilterNodeByKey(StorageKeys.LOCATION_RADIUS);
	  }
	  /**
	   * Sets the filter nodes used for the current facet filters.
	   *
	   * Because the search response only sends back one
	   * set of facet filters, there can only be one active facet filter node
	   * at a time.
	   * @param {Array<string>} availableFieldIds
	   * @param {Array<FilterNode>} filterNodes
	   */
	  ;

	  _proto.setFacetFilterNodes = function setFacetFilterNodes(availableFieldids, filterNodes) {
	    if (availableFieldids === void 0) {
	      availableFieldids = [];
	    }

	    if (filterNodes === void 0) {
	      filterNodes = [];
	    }

	    this.filterRegistry.setFacetFilterNodes(availableFieldids, filterNodes);
	  }
	  /**
	   * Sets the specified {@link FilterNode} under the given key.
	   * Will replace a preexisting node if there is one.
	   * @param {string} namespace
	   * @param {FilterNode} filterNode
	   */
	  ;

	  _proto.setStaticFilterNodes = function setStaticFilterNodes(namespace, filterNode) {
	    this.filterRegistry.setStaticFilterNodes(namespace, filterNode);
	  }
	  /**
	   * Sets the locationRadius filterNode.
	   * @param {FilterNode} filterNode
	   */
	  ;

	  _proto.setLocationRadiusFilterNode = function setLocationRadiusFilterNode(filterNode) {
	    this.filterRegistry.setLocationRadiusFilterNode(filterNode);
	  }
	  /**
	   * Remove the static FilterNode with this namespace.
	   * @param {string} namespace
	   */
	  ;

	  _proto.clearStaticFilterNode = function clearStaticFilterNode(namespace) {
	    this.filterRegistry.clearStaticFilterNode(namespace);
	  }
	  /**
	   * Remove all facet FilterNodes.
	   */
	  ;

	  _proto.clearFacetFilterNodes = function clearFacetFilterNodes() {
	    this.filterRegistry.clearFacetFilterNodes();
	  }
	  /**
	   * Clears the locationRadius filterNode.
	   */
	  ;

	  _proto.clearLocationRadiusFilterNode = function clearLocationRadiusFilterNode() {
	    this.filterRegistry.clearLocationRadiusFilterNode();
	  }
	  /**
	   * Returns the query trigger for the search API given the SDK query trigger
	   * @param {QueryTriggers} queryTrigger SDK query trigger
	   * @returns {QueryTriggers} query trigger if accepted by the search API, null o/w
	   */
	  ;

	  _proto.getQueryTriggerForSearchApi = function getQueryTriggerForSearchApi(queryTrigger) {
	    if (queryTrigger === QueryTriggers.QUERY_PARAMETER) {
	      return null;
	    }

	    return queryTrigger;
	  };

	  _proto.enableDynamicFilters = function enableDynamicFilters() {
	    this._isDynamicFiltersEnabled = true;
	  };

	  _proto.on = function on(evt, moduleId, cb) {
	    return this.globalStorage.on(evt, moduleId, cb);
	  };

	  return Core;
	}();

	/*!
	 * css-vars-ponyfill
	 * v2.3.1
	 * https://jhildenbiddle.github.io/css-vars-ponyfill/
	 * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>
	 * MIT license
	 */
	function _extends() {
	    _extends = Object.assign || function(target) {
	        for (var i = 1; i < arguments.length; i++) {
	            var source = arguments[i];
	            for (var key in source) {
	                if (Object.prototype.hasOwnProperty.call(source, key)) {
	                    target[key] = source[key];
	                }
	            }
	        }
	        return target;
	    };
	    return _extends.apply(this, arguments);
	}

	function _toConsumableArray(arr) {
	    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function _arrayWithoutHoles(arr) {
	    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
	    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
	    if (!o) return;
	    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	    var n = Object.prototype.toString.call(o).slice(8, -1);
	    if (n === "Object" && o.constructor) n = o.constructor.name;
	    if (n === "Map" || n === "Set") return Array.from(o);
	    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _arrayLikeToArray(arr, len) {
	    if (len == null || len > arr.length) len = arr.length;
	    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
	    return arr2;
	}

	function _nonIterableSpread() {
	    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	/*!
	 * get-css-data
	 * v1.8.0
	 * https://github.com/jhildenbiddle/get-css-data
	 * (c) 2018-2020 John Hildenbiddle <http://hildenbiddle.com>
	 * MIT license
	 */ function getUrls(urls) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var settings = {
	        mimeType: options.mimeType || null,
	        onBeforeSend: options.onBeforeSend || Function.prototype,
	        onSuccess: options.onSuccess || Function.prototype,
	        onError: options.onError || Function.prototype,
	        onComplete: options.onComplete || Function.prototype
	    };
	    var urlArray = Array.isArray(urls) ? urls : [ urls ];
	    var urlQueue = Array.apply(null, Array(urlArray.length)).map((function(x) {
	        return null;
	    }));
	    function isValidCss() {
	        var cssText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
	        var isHTML = cssText.trim().charAt(0) === "<";
	        return !isHTML;
	    }
	    function onError(xhr, urlIndex) {
	        settings.onError(xhr, urlArray[urlIndex], urlIndex);
	    }
	    function onSuccess(responseText, urlIndex) {
	        var returnVal = settings.onSuccess(responseText, urlArray[urlIndex], urlIndex);
	        responseText = returnVal === false ? "" : returnVal || responseText;
	        urlQueue[urlIndex] = responseText;
	        if (urlQueue.indexOf(null) === -1) {
	            settings.onComplete(urlQueue);
	        }
	    }
	    var parser = document.createElement("a");
	    urlArray.forEach((function(url, i) {
	        parser.setAttribute("href", url);
	        parser.href = String(parser.href);
	        var isIElte9 = Boolean(document.all && !window.atob);
	        var isIElte9CORS = isIElte9 && parser.host.split(":")[0] !== location.host.split(":")[0];
	        if (isIElte9CORS) {
	            var isSameProtocol = parser.protocol === location.protocol;
	            if (isSameProtocol) {
	                var xdr = new XDomainRequest;
	                xdr.open("GET", url);
	                xdr.timeout = 0;
	                xdr.onprogress = Function.prototype;
	                xdr.ontimeout = Function.prototype;
	                xdr.onload = function() {
	                    if (isValidCss(xdr.responseText)) {
	                        onSuccess(xdr.responseText, i);
	                    } else {
	                        onError(xdr, i);
	                    }
	                };
	                xdr.onerror = function(err) {
	                    onError(xdr, i);
	                };
	                setTimeout((function() {
	                    xdr.send();
	                }), 0);
	            } else {
	                console.warn("Internet Explorer 9 Cross-Origin (CORS) requests must use the same protocol (".concat(url, ")"));
	                onError(null, i);
	            }
	        } else {
	            var xhr = new XMLHttpRequest;
	            xhr.open("GET", url);
	            if (settings.mimeType && xhr.overrideMimeType) {
	                xhr.overrideMimeType(settings.mimeType);
	            }
	            settings.onBeforeSend(xhr, url, i);
	            xhr.onreadystatechange = function() {
	                if (xhr.readyState === 4) {
	                    if (xhr.status === 200 && isValidCss(xhr.responseText)) {
	                        onSuccess(xhr.responseText, i);
	                    } else {
	                        onError(xhr, i);
	                    }
	                }
	            };
	            xhr.send();
	        }
	    }));
	}

	/**
	 * Gets CSS data from <style> and <link> nodes (including @imports), then
	 * returns data in order processed by DOM. Allows specifying nodes to
	 * include/exclude and filtering CSS data using RegEx.
	 *
	 * @preserve
	 * @param {object}   [options] The options object
	 * @param {object}   [options.rootElement=document] Root element to traverse for
	 *                   <link> and <style> nodes.
	 * @param {string}   [options.include] CSS selector matching <link> and <style>
	 *                   nodes to include
	 * @param {string}   [options.exclude] CSS selector matching <link> and <style>
	 *                   nodes to exclude
	 * @param {object}   [options.filter] Regular expression used to filter node CSS
	 *                   data. Each block of CSS data is tested against the filter,
	 *                   and only matching data is included.
	 * @param {boolean}  [options.skipDisabled=true] Determines if disabled
	 *                   stylesheets will be skipped while collecting CSS data.
	 * @param {boolean}  [options.useCSSOM=false] Determines if CSS data will be
	 *                   collected from a stylesheet's runtime values instead of its
	 *                   text content. This is required to get accurate CSS data
	 *                   when a stylesheet has been modified using the deleteRule()
	 *                   or insertRule() methods because these modifications will
	 *                   not be reflected in the stylesheet's text content.
	 * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
	 *                   1) the XHR object, 2) source node reference, and 3) the
	 *                   source URL as arguments.
	 * @param {function} [options.onSuccess] Callback on each CSS node read. Passes
	 *                   1) CSS text, 2) source node reference, and 3) the source
	 *                   URL as arguments.
	 * @param {function} [options.onError] Callback on each error. Passes 1) the XHR
	 *                   object for inspection, 2) soure node reference, and 3) the
	 *                   source URL that failed (either a <link> href or an @import)
	 *                   as arguments
	 * @param {function} [options.onComplete] Callback after all nodes have been
	 *                   processed. Passes 1) concatenated CSS text, 2) an array of
	 *                   CSS text in DOM order, and 3) an array of nodes in DOM
	 *                   order as arguments.
	 *
	 * @example
	 *
	 *   getCssData({
	 *     rootElement : document,
	 *     include     : 'style,link[rel="stylesheet"]',
	 *     exclude     : '[href="skip.css"]',
	 *     filter      : /red/,
	 *     skipDisabled: true,
	 *     useCSSOM    : false,
	 *     onBeforeSend(xhr, node, url) {
	 *       // ...
	 *     }
	 *     onSuccess(cssText, node, url) {
	 *       // ...
	 *     }
	 *     onError(xhr, node, url) {
	 *       // ...
	 *     },
	 *     onComplete(cssText, cssArray, nodeArray) {
	 *       // ...
	 *     }
	 *   });
	 */ function getCssData(options) {
	    var regex = {
	        cssComments: /\/\*[\s\S]+?\*\//g,
	        cssImports: /(?:@import\s*)(?:url\(\s*)?(?:['"])([^'"]*)(?:['"])(?:\s*\))?(?:[^;]*;)/g
	    };
	    var settings = {
	        rootElement: options.rootElement || document,
	        include: options.include || 'style,link[rel="stylesheet"]',
	        exclude: options.exclude || null,
	        filter: options.filter || null,
	        skipDisabled: options.skipDisabled !== false,
	        useCSSOM: options.useCSSOM || false,
	        onBeforeSend: options.onBeforeSend || Function.prototype,
	        onSuccess: options.onSuccess || Function.prototype,
	        onError: options.onError || Function.prototype,
	        onComplete: options.onComplete || Function.prototype
	    };
	    var sourceNodes = Array.apply(null, settings.rootElement.querySelectorAll(settings.include)).filter((function(node) {
	        return !matchesSelector(node, settings.exclude);
	    }));
	    var cssArray = Array.apply(null, Array(sourceNodes.length)).map((function(x) {
	        return null;
	    }));
	    function handleComplete() {
	        var isComplete = cssArray.indexOf(null) === -1;
	        if (isComplete) {
	            var cssText = cssArray.join("");
	            settings.onComplete(cssText, cssArray, sourceNodes);
	        }
	    }
	    function handleSuccess(cssText, cssIndex, node, sourceUrl) {
	        var returnVal = settings.onSuccess(cssText, node, sourceUrl);
	        cssText = returnVal !== undefined && Boolean(returnVal) === false ? "" : returnVal || cssText;
	        resolveImports(cssText, node, sourceUrl, (function(resolvedCssText, errorData) {
	            if (cssArray[cssIndex] === null) {
	                errorData.forEach((function(data) {
	                    return settings.onError(data.xhr, node, data.url);
	                }));
	                if (!settings.filter || settings.filter.test(resolvedCssText)) {
	                    cssArray[cssIndex] = resolvedCssText;
	                } else {
	                    cssArray[cssIndex] = "";
	                }
	                handleComplete();
	            }
	        }));
	    }
	    function parseImportData(cssText, baseUrl) {
	        var ignoreRules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	        var importData = {};
	        importData.rules = (cssText.replace(regex.cssComments, "").match(regex.cssImports) || []).filter((function(rule) {
	            return ignoreRules.indexOf(rule) === -1;
	        }));
	        importData.urls = importData.rules.map((function(rule) {
	            return rule.replace(regex.cssImports, "$1");
	        }));
	        importData.absoluteUrls = importData.urls.map((function(url) {
	            return getFullUrl(url, baseUrl);
	        }));
	        importData.absoluteRules = importData.rules.map((function(rule, i) {
	            var oldUrl = importData.urls[i];
	            var newUrl = getFullUrl(importData.absoluteUrls[i], baseUrl);
	            return rule.replace(oldUrl, newUrl);
	        }));
	        return importData;
	    }
	    function resolveImports(cssText, node, baseUrl, callbackFn) {
	        var __errorData = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	        var __errorRules = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [];
	        var importData = parseImportData(cssText, baseUrl, __errorRules);
	        if (importData.rules.length) {
	            getUrls(importData.absoluteUrls, {
	                onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {
	                    settings.onBeforeSend(xhr, node, url);
	                },
	                onSuccess: function onSuccess(cssText, url, urlIndex) {
	                    var returnVal = settings.onSuccess(cssText, node, url);
	                    cssText = returnVal === false ? "" : returnVal || cssText;
	                    var responseImportData = parseImportData(cssText, url, __errorRules);
	                    responseImportData.rules.forEach((function(rule, i) {
	                        cssText = cssText.replace(rule, responseImportData.absoluteRules[i]);
	                    }));
	                    return cssText;
	                },
	                onError: function onError(xhr, url, urlIndex) {
	                    __errorData.push({
	                        xhr: xhr,
	                        url: url
	                    });
	                    __errorRules.push(importData.rules[urlIndex]);
	                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
	                },
	                onComplete: function onComplete(responseArray) {
	                    responseArray.forEach((function(importText, i) {
	                        cssText = cssText.replace(importData.rules[i], importText);
	                    }));
	                    resolveImports(cssText, node, baseUrl, callbackFn, __errorData, __errorRules);
	                }
	            });
	        } else {
	            callbackFn(cssText, __errorData);
	        }
	    }
	    if (sourceNodes.length) {
	        sourceNodes.forEach((function(node, i) {
	            var linkHref = node.getAttribute("href");
	            var linkRel = node.getAttribute("rel");
	            var isLink = node.nodeName === "LINK" && linkHref && linkRel && linkRel.toLowerCase().indexOf("stylesheet") !== -1;
	            var isSkip = settings.skipDisabled === false ? false : node.disabled;
	            var isStyle = node.nodeName === "STYLE";
	            if (isLink && !isSkip) {
	                getUrls(linkHref, {
	                    mimeType: "text/css",
	                    onBeforeSend: function onBeforeSend(xhr, url, urlIndex) {
	                        settings.onBeforeSend(xhr, node, url);
	                    },
	                    onSuccess: function onSuccess(cssText, url, urlIndex) {
	                        var sourceUrl = getFullUrl(linkHref);
	                        handleSuccess(cssText, i, node, sourceUrl);
	                    },
	                    onError: function onError(xhr, url, urlIndex) {
	                        cssArray[i] = "";
	                        settings.onError(xhr, node, url);
	                        handleComplete();
	                    }
	                });
	            } else if (isStyle && !isSkip) {
	                var cssText = node.textContent;
	                if (settings.useCSSOM) {
	                    cssText = Array.apply(null, node.sheet.cssRules).map((function(rule) {
	                        return rule.cssText;
	                    })).join("");
	                }
	                handleSuccess(cssText, i, node, location.href);
	            } else {
	                cssArray[i] = "";
	                handleComplete();
	            }
	        }));
	    } else {
	        settings.onComplete("", []);
	    }
	}

	function getFullUrl(url, base) {
	    var d = document.implementation.createHTMLDocument("");
	    var b = d.createElement("base");
	    var a = d.createElement("a");
	    d.head.appendChild(b);
	    d.body.appendChild(a);
	    b.href = base || document.baseURI || (document.querySelector("base") || {}).href || location.href;
	    a.href = url;
	    return a.href;
	}

	function matchesSelector(elm, selector) {
	    var matches = elm.matches || elm.matchesSelector || elm.webkitMatchesSelector || elm.mozMatchesSelector || elm.msMatchesSelector || elm.oMatchesSelector;
	    return matches.call(elm, selector);
	}

	var balancedMatch = balanced;

	function balanced(a, b, str) {
	    if (a instanceof RegExp) a = maybeMatch(a, str);
	    if (b instanceof RegExp) b = maybeMatch(b, str);
	    var r = range(a, b, str);
	    return r && {
	        start: r[0],
	        end: r[1],
	        pre: str.slice(0, r[0]),
	        body: str.slice(r[0] + a.length, r[1]),
	        post: str.slice(r[1] + b.length)
	    };
	}

	function maybeMatch(reg, str) {
	    var m = str.match(reg);
	    return m ? m[0] : null;
	}

	balanced.range = range;

	function range(a, b, str) {
	    var begs, beg, left, right, result;
	    var ai = str.indexOf(a);
	    var bi = str.indexOf(b, ai + 1);
	    var i = ai;
	    if (ai >= 0 && bi > 0) {
	        begs = [];
	        left = str.length;
	        while (i >= 0 && !result) {
	            if (i == ai) {
	                begs.push(i);
	                ai = str.indexOf(a, i + 1);
	            } else if (begs.length == 1) {
	                result = [ begs.pop(), bi ];
	            } else {
	                beg = begs.pop();
	                if (beg < left) {
	                    left = beg;
	                    right = bi;
	                }
	                bi = str.indexOf(b, i + 1);
	            }
	            i = ai < bi && ai >= 0 ? ai : bi;
	        }
	        if (begs.length) {
	            result = [ left, right ];
	        }
	    }
	    return result;
	}

	function parseCss(css) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var defaults = {
	        preserveStatic: true,
	        removeComments: false
	    };
	    var settings = _extends({}, defaults, options);
	    var errors = [];
	    function error(msg) {
	        throw new Error("CSS parse error: ".concat(msg));
	    }
	    function match(re) {
	        var m = re.exec(css);
	        if (m) {
	            css = css.slice(m[0].length);
	            return m;
	        }
	    }
	    function open() {
	        return match(/^{\s*/);
	    }
	    function close() {
	        return match(/^}/);
	    }
	    function whitespace() {
	        match(/^\s*/);
	    }
	    function comment() {
	        whitespace();
	        if (css[0] !== "/" || css[1] !== "*") {
	            return;
	        }
	        var i = 2;
	        while (css[i] && (css[i] !== "*" || css[i + 1] !== "/")) {
	            i++;
	        }
	        if (!css[i]) {
	            return error("end of comment is missing");
	        }
	        var str = css.slice(2, i);
	        css = css.slice(i + 2);
	        return {
	            type: "comment",
	            comment: str
	        };
	    }
	    function comments() {
	        var cmnts = [];
	        var c;
	        while (c = comment()) {
	            cmnts.push(c);
	        }
	        return settings.removeComments ? [] : cmnts;
	    }
	    function selector() {
	        whitespace();
	        while (css[0] === "}") {
	            error("extra closing bracket");
	        }
	        var m = match(/^(("(?:\\"|[^"])*"|'(?:\\'|[^'])*'|[^{])+)/);
	        if (m) {
	            return m[0].trim().replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, (function(m) {
	                return m.replace(/,/g, "‌");
	            })).split(/\s*(?![^(]*\)),\s*/).map((function(s) {
	                return s.replace(/\u200C/g, ",");
	            }));
	        }
	    }
	    function declaration() {
	        if (css[0] === "@") {
	            return at_rule();
	        }
	        match(/^([;\s]*)+/);
	        var comment_regexp = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
	        var prop = match(/^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
	        if (!prop) {
	            return;
	        }
	        prop = prop[0].trim();
	        if (!match(/^:\s*/)) {
	            return error("property missing ':'");
	        }
	        var val = match(/^((?:\/\*.*?\*\/|'(?:\\'|.)*?'|"(?:\\"|.)*?"|\((\s*'(?:\\'|.)*?'|"(?:\\"|.)*?"|[^)]*?)\s*\)|[^};])+)/);
	        var ret = {
	            type: "declaration",
	            property: prop.replace(comment_regexp, ""),
	            value: val ? val[0].replace(comment_regexp, "").trim() : ""
	        };
	        match(/^[;\s]*/);
	        return ret;
	    }
	    function declarations() {
	        if (!open()) {
	            return error("missing '{'");
	        }
	        var d;
	        var decls = comments();
	        while (d = declaration()) {
	            decls.push(d);
	            decls = decls.concat(comments());
	        }
	        if (!close()) {
	            return error("missing '}'");
	        }
	        return decls;
	    }
	    function keyframe() {
	        whitespace();
	        var vals = [];
	        var m;
	        while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
	            vals.push(m[1]);
	            match(/^,\s*/);
	        }
	        if (vals.length) {
	            return {
	                type: "keyframe",
	                values: vals,
	                declarations: declarations()
	            };
	        }
	    }
	    function at_keyframes() {
	        var m = match(/^@([-\w]+)?keyframes\s*/);
	        if (!m) {
	            return;
	        }
	        var vendor = m[1];
	        m = match(/^([-\w]+)\s*/);
	        if (!m) {
	            return error("@keyframes missing name");
	        }
	        var name = m[1];
	        if (!open()) {
	            return error("@keyframes missing '{'");
	        }
	        var frame;
	        var frames = comments();
	        while (frame = keyframe()) {
	            frames.push(frame);
	            frames = frames.concat(comments());
	        }
	        if (!close()) {
	            return error("@keyframes missing '}'");
	        }
	        return {
	            type: "keyframes",
	            name: name,
	            vendor: vendor,
	            keyframes: frames
	        };
	    }
	    function at_page() {
	        var m = match(/^@page */);
	        if (m) {
	            var sel = selector() || [];
	            return {
	                type: "page",
	                selectors: sel,
	                declarations: declarations()
	            };
	        }
	    }
	    function at_page_margin_box() {
	        var m = match(/@(top|bottom|left|right)-(left|center|right|top|middle|bottom)-?(corner)?\s*/);
	        if (m) {
	            var name = "".concat(m[1], "-").concat(m[2]) + (m[3] ? "-".concat(m[3]) : "");
	            return {
	                type: "page-margin-box",
	                name: name,
	                declarations: declarations()
	            };
	        }
	    }
	    function at_fontface() {
	        var m = match(/^@font-face\s*/);
	        if (m) {
	            return {
	                type: "font-face",
	                declarations: declarations()
	            };
	        }
	    }
	    function at_supports() {
	        var m = match(/^@supports *([^{]+)/);
	        if (m) {
	            return {
	                type: "supports",
	                supports: m[1].trim(),
	                rules: rules()
	            };
	        }
	    }
	    function at_host() {
	        var m = match(/^@host\s*/);
	        if (m) {
	            return {
	                type: "host",
	                rules: rules()
	            };
	        }
	    }
	    function at_media() {
	        var m = match(/^@media([^{]+)*/);
	        if (m) {
	            return {
	                type: "media",
	                media: (m[1] || "").trim(),
	                rules: rules()
	            };
	        }
	    }
	    function at_custom_m() {
	        var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
	        if (m) {
	            return {
	                type: "custom-media",
	                name: m[1].trim(),
	                media: m[2].trim()
	            };
	        }
	    }
	    function at_document() {
	        var m = match(/^@([-\w]+)?document *([^{]+)/);
	        if (m) {
	            return {
	                type: "document",
	                document: m[2].trim(),
	                vendor: m[1] ? m[1].trim() : null,
	                rules: rules()
	            };
	        }
	    }
	    function at_x() {
	        var m = match(/^@(import|charset|namespace)\s*([^;]+);/);
	        if (m) {
	            return {
	                type: m[1],
	                name: m[2].trim()
	            };
	        }
	    }
	    function at_rule() {
	        whitespace();
	        if (css[0] === "@") {
	            var ret = at_x() || at_fontface() || at_media() || at_keyframes() || at_supports() || at_document() || at_custom_m() || at_host() || at_page() || at_page_margin_box();
	            if (ret && !settings.preserveStatic) {
	                var hasVarFunc = false;
	                if (ret.declarations) {
	                    hasVarFunc = ret.declarations.some((function(decl) {
	                        return /var\(/.test(decl.value);
	                    }));
	                } else {
	                    var arr = ret.keyframes || ret.rules || [];
	                    hasVarFunc = arr.some((function(obj) {
	                        return (obj.declarations || []).some((function(decl) {
	                            return /var\(/.test(decl.value);
	                        }));
	                    }));
	                }
	                return hasVarFunc ? ret : {};
	            }
	            return ret;
	        }
	    }
	    function rule() {
	        if (!settings.preserveStatic) {
	            var balancedMatch$1 = balancedMatch("{", "}", css);
	            if (balancedMatch$1) {
	                var hasVarDecl = /:(?:root|host)(?![.:#(])/.test(balancedMatch$1.pre) && /--\S*\s*:/.test(balancedMatch$1.body);
	                var hasVarFunc = /var\(/.test(balancedMatch$1.body);
	                if (!hasVarDecl && !hasVarFunc) {
	                    css = css.slice(balancedMatch$1.end + 1);
	                    return {};
	                }
	            }
	        }
	        var sel = selector() || [];
	        var decls = settings.preserveStatic ? declarations() : declarations().filter((function(decl) {
	            var hasVarDecl = sel.some((function(s) {
	                return /:(?:root|host)(?![.:#(])/.test(s);
	            })) && /^--\S/.test(decl.property);
	            var hasVarFunc = /var\(/.test(decl.value);
	            return hasVarDecl || hasVarFunc;
	        }));
	        if (!sel.length) {
	            error("selector missing");
	        }
	        return {
	            type: "rule",
	            selectors: sel,
	            declarations: decls
	        };
	    }
	    function rules(core) {
	        if (!core && !open()) {
	            return error("missing '{'");
	        }
	        var node;
	        var rules = comments();
	        while (css.length && (core || css[0] !== "}") && (node = at_rule() || rule())) {
	            if (node.type) {
	                rules.push(node);
	            }
	            rules = rules.concat(comments());
	        }
	        if (!core && !close()) {
	            return error("missing '}'");
	        }
	        return rules;
	    }
	    return {
	        type: "stylesheet",
	        stylesheet: {
	            rules: rules(true),
	            errors: errors
	        }
	    };
	}

	function parseVars(cssData) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var defaults = {
	        parseHost: false,
	        store: {},
	        onWarning: function onWarning() {}
	    };
	    var settings = _extends({}, defaults, options);
	    var reVarDeclSelectors = new RegExp(":".concat(settings.parseHost ? "host" : "root", "$"));
	    if (typeof cssData === "string") {
	        cssData = parseCss(cssData, settings);
	    }
	    cssData.stylesheet.rules.forEach((function(rule) {
	        if (rule.type !== "rule" || !rule.selectors.some((function(s) {
	            return reVarDeclSelectors.test(s);
	        }))) {
	            return;
	        }
	        rule.declarations.forEach((function(decl, i) {
	            var prop = decl.property;
	            var value = decl.value;
	            if (prop && prop.indexOf("--") === 0) {
	                settings.store[prop] = value;
	            }
	        }));
	    }));
	    return settings.store;
	}

	function stringifyCss(tree) {
	    var delim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
	    var cb = arguments.length > 2 ? arguments[2] : undefined;
	    var renderMethods = {
	        charset: function charset(node) {
	            return "@charset " + node.name + ";";
	        },
	        comment: function comment(node) {
	            return node.comment.indexOf("__CSSVARSPONYFILL") === 0 ? "/*" + node.comment + "*/" : "";
	        },
	        "custom-media": function customMedia(node) {
	            return "@custom-media " + node.name + " " + node.media + ";";
	        },
	        declaration: function declaration(node) {
	            return node.property + ":" + node.value + ";";
	        },
	        document: function document(node) {
	            return "@" + (node.vendor || "") + "document " + node.document + "{" + visit(node.rules) + "}";
	        },
	        "font-face": function fontFace(node) {
	            return "@font-face" + "{" + visit(node.declarations) + "}";
	        },
	        host: function host(node) {
	            return "@host" + "{" + visit(node.rules) + "}";
	        },
	        import: function _import(node) {
	            return "@import " + node.name + ";";
	        },
	        keyframe: function keyframe(node) {
	            return node.values.join(",") + "{" + visit(node.declarations) + "}";
	        },
	        keyframes: function keyframes(node) {
	            return "@" + (node.vendor || "") + "keyframes " + node.name + "{" + visit(node.keyframes) + "}";
	        },
	        media: function media(node) {
	            return "@media " + node.media + "{" + visit(node.rules) + "}";
	        },
	        namespace: function namespace(node) {
	            return "@namespace " + node.name + ";";
	        },
	        page: function page(node) {
	            return "@page " + (node.selectors.length ? node.selectors.join(", ") : "") + "{" + visit(node.declarations) + "}";
	        },
	        "page-margin-box": function pageMarginBox(node) {
	            return "@" + node.name + "{" + visit(node.declarations) + "}";
	        },
	        rule: function rule(node) {
	            var decls = node.declarations;
	            if (decls.length) {
	                return node.selectors.join(",") + "{" + visit(decls) + "}";
	            }
	        },
	        supports: function supports(node) {
	            return "@supports " + node.supports + "{" + visit(node.rules) + "}";
	        }
	    };
	    function visit(nodes) {
	        var buf = "";
	        for (var i = 0; i < nodes.length; i++) {
	            var n = nodes[i];
	            if (cb) {
	                cb(n);
	            }
	            var txt = renderMethods[n.type](n);
	            if (txt) {
	                buf += txt;
	                if (txt.length && n.selectors) {
	                    buf += delim;
	                }
	            }
	        }
	        return buf;
	    }
	    return visit(tree.stylesheet.rules);
	}

	function walkCss(node, fn) {
	    node.rules.forEach((function(rule) {
	        if (rule.rules) {
	            walkCss(rule, fn);
	            return;
	        }
	        if (rule.keyframes) {
	            rule.keyframes.forEach((function(keyframe) {
	                if (keyframe.type === "keyframe") {
	                    fn(keyframe.declarations, rule);
	                }
	            }));
	            return;
	        }
	        if (!rule.declarations) {
	            return;
	        }
	        fn(rule.declarations, node);
	    }));
	}

	var VAR_PROP_IDENTIFIER = "--";

	var VAR_FUNC_IDENTIFIER = "var";

	function transformCss(cssData) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var defaults = {
	        preserveStatic: true,
	        preserveVars: false,
	        variables: {},
	        onWarning: function onWarning() {}
	    };
	    var settings = _extends({}, defaults, options);
	    if (typeof cssData === "string") {
	        cssData = parseCss(cssData, settings);
	    }
	    walkCss(cssData.stylesheet, (function(declarations, node) {
	        for (var i = 0; i < declarations.length; i++) {
	            var decl = declarations[i];
	            var type = decl.type;
	            var prop = decl.property;
	            var value = decl.value;
	            if (type !== "declaration") {
	                continue;
	            }
	            if (!settings.preserveVars && prop && prop.indexOf(VAR_PROP_IDENTIFIER) === 0) {
	                declarations.splice(i, 1);
	                i--;
	                continue;
	            }
	            if (value.indexOf(VAR_FUNC_IDENTIFIER + "(") !== -1) {
	                var resolvedValue = resolveValue(value, settings);
	                if (resolvedValue !== decl.value) {
	                    resolvedValue = fixNestedCalc(resolvedValue);
	                    if (!settings.preserveVars) {
	                        decl.value = resolvedValue;
	                    } else {
	                        declarations.splice(i, 0, {
	                            type: type,
	                            property: prop,
	                            value: resolvedValue
	                        });
	                        i++;
	                    }
	                }
	            }
	        }
	    }));
	    return stringifyCss(cssData);
	}

	function fixNestedCalc(value) {
	    var reCalcVal = /calc\(([^)]+)\)/g;
	    (value.match(reCalcVal) || []).forEach((function(match) {
	        var newVal = "calc".concat(match.split("calc").join(""));
	        value = value.replace(match, newVal);
	    }));
	    return value;
	}

	function resolveValue(value) {
	    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var __recursiveFallback = arguments.length > 2 ? arguments[2] : undefined;
	    if (value.indexOf("var(") === -1) {
	        return value;
	    }
	    var valueData = balancedMatch("(", ")", value);
	    function resolveFunc(value) {
	        var name = value.split(",")[0].replace(/[\s\n\t]/g, "");
	        var fallback = (value.match(/(?:\s*,\s*){1}(.*)?/) || [])[1];
	        var match = Object.prototype.hasOwnProperty.call(settings.variables, name) ? String(settings.variables[name]) : undefined;
	        var replacement = match || (fallback ? String(fallback) : undefined);
	        var unresolvedFallback = __recursiveFallback || value;
	        if (!match) {
	            settings.onWarning('variable "'.concat(name, '" is undefined'));
	        }
	        if (replacement && replacement !== "undefined" && replacement.length > 0) {
	            return resolveValue(replacement, settings, unresolvedFallback);
	        } else {
	            return "var(".concat(unresolvedFallback, ")");
	        }
	    }
	    if (!valueData) {
	        if (value.indexOf("var(") !== -1) {
	            settings.onWarning('missing closing ")" in the value "'.concat(value, '"'));
	        }
	        return value;
	    } else if (valueData.pre.slice(-3) === "var") {
	        var isEmptyVarFunc = valueData.body.trim().length === 0;
	        if (isEmptyVarFunc) {
	            settings.onWarning("var() must contain a non-whitespace string");
	            return value;
	        } else {
	            return valueData.pre.slice(0, -3) + resolveFunc(valueData.body) + resolveValue(valueData.post, settings);
	        }
	    } else {
	        return valueData.pre + "(".concat(resolveValue(valueData.body, settings), ")") + resolveValue(valueData.post, settings);
	    }
	}

	var isBrowser = typeof window !== "undefined";

	var isNativeSupport = isBrowser && window.CSS && window.CSS.supports && window.CSS.supports("(--a: 0)");

	var counters = {
	    group: 0,
	    job: 0
	};

	var defaults = {
	    rootElement: isBrowser ? document : null,
	    shadowDOM: false,
	    include: "style,link[rel=stylesheet]",
	    exclude: "",
	    variables: {},
	    onlyLegacy: true,
	    preserveStatic: true,
	    preserveVars: false,
	    silent: false,
	    updateDOM: true,
	    updateURLs: true,
	    watch: null,
	    onBeforeSend: function onBeforeSend() {},
	    onError: function onError() {},
	    onWarning: function onWarning() {},
	    onSuccess: function onSuccess() {},
	    onComplete: function onComplete() {},
	    onFinally: function onFinally() {}
	};

	var regex = {
	    cssComments: /\/\*[\s\S]+?\*\//g,
	    cssKeyframes: /@(?:-\w*-)?keyframes/,
	    cssMediaQueries: /@media[^{]+\{([\s\S]+?})\s*}/g,
	    cssUrls: /url\((?!['"]?(?:data|http|\/\/):)['"]?([^'")]*)['"]?\)/g,
	    cssVarDeclRules: /(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^}]*})/g,
	    cssVarDecls: /(?:[\s;]*)(-{2}\w[\w-]*)(?:\s*:\s*)([^;]*);/g,
	    cssVarFunc: /var\(\s*--[\w-]/,
	    cssVars: /(?:(?::(?:root|host)(?![.:#(])[\s,]*[^{]*{\s*[^;]*;*\s*)|(?:var\(\s*))(--[^:)]+)(?:\s*[:)])/
	};

	var variableStore = {
	    dom: {},
	    job: {},
	    user: {}
	};

	var cssVarsIsRunning = false;

	var cssVarsObserver = null;

	var cssVarsSrcNodeCount = 0;

	var debounceTimer = null;

	var isShadowDOMReady = false;

	/**
	 * Fetches, parses, and transforms CSS custom properties from specified
	 * <style> and <link> elements into static values, then appends a new <style>
	 * element with static values to the DOM to provide CSS custom property
	 * compatibility for legacy browsers. Also provides a single interface for
	 * live updates of runtime values in both modern and legacy browsers.
	 *
	 * @preserve
	 * @param {object}   [options] Options object
	 * @param {object}   [options.rootElement=document] Root element to traverse for
	 *                   <link> and <style> nodes
	 * @param {boolean}  [options.shadowDOM=false] Determines if shadow DOM <link>
	 *                   and <style> nodes will be processed.
	 * @param {string}   [options.include="style,link[rel=stylesheet]"] CSS selector
	 *                   matching <link re="stylesheet"> and <style> nodes to
	 *                   process
	 * @param {string}   [options.exclude] CSS selector matching <link
	 *                   rel="stylehseet"> and <style> nodes to exclude from those
	 *                   matches by options.include
	 * @param {object}   [options.variables] A map of custom property name/value
	 *                   pairs. Property names can omit or include the leading
	 *                   double-hyphen (—), and values specified will override
	 *                   previous values
	 * @param {boolean}  [options.onlyLegacy=true] Determines if the ponyfill will
	 *                   only generate legacy-compatible CSS in browsers that lack
	 *                   native support (i.e., legacy browsers)
	 * @param {boolean}  [options.preserveStatic=true] Determines if CSS
	 *                   declarations that do not reference a custom property will
	 *                   be preserved in the transformed CSS
	 * @param {boolean}  [options.preserveVars=false] Determines if CSS custom
	 *                   property declarations will be preserved in the transformed
	 *                   CSS
	 * @param {boolean}  [options.silent=false] Determines if warning and error
	 *                   messages will be displayed on the console
	 * @param {boolean}  [options.updateDOM=true] Determines if the ponyfill will
	 *                   update the DOM after processing CSS custom properties
	 * @param {boolean}  [options.updateURLs=true] Determines if the ponyfill will
	 *                   convert relative url() paths to absolute urls
	 * @param {boolean}  [options.watch=false] Determines if a MutationObserver will
	 *                   be created that will execute the ponyfill when a <link> or
	 *                   <style> DOM mutation is observed
	 * @param {function} [options.onBeforeSend] Callback before XHR is sent. Passes
	 *                   1) the XHR object, 2) source node reference, and 3) the
	 *                   source URL as arguments
	 * @param {function} [options.onError] Callback after a CSS parsing error has
	 *                   occurred or an XHR request has failed. Passes 1) an error
	 *                   message, and 2) source node reference, 3) xhr, and 4 url as
	 *                   arguments.
	 * @param {function} [options.onWarning] Callback after each CSS parsing warning
	 *                   has occurred. Passes 1) a warning message as an argument.
	 * @param {function} [options.onSuccess] Callback after CSS data has been
	 *                   collected from each node and before CSS custom properties
	 *                   have been transformed. Allows modifying the CSS data before
	 *                   it is transformed by returning any string value (or false
	 *                   to skip). Passes 1) CSS text, 2) source node reference, and
	 *                   3) the source URL as arguments.
	 * @param {function} [options.onComplete] Callback after all CSS has been
	 *                   processed, legacy-compatible CSS has been generated, and
	 *                   (optionally) the DOM has been updated. Passes 1) a CSS
	 *                   string with CSS variable values resolved, 2) an array of
	 *                   output <style> node references that have been appended to
	 *                   the DOM, 3) an object containing all custom properies names
	 *                   and values, and 4) the ponyfill execution time in
	 *                   milliseconds.
	 * @param {function} [options.onFinally] Callback in modern and legacy browsers
	 *                   after the ponyfill has finished all tasks. Passes 1) a
	 *                   boolean indicating if the last ponyfill call resulted in a
	 *                   style change, 2) a boolean indicating if the current
	 *                   browser provides native support for CSS custom properties,
	 *                   and 3) the ponyfill execution time in milliseconds.
	 * @example
	 *
	 *   cssVars({
	 *     rootElement   : document,
	 *     shadowDOM     : false,
	 *     include       : 'style,link[rel="stylesheet"]',
	 *     exclude       : '',
	 *     variables     : {},
	 *     onlyLegacy    : true,
	 *     preserveStatic: true,
	 *     preserveVars  : false,
	 *     silent        : false,
	 *     updateDOM     : true,
	 *     updateURLs    : true,
	 *     watch         : false,
	 *     onBeforeSend(xhr, node, url) {},
	 *     onError(message, node, xhr, url) {},
	 *     onWarning(message) {},
	 *     onSuccess(cssText, node, url) {},
	 *     onComplete(cssText, styleNode, cssVariables, benchmark) {},
	 *     onFinally(hasChanged, hasNativeSupport, benchmark)
	 *   });
	 */ function cssVars() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var msgPrefix = "cssVars(): ";
	    var settings = _extends({}, defaults, options);
	    function handleError(message, sourceNode, xhr, url) {
	        if (!settings.silent && window.console) {
	            console.error("".concat(msgPrefix).concat(message, "\n"), sourceNode);
	        }
	        settings.onError(message, sourceNode, xhr, url);
	    }
	    function handleWarning(message) {
	        if (!settings.silent && window.console) {
	            console.warn("".concat(msgPrefix).concat(message));
	        }
	        settings.onWarning(message);
	    }
	    function handleFinally(hasChanged) {
	        settings.onFinally(Boolean(hasChanged), isNativeSupport, getTimeStamp() - settings.__benchmark);
	    }
	    if (!isBrowser) {
	        return;
	    }
	    if (settings.watch) {
	        settings.watch = defaults.watch;
	        addMutationObserver(settings);
	        cssVars(settings);
	        return;
	    } else if (settings.watch === false && cssVarsObserver) {
	        cssVarsObserver.disconnect();
	        cssVarsObserver = null;
	    }
	    if (!settings.__benchmark) {
	        if (cssVarsIsRunning === settings.rootElement) {
	            cssVarsDebounced(options);
	            return;
	        }
	        settings.__benchmark = getTimeStamp();
	        settings.exclude = [ cssVarsObserver ? '[data-cssvars]:not([data-cssvars=""])' : '[data-cssvars="out"]', settings.exclude ].filter((function(selector) {
	            return selector;
	        })).join(",");
	        settings.variables = fixVarNames(settings.variables);
	        if (!cssVarsObserver) {
	            var outNodes = Array.apply(null, settings.rootElement.querySelectorAll('[data-cssvars="out"]'));
	            outNodes.forEach((function(outNode) {
	                var dataGroup = outNode.getAttribute("data-cssvars-group");
	                var srcNode = dataGroup ? settings.rootElement.querySelector('[data-cssvars="src"][data-cssvars-group="'.concat(dataGroup, '"]')) : null;
	                if (!srcNode) {
	                    outNode.parentNode.removeChild(outNode);
	                }
	            }));
	            if (cssVarsSrcNodeCount) {
	                var srcNodes = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])');
	                if (srcNodes.length < cssVarsSrcNodeCount) {
	                    cssVarsSrcNodeCount = srcNodes.length;
	                    variableStore.dom = {};
	                }
	            }
	        }
	    }
	    if (document.readyState !== "loading") {
	        if (isNativeSupport && settings.onlyLegacy) {
	            var hasVarChange = false;
	            if (settings.updateDOM) {
	                var targetElm = settings.rootElement.host || (settings.rootElement === document ? document.documentElement : settings.rootElement);
	                Object.keys(settings.variables).forEach((function(key) {
	                    var varValue = settings.variables[key];
	                    hasVarChange = hasVarChange || varValue !== getComputedStyle(targetElm).getPropertyValue(key);
	                    targetElm.style.setProperty(key, varValue);
	                }));
	            }
	            handleFinally(hasVarChange);
	        } else if (!isShadowDOMReady && (settings.shadowDOM || settings.rootElement.shadowRoot || settings.rootElement.host)) {
	            getCssData({
	                rootElement: defaults.rootElement,
	                include: defaults.include,
	                exclude: settings.exclude,
	                skipDisabled: false,
	                onSuccess: function onSuccess(cssText, node, url) {
	                    cssText = cssText.replace(regex.cssComments, "").replace(regex.cssMediaQueries, "");
	                    cssText = (cssText.match(regex.cssVarDeclRules) || []).join("");
	                    return cssText || false;
	                },
	                onComplete: function onComplete(cssText, cssArray, nodeArray) {
	                    parseVars(cssText, {
	                        store: variableStore.dom,
	                        onWarning: handleWarning
	                    });
	                    isShadowDOMReady = true;
	                    cssVars(settings);
	                }
	            });
	        } else {
	            cssVarsIsRunning = settings.rootElement;
	            getCssData({
	                rootElement: settings.rootElement,
	                include: settings.include,
	                exclude: settings.exclude,
	                skipDisabled: false,
	                onBeforeSend: settings.onBeforeSend,
	                onError: function onError(xhr, node, url) {
	                    var responseUrl = xhr.responseURL || getFullUrl$1(url, location.href);
	                    var statusText = xhr.statusText ? "(".concat(xhr.statusText, ")") : "Unspecified Error" + (xhr.status === 0 ? " (possibly CORS related)" : "");
	                    var errorMsg = "CSS XHR Error: ".concat(responseUrl, " ").concat(xhr.status, " ").concat(statusText);
	                    handleError(errorMsg, node, xhr, responseUrl);
	                },
	                onSuccess: function onSuccess(cssText, node, url) {
	                    var returnVal = settings.onSuccess(cssText, node, url);
	                    cssText = returnVal !== undefined && Boolean(returnVal) === false ? "" : returnVal || cssText;
	                    if (settings.updateURLs) {
	                        cssText = fixRelativeCssUrls(cssText, url);
	                    }
	                    return cssText;
	                },
	                onComplete: function onComplete(cssText, cssArray) {
	                    var nodeArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	                    var currentVars = _extends({}, variableStore.dom, variableStore.user);
	                    var hasVarChange = false;
	                    variableStore.job = {};
	                    nodeArray.forEach((function(node, i) {
	                        var nodeCSS = cssArray[i];
	                        if (regex.cssVars.test(nodeCSS)) {
	                            try {
	                                var cssTree = parseCss(nodeCSS, {
	                                    preserveStatic: settings.preserveStatic,
	                                    removeComments: true
	                                });
	                                parseVars(cssTree, {
	                                    parseHost: Boolean(settings.rootElement.host),
	                                    store: variableStore.dom,
	                                    onWarning: handleWarning
	                                });
	                                node.__cssVars = {
	                                    tree: cssTree
	                                };
	                            } catch (err) {
	                                handleError(err.message, node);
	                            }
	                        }
	                    }));
	                    _extends(variableStore.job, variableStore.dom);
	                    if (settings.updateDOM) {
	                        _extends(variableStore.user, settings.variables);
	                        _extends(variableStore.job, variableStore.user);
	                    } else {
	                        _extends(variableStore.job, variableStore.user, settings.variables);
	                        _extends(currentVars, settings.variables);
	                    }
	                    hasVarChange = counters.job > 0 && Boolean(Object.keys(variableStore.job).length > Object.keys(currentVars).length || Boolean(Object.keys(currentVars).length && Object.keys(variableStore.job).some((function(key) {
	                        return variableStore.job[key] !== currentVars[key];
	                    }))));
	                    if (hasVarChange) {
	                        resetCssNodes(settings.rootElement);
	                        cssVars(settings);
	                    } else {
	                        var outCssArray = [];
	                        var outNodeArray = [];
	                        var hasKeyframesWithVars = false;
	                        if (settings.updateDOM) {
	                            counters.job++;
	                        }
	                        nodeArray.forEach((function(node, i) {
	                            var isSkip = !node.__cssVars;
	                            if (node.__cssVars) {
	                                try {
	                                    transformCss(node.__cssVars.tree, _extends({}, settings, {
	                                        variables: variableStore.job,
	                                        onWarning: handleWarning
	                                    }));
	                                    var outCss = stringifyCss(node.__cssVars.tree);
	                                    if (settings.updateDOM) {
	                                        var nodeCSS = cssArray[i];
	                                        var hasCSSVarFunc = regex.cssVarFunc.test(nodeCSS);
	                                        if (!node.getAttribute("data-cssvars")) {
	                                            node.setAttribute("data-cssvars", "src");
	                                        }
	                                        if (outCss.length && hasCSSVarFunc) {
	                                            var dataGroup = node.getAttribute("data-cssvars-group") || ++counters.group;
	                                            var outCssNoSpaces = outCss.replace(/\s/g, "");
	                                            var outNode = settings.rootElement.querySelector('[data-cssvars="out"][data-cssvars-group="'.concat(dataGroup, '"]')) || document.createElement("style");
	                                            hasKeyframesWithVars = hasKeyframesWithVars || regex.cssKeyframes.test(outCss);
	                                            if (settings.preserveStatic) {
	                                                node.sheet.disabled = true;
	                                            }
	                                            if (!outNode.hasAttribute("data-cssvars")) {
	                                                outNode.setAttribute("data-cssvars", "out");
	                                            }
	                                            if (outCssNoSpaces === node.textContent.replace(/\s/g, "")) {
	                                                isSkip = true;
	                                                if (outNode && outNode.parentNode) {
	                                                    node.removeAttribute("data-cssvars-group");
	                                                    outNode.parentNode.removeChild(outNode);
	                                                }
	                                            } else if (outCssNoSpaces !== outNode.textContent.replace(/\s/g, "")) {
	                                                [ node, outNode ].forEach((function(n) {
	                                                    n.setAttribute("data-cssvars-job", counters.job);
	                                                    n.setAttribute("data-cssvars-group", dataGroup);
	                                                }));
	                                                outNode.textContent = outCss;
	                                                outCssArray.push(outCss);
	                                                outNodeArray.push(outNode);
	                                                if (!outNode.parentNode) {
	                                                    node.parentNode.insertBefore(outNode, node.nextSibling);
	                                                }
	                                            }
	                                        }
	                                    } else {
	                                        if (node.textContent.replace(/\s/g, "") !== outCss) {
	                                            outCssArray.push(outCss);
	                                        }
	                                    }
	                                } catch (err) {
	                                    handleError(err.message, node);
	                                }
	                            }
	                            if (isSkip) {
	                                node.setAttribute("data-cssvars", "skip");
	                            }
	                            if (!node.hasAttribute("data-cssvars-job")) {
	                                node.setAttribute("data-cssvars-job", counters.job);
	                            }
	                        }));
	                        cssVarsSrcNodeCount = settings.rootElement.querySelectorAll('[data-cssvars]:not([data-cssvars="out"])').length;
	                        if (settings.shadowDOM) {
	                            var elms = [ settings.rootElement ].concat(_toConsumableArray(settings.rootElement.querySelectorAll("*")));
	                            for (var i = 0, elm; elm = elms[i]; ++i) {
	                                if (elm.shadowRoot && elm.shadowRoot.querySelector("style")) {
	                                    var shadowSettings = _extends({}, settings, {
	                                        rootElement: elm.shadowRoot
	                                    });
	                                    cssVars(shadowSettings);
	                                }
	                            }
	                        }
	                        if (settings.updateDOM && hasKeyframesWithVars) {
	                            fixKeyframes(settings.rootElement);
	                        }
	                        cssVarsIsRunning = false;
	                        settings.onComplete(outCssArray.join(""), outNodeArray, JSON.parse(JSON.stringify(variableStore.job)), getTimeStamp() - settings.__benchmark);
	                        handleFinally(outNodeArray.length);
	                    }
	                }
	            });
	        }
	    } else {
	        document.addEventListener("DOMContentLoaded", (function init(evt) {
	            cssVars(options);
	            document.removeEventListener("DOMContentLoaded", init);
	        }));
	    }
	}

	cssVars.reset = function() {
	    counters.job = 0;
	    counters.group = 0;
	    cssVarsIsRunning = false;
	    if (cssVarsObserver) {
	        cssVarsObserver.disconnect();
	        cssVarsObserver = null;
	    }
	    cssVarsSrcNodeCount = 0;
	    debounceTimer = null;
	    isShadowDOMReady = false;
	    for (var prop in variableStore) {
	        variableStore[prop] = {};
	    }
	};

	function addMutationObserver(settings) {
	    function isDisabled(node) {
	        var isDisabledAttr = node.hasAttribute("disabled");
	        var isDisabledSheet = (node.sheet || {}).disabled;
	        return isDisabledAttr || isDisabledSheet;
	    }
	    function isLink(node) {
	        var isStylesheet = node.tagName === "LINK" && (node.getAttribute("rel") || "").indexOf("stylesheet") !== -1;
	        return isStylesheet && !isDisabled(node);
	    }
	    function isStyle(node) {
	        return node.tagName === "STYLE" && !isDisabled(node);
	    }
	    function isValidAddMutation(mutationNodes) {
	        return Array.apply(null, mutationNodes).some((function(node) {
	            var isElm = node.nodeType === 1;
	            var hasAttr = isElm && node.hasAttribute("data-cssvars");
	            var isStyleWithVars = isStyle(node) && regex.cssVars.test(node.textContent);
	            var isValid = !hasAttr && (isLink(node) || isStyleWithVars);
	            return isValid;
	        }));
	    }
	    function isValidRemoveMutation(mutationNodes) {
	        return Array.apply(null, mutationNodes).some((function(node) {
	            var isElm = node.nodeType === 1;
	            var isOutNode = isElm && node.getAttribute("data-cssvars") === "out";
	            var isSrcNode = isElm && node.getAttribute("data-cssvars") === "src";
	            var isValid = isSrcNode;
	            if (isSrcNode || isOutNode) {
	                var dataGroup = node.getAttribute("data-cssvars-group");
	                var orphanNode = settings.rootElement.querySelector('[data-cssvars-group="'.concat(dataGroup, '"]'));
	                if (isSrcNode) {
	                    resetCssNodes(settings.rootElement);
	                    variableStore.dom = {};
	                }
	                if (orphanNode) {
	                    orphanNode.parentNode.removeChild(orphanNode);
	                }
	            }
	            return isValid;
	        }));
	    }
	    if (!window.MutationObserver) {
	        return;
	    }
	    if (cssVarsObserver) {
	        cssVarsObserver.disconnect();
	        cssVarsObserver = null;
	    }
	    cssVarsObserver = new MutationObserver((function(mutations) {
	        var hasValidMutation = mutations.some((function(mutation) {
	            var isValid = false;
	            if (mutation.type === "attributes") {
	                isValid = isLink(mutation.target);
	            } else if (mutation.type === "childList") {
	                isValid = isValidAddMutation(mutation.addedNodes) || isValidRemoveMutation(mutation.removedNodes);
	            }
	            return isValid;
	        }));
	        if (hasValidMutation) {
	            cssVars(settings);
	        }
	    }));
	    cssVarsObserver.observe(document.documentElement, {
	        attributes: true,
	        attributeFilter: [ "disabled", "href" ],
	        childList: true,
	        subtree: true
	    });
	}

	function cssVarsDebounced(settings) {
	    var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
	    clearTimeout(debounceTimer);
	    debounceTimer = setTimeout((function() {
	        settings.__benchmark = null;
	        cssVars(settings);
	    }), delay);
	}

	function fixKeyframes(rootElement) {
	    var animationNameProp = [ "animation-name", "-moz-animation-name", "-webkit-animation-name" ].filter((function(prop) {
	        return getComputedStyle(document.body)[prop];
	    }))[0];
	    if (animationNameProp) {
	        var allNodes = rootElement.getElementsByTagName("*");
	        var keyframeNodes = [];
	        var nameMarker = "__CSSVARSPONYFILL-KEYFRAMES__";
	        for (var i = 0, len = allNodes.length; i < len; i++) {
	            var node = allNodes[i];
	            var animationName = getComputedStyle(node)[animationNameProp];
	            if (animationName !== "none") {
	                node.style[animationNameProp] += nameMarker;
	                keyframeNodes.push(node);
	            }
	        }
	        void document.body.offsetHeight;
	        for (var _i = 0, _len = keyframeNodes.length; _i < _len; _i++) {
	            var nodeStyle = keyframeNodes[_i].style;
	            nodeStyle[animationNameProp] = nodeStyle[animationNameProp].replace(nameMarker, "");
	        }
	    }
	}

	function fixRelativeCssUrls(cssText, baseUrl) {
	    var cssUrls = cssText.replace(regex.cssComments, "").match(regex.cssUrls) || [];
	    cssUrls.forEach((function(cssUrl) {
	        var oldUrl = cssUrl.replace(regex.cssUrls, "$1");
	        var newUrl = getFullUrl$1(oldUrl, baseUrl);
	        cssText = cssText.replace(cssUrl, cssUrl.replace(oldUrl, newUrl));
	    }));
	    return cssText;
	}

	function fixVarNames() {
	    var varObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var reLeadingHyphens = /^-{2}/;
	    return Object.keys(varObj).reduce((function(obj, value) {
	        var key = reLeadingHyphens.test(value) ? value : "--".concat(value.replace(/^-+/, ""));
	        obj[key] = varObj[value];
	        return obj;
	    }), {});
	}

	function getFullUrl$1(url) {
	    var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : location.href;
	    var d = document.implementation.createHTMLDocument("");
	    var b = d.createElement("base");
	    var a = d.createElement("a");
	    d.head.appendChild(b);
	    d.body.appendChild(a);
	    b.href = base;
	    a.href = url;
	    return a.href;
	}

	function getTimeStamp() {
	    return isBrowser && (window.performance || {}).now ? window.performance.now() : (new Date).getTime();
	}

	function resetCssNodes(rootElement) {
	    var resetNodes = Array.apply(null, rootElement.querySelectorAll('[data-cssvars="skip"],[data-cssvars="src"]'));
	    resetNodes.forEach((function(node) {
	        return node.setAttribute("data-cssvars", "");
	    }));
	}

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
	  from: arrayFrom
	});

	var from_1 = path.Array.from;

	var from_1$1 = from_1;

	var from_1$2 = from_1$1;

	/** @module DOM */

	/* global HTMLElement, HTMLDocument, Window, Element */
	var document$3 = window.document;
	/**
	 * Static interface for interacting with the DOM API.
	 * @namespace
	 */

	var DOM =
	/*#__PURE__*/
	function () {
	  function DOM() {}

	  DOM.setup = function setup(d, p) {
	    document$3 = d;
	  }
	  /**
	   * create a HTMLElement from and HTML string
	   * @param {string} html The HTML to parse to a DOM node.
	   * @return {HTMLElement}
	   */
	  ;

	  DOM.create = function create(html) {
	    if ('createRange' in document$3) {
	      // prefer this implementation as it has wider browser support
	      // and it's better performing.
	      // see https://davidwalsh.name/convert-html-stings-dom-nodes
	      var container = document$3.createElement('div');
	      var frag = document$3.createRange().createContextualFragment(html);
	      container.appendChild(frag);
	      return container;
	    } // fallback to this because of a bug in jsdom that causes tests to fail
	    // see: https://github.com/jsdom/jsdom/issues/399


	    return new DOMParser().parseFromString(html, 'text/html').body;
	  }
	  /**
	   * query the DOM for a given css selector
	   * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
	   * @param {string} selector the CSS selector to query for
	   *
	   * @returns {HTMLElement} the FIRST node it finds, if any
	   */
	  ;

	  DOM.query = function query(parent, selector) {
	    // Facade, shifting the selector to the parent argument if only one
	    // argument is provided
	    if (selector === undefined) {
	      selector = parent;
	      parent = document$3;
	    }

	    if (selector instanceof HTMLElement || selector instanceof Window || selector instanceof HTMLDocument) {
	      return selector;
	    }

	    return parent.querySelector(selector);
	  }
	  /**
	   * query the DOM for a given css selector
	   * @param {HTMLElement} parent Optional context to use for a search. Defaults to document if not provided.
	   * @param {string} selector the CSS selector to query for
	   *
	   * @returns {Array} the FIRST node it finds, if any
	   */
	  ;

	  DOM.queryAll = function queryAll(parent, selector) {
	    // Facade, shifting the selector to the parent argument if only one
	    // argument is provided
	    if (selector === undefined) {
	      selector = parent;
	      parent = document$3;
	    } // handle the case where client code is using a pointer to a dom node and it's null, e.g. this._container


	    if (parent == null) {
	      parent = document$3;
	    }

	    if (selector instanceof HTMLElement || selector instanceof HTMLDocument || selector instanceof Window) {
	      return [selector];
	    }

	    return from_1$2(parent.querySelectorAll(selector));
	  };

	  DOM.onReady = function onReady(cb) {
	    if (document$3.readyState === 'complete' || document$3.readyState === 'loaded' || document$3.readyState === 'interactive') {
	      cb();
	      return;
	    }

	    DOM.on(document$3, 'DOMContentLoaded', cb);
	  }
	  /**
	   * createEle will create a {HTMLElement} and apply the properties attributes through an object provided.
	   * @param {string} el The element `tag` name to construct
	   * @param {Object} opts_data Optional attributes to apply to the new HTMLElement
	   */
	  ;

	  DOM.createEl = function createEl(el, opts_data) {
	    if (opts_data === void 0) {
	      opts_data = {};
	    }

	    var node = document$3.createElement(el);

	    var props = keys$5(opts_data);

	    for (var i = 0; i < props.length; i++) {
	      if (props[i] === 'class') {
	        DOM.addClass(node, opts_data[props[i]]);
	        continue;
	      }

	      node[props[i]] = opts_data[props[i]];
	    }

	    return node;
	  };

	  DOM.append = function append(parent, node) {
	    if (node === undefined) {
	      node = parent;
	      parent = document$3;
	    }

	    if (typeof parent === 'string') {
	      parent = DOM.query(parent);
	    } // Support HTML injection as well as HTMLElement appends


	    if (typeof node === 'string') {
	      parent.insertAdjacentHTML('afterBegin', node);
	    } else {
	      parent.appendChild(node);
	    }
	  };

	  DOM.addClass = function addClass(node, className) {
	    if (!node) {
	      return;
	    }

	    var classes = className.split(',');
	    var len = classes.length;

	    for (var i = 0; i < len; i++) {
	      node.classList.add(classes[i]);
	    }
	  };

	  DOM.empty = function empty(parent) {
	    parent.innerHTML = '';
	  };

	  DOM.css = function css(selector, styles) {
	    var node = DOM.query(selector);

	    for (var prop in styles) {
	      node.style[prop] = styles[prop];
	    }
	  };

	  DOM.attr = function attr(selector, _attr, val) {
	    DOM.query(selector).setAttribute(_attr, val);
	  };

	  DOM.attributes = function attributes(selector, attrs) {
	    var _context,
	        _this = this;

	    forEach$4(_context = entries$2(attrs)).call(_context, function (_ref) {
	      var attr = _ref[0],
	          val = _ref[1];
	      return _this.attr(selector, attr, val);
	    });
	  };

	  DOM.trigger = function trigger(selector, event, settings) {
	    var e = DOM._customEvent(event, settings);

	    DOM.query(selector).dispatchEvent(e);
	  } // TODO (agrow) investigate removing this
	  // Event constructor polyfill
	  ;

	  DOM._customEvent = function _customEvent(event, settings) {
	    var _settings = objectSpread({
	      bubbles: true,
	      cancelable: true,
	      detail: null
	    }, settings);

	    var evt = document$3.createEvent('CustomEvent');
	    evt.initCustomEvent(event, _settings.bubbles, _settings.cancelable, _settings.detail);
	    return evt;
	  };

	  DOM.on = function on(selector, evt, handler) {
	    DOM.query(selector).addEventListener(evt, handler);
	  };

	  DOM.once = function once(selector, evt, handler) {
	    DOM.query(selector).addEventListener(evt, handler, {
	      once: true
	    });
	  };

	  DOM.off = function off(selector, evt, handler) {
	    DOM.query(selector).removeEventListener(evt, handler);
	  };

	  DOM.delegate = function delegate(ctxt, selector, evt, handler) {
	    var el = DOM.query(ctxt);
	    el.addEventListener(evt, function (event) {
	      var target = event.target;

	      while (!target.isEqualNode(el)) {
	        if (DOM.matches(target, selector)) {
	          handler(event, target);
	          break;
	        }

	        target = target.parentNode;
	      }
	    });
	  } // TODO (agrow) investigate removing this
	  // Element.matches polyfill
	  ;

	  DOM.matches = function matches(element, potentialMatch) {
	    if (Element.prototype.matches) {
	      return element.matches(potentialMatch);
	    }

	    if (Element.prototype.msMatchesSelector) {
	      return element.msMatchesSelector(potentialMatch);
	    }

	    if (Element.prototype.webkitMatchesSelector) {
	      return element.webkitMatchesSelector(potentialMatch);
	    }
	  };

	  return DOM;
	}();

	var indexOf$4 = indexOf_1;

	var indexOf$5 = indexOf$4;

	var urlSearchParams = path.URLSearchParams;

	var urlSearchParams$1 = urlSearchParams;

	var urlSearchParams$2 = urlSearchParams$1;

	/** @module SearchParams */

	/* global window */

	/**
	 * SearchParams is a class to get the search params in a URL.
	 * It is a replacement for URL.searchParams and URLSearchParams for browsers like IE11
	 */
	var SearchParams =
	/*#__PURE__*/
	function () {
	  function SearchParams(url) {
	    /**
	     * Mapping of all query parameters in the given url, query param -> value
	     * Only used if URLSearchParams does not exist in the window
	     * @type {Object}
	     * @private
	     */
	    this._params = {};

	    if (window && window.URLSearchParams) {
	      return new urlSearchParams$2(url);
	    } else {
	      this._params = this.parse(url);
	    }
	  }
	  /**
	   * parse creates a mapping of all query params in a given url
	   * The query param values are decoded before being put in the map
	   * Three types of input are supported
	   *   (1) full URL e.g. http://www.yext.com/?q=hello
	   *   (2) params with ? e.g. ?q=hello
	   *   (1) params without ? e.g. q=hello
	   * @param {string} url The url
	   * @returns {Object} mapping from query param -> value where value is '' if no value is provided
	   */


	  var _proto = SearchParams.prototype;

	  _proto.parse = function parse(url) {
	    var params = {};
	    var search = url;

	    if (!search) {
	      return params;
	    } // Normalize all url inputs to string of query params separated by &


	    if (indexOf$5(url).call(url, '?') > -1) {
	      search = slice$3(url).call(url, indexOf$5(url).call(url, '?') + 1);
	    }

	    var encodedParams = search.split('&');

	    for (var i = 0; i < encodedParams.length; i++) {
	      var keyVal = encodedParams[i].split('=');

	      if (keyVal.length > 1) {
	        params[keyVal[0]] = SearchParams.decode(keyVal[1]);
	      } else {
	        params[keyVal[0]] = '';
	      }
	    }

	    return params;
	  }
	  /**
	   * get returns the value of the given query param
	   * @param {string} query the query param key to get the value of
	   * @return {string} param value, null otherwise
	   */
	  ;

	  _proto.get = function get(query) {
	    if (typeof this._params[String(query)] === 'undefined') {
	      return null;
	    }

	    return this._params[query];
	  }
	  /**
	   * set changes the value of a given query param
	   * @param {string} name the query param key
	   * @param {string} value the value of the query param update with
	   */
	  ;

	  _proto.set = function set(name, value) {
	    this._params[String(name)] = String(value);
	  }
	  /**
	   * has checks to see if the given query param key exists in the params object
	   * @param {string} query the query param to check
	   * @return {boolean} true if the query param is in the params object, false o/w
	   */
	  ;

	  _proto.has = function has(query) {
	    return query in this._params;
	  }
	  /**
	   * delete removes the given query param and its associated value from the params object
	   * @param {string} name the query param key
	   */
	  ;

	  _proto["delete"] = function _delete(name) {
	    delete this._params[String(name)];
	  }
	  /**
	   * toString returns a url with all the query params in the params object (without a ?)
	   * @return {string}
	   */
	  ;

	  _proto.toString = function toString() {
	    var string = [];

	    for (var key in this._params) {
	      string.push(key + "=" + SearchParams.encode(this._params[key]));
	    }

	    return string.join('&');
	  };

	  _proto.entries = function entries() {
	    var entries = [];

	    for (var key in this._params) {
	      entries.push([key, this._params[key]]);
	    }

	    return entries;
	  }
	  /**
	   * decode returns the decoded representation of the given string
	   * @param {string} string the string to decode
	   * @return {string}
	   */
	  ;

	  SearchParams.decode = function decode(string) {
	    return decodeURIComponent(string.replace(/[ +]/g, '%20'));
	  }
	  /**
	   * decode returns the encoded representation of the given string (e.g. + -> %2B)
	   * @param {string} string the string to encode
	   * @return {string}
	   */
	  ;

	  SearchParams.encode = function encode(string) {
	    var replace = {
	      '!': '%21',
	      "'": '%27',
	      '(': '%28',
	      ')': '%29',
	      '%20': '+'
	    };
	    return encodeURIComponent(string).replace(/[!'()]|%20/g, function (match) {
	      return replace[match];
	    });
	  };

	  return SearchParams;
	}();

	/** @module Renderer */

	/**
	 * Renderer is an abstract class that all Renderers should extend and implement
	 */
	var Renderer =
	/*#__PURE__*/
	function () {
	  function Renderer() {}

	  var _proto = Renderer.prototype;

	  /**
	   * render is a core method for all renderers.
	   * All implementations should override this class
	   * @param {string} template
	   * @param {object} data
	   */
	  _proto.render = function render(template, data) {
	    return template;
	  };

	  _proto.registerHelper = function registerHelper(name, cb) {};

	  _proto.registerTemplate = function registerTemplate(templateName, template) {};

	  _proto.compile = function compile(template) {};

	  return Renderer;
	}();

	// a string of all valid unicode whitespaces
	// eslint-disable-next-line max-len
	var whitespaces = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

	var whitespace = '[' + whitespaces + ']';
	var ltrim = RegExp('^' + whitespace + whitespace + '*');
	var rtrim = RegExp(whitespace + whitespace + '*$');

	// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
	var createMethod$5 = function (TYPE) {
	  return function ($this) {
	    var string = String(requireObjectCoercible($this));
	    if (TYPE & 1) string = string.replace(ltrim, '');
	    if (TYPE & 2) string = string.replace(rtrim, '');
	    return string;
	  };
	};

	var stringTrim = {
	  // `String.prototype.{ trimLeft, trimStart }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart
	  start: createMethod$5(1),
	  // `String.prototype.{ trimRight, trimEnd }` methods
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend
	  end: createMethod$5(2),
	  // `String.prototype.trim` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.trim
	  trim: createMethod$5(3)
	};

	var trim = stringTrim.trim;


	var $parseInt = global_1.parseInt;
	var hex = /^[+-]?0[Xx]/;
	var FORCED$6 = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	var numberParseInt = FORCED$6 ? function parseInt(string, radix) {
	  var S = trim(String(string));
	  return $parseInt(S, (radix >>> 0) || (hex.test(S) ? 16 : 10));
	} : $parseInt;

	// `parseInt` method
	// https://tc39.github.io/ecma262/#sec-parseint-string-radix
	_export({ global: true, forced: parseInt != numberParseInt }, {
	  parseInt: numberParseInt
	});

	var _parseInt = path.parseInt;

	var _parseInt$1 = _parseInt;

	var _parseInt$2 = _parseInt$1;

	var nativeStartsWith = ''.startsWith;
	var min$2 = Math.min;

	var CORRECT_IS_REGEXP_LOGIC = correctIsRegexpLogic('startsWith');

	// `String.prototype.startsWith` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
	_export({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC }, {
	  startsWith: function startsWith(searchString /* , position = 0 */) {
	    var that = String(requireObjectCoercible(this));
	    notARegexp(searchString);
	    var index = toLength(min$2(arguments.length > 1 ? arguments[1] : undefined, that.length));
	    var search = String(searchString);
	    return nativeStartsWith
	      ? nativeStartsWith.call(that, search, index)
	      : that.slice(index, index + search.length) === search;
	  }
	});

	var startsWith = entryVirtual('String').startsWith;

	var StringPrototype$1 = String.prototype;

	var startsWith_1 = function (it) {
	  var own = it.startsWith;
	  return typeof it === 'string' || it === StringPrototype$1
	    || (it instanceof String && own === StringPrototype$1.startsWith) ? startsWith : own;
	};

	var startsWith$1 = startsWith_1;

	var startsWith$2 = startsWith$1;

	var $some = arrayIteration.some;



	var STRICT_METHOD$5 = arrayMethodIsStrict('some');
	var USES_TO_LENGTH$8 = arrayMethodUsesToLength('some');

	// `Array.prototype.some` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.some
	_export({ target: 'Array', proto: true, forced: !STRICT_METHOD$5 || !USES_TO_LENGTH$8 }, {
	  some: function some(callbackfn /* , thisArg */) {
	    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var some = entryVirtual('Array').some;

	var ArrayPrototype$c = Array.prototype;

	var some_1 = function (it) {
	  var own = it.some;
	  return it === ArrayPrototype$c || (it instanceof Array && own === ArrayPrototype$c.some) ? some : own;
	};

	var some$1 = some_1;

	var some$2 = some$1;

	var SVGIcon =
	/*#__PURE__*/
	function () {
	  /**
	   * @param config
	   * @param config.name
	   * @param config.path
	   * @param config.complexContents
	   * @param config.viewBox
	   * @constructor
	   */
	  function SVGIcon(config) {
	    /**
	     * the name of the icon
	     */
	    this.name = config.name;
	    /**
	     * an svg path definition
	     */

	    this.path = config.path;
	    /**
	     * if not using a path, a the markup for a complex SVG
	     */

	    this.complexContents = config.complexContents;
	    /**
	     * the view box definition, defaults to 24x24
	     * @type {string}
	     */

	    this.viewBox = config.viewBox || '0 0 24 24';
	    /**
	     * actual contents used
	     */

	    this.contents = this.pathDefinition();
	  }

	  var _proto = SVGIcon.prototype;

	  _proto.pathDefinition = function pathDefinition() {
	    if (this.complexContents) {
	      return this.complexContents;
	    }

	    return "<path d=\"" + this.path + "\"></path>";
	  };

	  _proto.parseContents = function parseContents(complexContentsParams) {
	    var contents = this.contents;

	    if (typeof contents === 'function') {
	      contents = contents(complexContentsParams);
	    }

	    return "<svg viewBox=\"" + this.viewBox + "\" xmlns=\"http://www.w3.org/2000/svg\">" + contents + "</svg>";
	  }
	  /**
	   * returns the svg markup
	   */
	  ;

	  _proto.markup = function markup() {
	    var _this = this;

	    if (typeof this.contents === 'function') {
	      return function (complexContentsParams) {
	        return _this.parseContents(complexContentsParams);
	      };
	    }

	    return this.parseContents();
	  };

	  return SVGIcon;
	}();

	var thumbIcon = new SVGIcon({
	  name: 'thumb',
	  viewBox: '0 0 24 22',
	  path: 'M15.273 1H5.455c-.906 0-1.68.55-2.008 1.342L.153 10.097A2.19 2.19 0 000 10.9v2.2c0 1.21.982 2.2 2.182 2.2h6.883L8.03 20.327l-.033.352c0 .451.186.869.48 1.166L9.633 23l7.178-7.249a2.16 2.16 0 00.644-1.551v-11c0-1.21-.982-2.2-2.182-2.2zm0 13.2l-4.735 4.774L11.75 13.1H2.182v-2.2l3.273-7.7h9.818v11zM19.636 1H24v13.2h-4.364V1z'
	});

	var receiptIcon = new SVGIcon({
	  name: 'receipt',
	  path: 'M14.606 9.5c-.671-.515-1.591-.833-2.606-.833 1.015 0 1.935.318 2.606.833zm-7.985 0H1.655A1.66 1.66 0 010 7.833V3.667C0 2.747.741 2 1.655 2h20.69A1.66 1.66 0 0124 3.667v4.166A1.66 1.66 0 0122.345 9.5h-4.966V22H6.621V9.5h2.773H6.62zm10.758-1.667h4.966V3.667H1.655v4.166h4.966v-2.5h10.758v2.5z'
	});

	var pantheonIcon = new SVGIcon({
	  name: 'pantheon',
	  path: 'M9.947 16.598h.252V9.412h-.252a.432.432 0 01-.23-.065c-.07-.043-.106-.093-.106-.15L9.15 7.82v-.15c0-.044.028-.08.084-.109a.691.691 0 01.105-.086.254.254 0 01.146-.043H13.6c.056 0 .104.015.146.043.042.03.091.058.147.086a.271.271 0 01.063.108c.014.043.007.093-.02.15l-.42 1.378a.374.374 0 01-.147.15.37.37 0 01-.19.065h-.251v7.186h.252a.37.37 0 01.189.065c.07.043.119.093.147.15l.42 1.378c.027.028.034.071.02.129a.275.275 0 01-.063.129 1.364 1.364 0 00-.147.086.254.254 0 01-.146.043H9.485a.254.254 0 01-.146-.043.691.691 0 01-.105-.086c-.056-.029-.084-.072-.084-.13v-.128l.461-1.377c0-.058.035-.108.105-.151a.432.432 0 01.231-.065zm5.792 0h.252V9.412h-.252a.432.432 0 01-.23-.065.374.374 0 01-.148-.15l-.42-1.377c-.027-.029-.034-.072-.02-.13a.275.275 0 01.063-.129c.056-.028.105-.057.146-.086a.254.254 0 01.147-.043h4.114c.055 0 .104.015.146.043a.691.691 0 01.105.086c.056.03.084.072.084.13v.129l-.42 1.377a.374.374 0 01-.146.15.432.432 0 01-.231.065h-.21v7.186h.21a.43.43 0 01.23.065c.07.043.12.093.148.15l.42 1.378v.15c0 .043-.029.08-.085.108a.691.691 0 01-.105.086.254.254 0 01-.146.043h-4.114a.254.254 0 01-.147-.043 1.364 1.364 0 00-.146-.086.271.271 0 01-.063-.108c-.014-.043-.007-.093.02-.15l.42-1.377a.374.374 0 01.147-.151.432.432 0 01.231-.065zm-11.794-.086h.252V9.498h-.252a.334.334 0 01-.21-.065.386.386 0 01-.126-.193l-.42-1.377a.248.248 0 01-.02-.172.854.854 0 01.063-.173c.028-.057.07-.1.126-.129a.365.365 0 01.168-.043h4.07c.057 0 .113.015.169.043a.278.278 0 01.126.13.854.854 0 01.062.172.248.248 0 01-.02.172l-.42 1.377a.386.386 0 01-.126.193.334.334 0 01-.21.065h-.21v7.014h.21c.084 0 .154.029.21.086a.673.673 0 01.126.172l.42 1.378a.248.248 0 01.02.172.854.854 0 01-.062.172.278.278 0 01-.126.129.365.365 0 01-.168.043H3.526a.365.365 0 01-.168-.043.278.278 0 01-.126-.13.854.854 0 01-.063-.171.248.248 0 01.02-.172l.42-1.378a.673.673 0 01.126-.172.281.281 0 01.21-.086zM1.763 6.658a.717.717 0 01-.504-.194.644.644 0 01-.21-.495v-.43a.73.73 0 01.105-.387.68.68 0 01.273-.259C4.309 3.402 6.54 2.276 8.121 1.515 9.702.755 10.493.361 10.493.332c.531-.258.972-.366 1.322-.323.35.043.734.165 1.154.366l8.31 4.518c.14.058.245.144.315.259a.73.73 0 01.105.387v.43c0 .201-.07.366-.21.495a.717.717 0 01-.504.194H1.763zm-.714 13.34a.54.54 0 01.168-.387.516.516 0 01.378-.172h19.642c.168 0 .308.057.42.172a.541.541 0 01.168.387v.818a.522.522 0 01-.168.408.605.605 0 01-.42.151H1.595a.551.551 0 01-.378-.15.522.522 0 01-.168-.41v-.817zm21.405 2.022c.14 0 .266.058.378.173a.592.592 0 01.168.43v.818a.541.541 0 01-.168.387.516.516 0 01-.378.172L.546 23.957a.516.516 0 01-.378-.172.541.541 0 01-.168-.387v-.818a.59.59 0 01.168-.43.516.516 0 01.378-.173l21.908.043z'
	});

	var micIcon = new SVGIcon({
	  name: 'mic',
	  path: 'M12 15c1.66 0 2.99-1.34 2.99-3L15 6c0-1.66-1.34-3-3-3S9 4.34 9 6v6c0 1.66 1.34 3 3 3zm5.3-3c0 3-2.54 5.1-5.3 5.1S6.7 15 6.7 12H5c0 3.41 2.72 6.23 6 6.72V22h2v-3.28c3.28-.48 6-3.3 6-6.72h-1.7z'
	});

	var directionsIcon = new SVGIcon({
	  name: 'directions',
	  path: 'M23.649 11.154L12.846.35a1.195 1.195 0 00-1.692 0L.35 11.154a1.195 1.195 0 000 1.692L11.154 23.65a1.195 1.195 0 001.692 0L23.65 12.846c.468-.456.468-1.212 0-1.692zm-9.254 3.853v-3.001H9.593v3.6h-2.4v-4.8c0-.66.54-1.2 1.2-1.2h6.002V6.604l4.2 4.2-4.2 4.202z'
	});

	var calendarIcon = new SVGIcon({
	  name: 'calendar',
	  path: 'M18.111 13.2H12v6h6.111v-6zM16.89 0v2.4H7.11V0H4.667v2.4H3.444c-1.356 0-2.432 1.08-2.432 2.4L1 21.6C1 22.92 2.088 24 3.444 24h17.112C21.9 24 23 22.92 23 21.6V4.8c0-1.32-1.1-2.4-2.444-2.4h-1.223V0H16.89zm3.667 21.6H3.444V8.4h17.112v13.2z'
	});

	var calloutIcon = new SVGIcon({
	  name: 'callout',
	  path: 'M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18z'
	});

	var infoIcon = new SVGIcon({
	  name: 'info',
	  path: 'M12 8.4A1.2 1.2 0 1012 6a1.2 1.2 0 000 2.4zM12 0c6.624 0 12 5.376 12 12s-5.376 12-12 12S0 18.624 0 12 5.376 0 12 0zm0 18c.66 0 1.2-.54 1.2-1.2V12c0-.66-.54-1.2-1.2-1.2-.66 0-1.2.54-1.2 1.2v4.8c0 .66.54 1.2 1.2 1.2z'
	});

	var briefcaseIcon = new SVGIcon({
	  name: 'briefcase',
	  path: 'M20 7h-4V5c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 20c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V9c0-1.11-.89-2-2-2zm-6 0h-4V5h4v2z'
	});

	var kabobIcon = new SVGIcon({
	  name: 'kabob',
	  viewBox: '0 0 3 11',
	  complexContents: "<circle cx=\"1.5\" cy=\"1.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"5.5\" r=\"1.5\"/><circle cx=\"1.5\" cy=\"9.5\" r=\"1.5\"/>"
	});

	var personIcon = new SVGIcon({
	  name: 'person',
	  viewBox: '0 0 18 18',
	  path: 'M9 9c2.486 0 4.5-2.014 4.5-4.5S11.486 0 9 0a4.499 4.499 0 00-4.5 4.5C4.5 6.986 6.514 9 9 9zm0 2.25c-3.004 0-9 1.508-9 4.5v1.125C0 17.494.506 18 1.125 18h15.75c.619 0 1.125-.506 1.125-1.125V15.75c0-2.992-5.996-4.5-9-4.5z'
	});

	var magnifyingGlassIcon = new SVGIcon({
	  name: 'magnifying_glass',
	  path: 'M16.124 13.051a5.154 5.154 0 110-10.308 5.154 5.154 0 010 10.308M16.114 0a7.886 7.886 0 00-6.46 12.407L0 22.06 1.94 24l9.653-9.653A7.886 7.886 0 1016.113 0'
	});

	var officeIcon = new SVGIcon({
	  name: 'office',
	  path: 'M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z'
	});

	var linkIcon = new SVGIcon({
	  name: 'link',
	  path: 'M2.28 12A3.723 3.723 0 016 8.28h4.8V6H6c-3.312 0-6 2.688-6 6s2.688 6 6 6h4.8v-2.28H6A3.723 3.723 0 012.28 12zm4.92 1.2h9.6v-2.4H7.2v2.4zM18 6h-4.8v2.28H18A3.723 3.723 0 0121.72 12 3.723 3.723 0 0118 15.72h-4.8V18H18c3.312 0 6-2.688 6-6s-2.688-6-6-6z'
	});

	var windowIcon = new SVGIcon({
	  name: 'window',
	  path: 'M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z'
	});

	var phoneIcon = new SVGIcon({
	  name: 'phone',
	  path: 'M4.827 10.387a20.198 20.198 0 008.786 8.786l2.934-2.933c.36-.36.893-.48 1.36-.32a15.21 15.21 0 004.76.76c.733 0 1.333.6 1.333 1.333v4.654C24 23.4 23.4 24 22.667 24 10.147 24 0 13.853 0 1.333 0 .6.6 0 1.333 0H6c.733 0 1.333.6 1.333 1.333 0 1.667.267 3.267.76 4.76.147.467.04.987-.333 1.36l-2.933 2.934z'
	});

	var tagIcon = new SVGIcon({
	  name: 'tag',
	  viewBox: '0 0 18 18',
	  path: 'M17.469 8.622l-8.1-8.1A1.789 1.789 0 008.1 0H1.8C.81 0 0 .81 0 1.8v6.3c0 .495.198.945.531 1.278l8.1 8.1c.324.324.774.522 1.269.522a1.76 1.76 0 001.269-.531l6.3-6.3A1.76 1.76 0 0018 9.9c0-.495-.207-.954-.531-1.278zM3.15 4.5c-.747 0-1.35-.603-1.35-1.35 0-.747.603-1.35 1.35-1.35.747 0 1.35.603 1.35 1.35 0 .747-.603 1.35-1.35 1.35z'
	});

	var documentIcon = new SVGIcon({
	  name: 'document',
	  path: 'M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-1 9H9V9h10v2zm-4 4H9v-2h6v2zm4-8H9V5h10v2z'
	});

	var chevronIcon = new SVGIcon({
	  name: 'chevron',
	  viewBox: '0 0 7 9',
	  complexContents: "<g fill-rule=\"evenodd\" transform=\"translate(-1 -8)\"><path d=\"m2.6417004 8-1.1417004 1.0575 3.70850202 3.4425-3.70850202 3.4425 1.1417004 1.0575 4.8582996-4.5z\"/></g>"
	});

	var supportIcon = new SVGIcon({
	  name: 'support',
	  path: 'M12,0 C5.376,0 0,5.376 0,12 C0,18.624 5.376,24 12,24 C18.624,24 24,18.624 24,12 C24,5.376 18.624,0 12,0 Z M13,19 L11,19 L11,17 L13,17 L13,19 Z M15.07,11.25 L14.17,12.17 C13.45,12.9 13,13.5 13,15 L11,15 L11,14.5 C11,13.4 11.45,12.4 12.17,11.67 L13.41,10.41 C13.78,10.05 14,9.55 14,9 C14,7.9 13.1,7 12,7 C10.9,7 10,7.9 10,9 L8,9 C8,6.79 9.79,5 12,5 C14.21,5 16,6.79 16,9 C16,9.88 15.64,10.68 15.07,11.25 Z'
	});

	var yextIcon = new SVGIcon({
	  name: 'yext',
	  viewBox: '0 0 30 30',
	  path: 'M25.517 28.142v.095h-.204v.905h-.066v-.905h-.197v-.095h.467zm.667 0h.066v1h-.066v-.825l-.24.595h-.013l-.24-.595v.825h-.066v-1h.066l.247.61.246-.61zM15 28.8c7.622 0 13.8-6.178 13.8-13.8 0-7.622-6.178-13.8-13.8-13.8C7.378 1.2 1.2 7.378 1.2 15c0 7.622 6.178 13.8 13.8 13.8zM15 0c8.284 0 15 6.716 15 15 0 8.284-6.716 15-15 15-8.284 0-15-6.716-15-15C0 6.716 6.716 0 15 0zm.45 16.65v-1.2h6.6v1.2h-2.7v5.4h-1.2v-5.4h-2.7zm-1.599-1.35l.849.849-2.601 2.601 2.601 2.601-.849.849-2.601-2.601L8.649 22.2l-.849-.849 2.601-2.601L7.8 16.149l.849-.849 2.601 2.601 2.601-2.601zM18.675 9a2.175 2.175 0 00-1.847 3.323l2.995-2.995A2.163 2.163 0 0018.675 9zm0 5.55a3.375 3.375 0 112.833-5.209l-3.789 3.788a2.175 2.175 0 003.13-1.954h1.201a3.375 3.375 0 01-3.375 3.375zm-7.425-3.734L13.78 7.8l.92.771-2.85 3.397v2.582h-1.2v-2.582L7.8 8.57l.92-.771 2.53 3.016z'
	});

	var pinIcon = new SVGIcon({
	  name: 'pin',
	  viewBox: '5 0 9 18',
	  path: 'm9.375 0c-3.52446429 0-6.375 2.817-6.375 6.3 0 4.725 6.375 11.7 6.375 11.7s6.375-6.975 6.375-11.7c0-3.483-2.8505357-6.3-6.375-6.3zm.00000018 8.55000007c-1.25678576 0-2.27678579-1.008-2.27678579-2.25s1.02000003-2.25 2.27678579-2.25c1.25678572 0 2.27678582 1.008 2.27678582 2.25s-1.0200001 2.25-2.27678582 2.25z'
	});

	var gearIcon = new SVGIcon({
	  name: 'gear',
	  path: 'M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42a.353.353 0 01.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16a.353.353 0 01-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z'
	});

	var lightBulbIcon = new SVGIcon({
	  name: 'light_bulb',
	  viewBox: '0 0 32 35',
	  path: 'M11.585 31.056l8.38-.493v-.986l-8.38.493zM11.585 33.028L15.775 35l4.19-1.972V31.55l-8.38.493v.986zm6.926-.407l-2.736 1.29-2.13-1.004 4.866-.286zM15.775 7.394c-4.63 0-8.38 3.205-8.38 8.38 0 5.177 4.19 6.902 4.19 12.818v.493l8.38-.493c0-5.916 4.19-8.188 4.19-12.817a8.38 8.38 0 00-8.38-8.38zm5.617 13.48c-1.025 1.837-2.174 3.892-2.381 6.786l-6.44.38c-.129-3.01-1.29-5.021-2.32-6.808-.493-.8-.928-1.636-1.299-2.5h13.556c-.325.708-.704 1.403-1.116 2.142zm1.479-3.128H8.627a7.793 7.793 0 01-.247-1.971c0-4.353 3.042-7.395 7.395-7.395a7.394 7.394 0 017.394 7.395 6.739 6.739 0 01-.3 1.971h.002zM26.62 15.282h4.93v1h-4.93zM23.094 7.756l2.091-2.091.698.697-2.092 2.092zM15.282 0h1v4.93h-1zM5.666 6.362l.697-.697 2.091 2.091-.697.697zM0 15.282h4.93v1H0z'
	});

	var starIcon = new SVGIcon({
	  name: 'star',
	  viewBox: '0 0 18 18',
	  path: 'M8.991 0C4.023 0 0 4.032 0 9s4.023 9 8.991 9C13.968 18 18 13.968 18 9s-4.032-9-9.009-9zm3.816 14.4L9 12.105 5.193 14.4l1.008-4.329-3.357-2.907 4.428-.378L9 2.7l1.728 4.077 4.428.378-3.357 2.907z'
	});

	var close = new SVGIcon({
	  name: 'close',
	  viewBox: '0 1 24 24',
	  complexContents: "\n    <path d=\"M7 8l9.716 9.716m0-9.716L7 17.716\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"/>\n  "
	});

	var elements = new SVGIcon({
	  name: 'elements',
	  path: 'M13,15 L13,17 L21,17 L21,19 L13,19 L13,21 L11,21 L11,15 L13,15 Z M9,17 L9,19 L3,19 L3,17 L9,17 Z M9,15 L7,15 L7,13 L3,13 L3,11 L7,11 L7,9 L9,9 L9,15 Z M21,11 L21,13 L11,13 L11,11 L21,11 Z M17,3 L17,5 L21,5 L21,7 L17,7 L17,9 L15,9 L15,3 L17,3 Z M13,5 L13,7 L3,7 L3,5 L13,5 Z'
	});

	var yextAnimatedForward = new SVGIcon({
	  name: 'yext_animated_reverse',
	  viewBox: '0 0 72 72',
	  complexContents: function complexContents(params) {
	    if (params === void 0) {
	      params = {};
	    }

	    var iconPrefix = params.iconPrefix || 'yxt';
	    return "<defs>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-1\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-2\">\n        <rect x=\"-144.3\" y=\"144.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-3\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M489.8 277.4c0 0 78 18.8 78 18.8c0 0-96.1 61.5-96.1 61.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-13.9 14-13.9 14m-67.8-108.1c0 0 73.9 1.3 73.9 1.3c0 0-33.8 54.5-33.8 54.5c0 0 18.6-3.2 18.6-3.2c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-32.1 9.8-32.1 9.8\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-4\">\n        <rect x=\"-91.1\" y=\"91.1\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-5\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M488.4 291.4c0 0 40.5 39.3 40.5 39.3c0 0-57.2 27-57.2 27c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-15.3 28-15.3 28m-90.5-97.4c0 0 52-11.3 52-11.3c0 0-6 45.2-6 45.2c0 0 36.8-6 36.8-6c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-56.2 34.5-56.2 34.5\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-6\">\n        <rect x=\"-61.3\" y=\"61.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-7\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M481.8 298.4c0 0 27.5 39.8 27.5 39.8c0 0-37.6 19.5-37.6 19.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-21.9 35-21.9 35m-108.1-79.7c0 0 30.2-23.8 30.2-23.8c0 0 21.7 35.9 21.7 35.9c0 0 55.1-8.9 55.1-8.9c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-80.4 59.2-80.4 59.2\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-8\">\n        <rect x=\"-42.6\" y=\"42.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-9\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M475.2 305.4c0 0 14.5 40.3 14.5 40.3c0 0-18 12-18 12c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-28.5 42-28.5 42m-113.6-74.3c0 0 17.9-18.5 17.9-18.5c0 0 36.4 25.3 36.4 25.3c0 0 64.8-16 64.8-16c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-10\">\n        <rect x=\"-29.6\" y=\"29.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-11\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M468.6 312.4c0 0 1.5 40.8 1.5 40.8c0 0 1.6 4.5 1.6 4.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-35.1 49-35.1 49m-107-81.3c0 0 15.1 4.9 15.1 4.9c0 0 38.2 13.3 38.2 13.3c0 0 65.8-27.4 65.8-27.4c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-12\">\n        <rect x=\"-20.3\" y=\"20.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-13\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M456.6 311.9c0 0-7 35.6-7 35.6c0 0 22.1 10.2 22.1 10.2c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-47.1 48.5-47.1 48.5m-95-80.8c0 0 12.3 28.3 12.3 28.3c0 0 39.9 1.3 39.9 1.3c0 0 66.9-38.8 66.9-38.8c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-14\">\n        <rect x=\"-13.4\" y=\"13.4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-15\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M444.6 311.4c0 0-15.6 30.5-15.6 30.5c0 0 42.7 15.8 42.7 15.8c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-59.1 48-59.1 48m-83-80.3c0 0 9.5 51.7 9.5 51.7c0 0 41.7-10.8 41.7-10.8c0 0 67.9-50.1 67.9-50.1c0 0 50.6-31.9 50.6-31.9c0 0-77.2-30.5-77.2-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-16\">\n        <rect x=\"-7.3\" y=\"7.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-17\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-18\">\n        <rect x=\"-4\" y=\"4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-19\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_reverse_Mask-20\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <clipPath id=\"" + iconPrefix + "_reverse_ClipPath-1\">\n        <rect width=\"720\" height=\"720\" />\n      </clipPath>\n    </defs>\n    <g transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#" + iconPrefix + "_reverse_Mask-1)\">\n        <path d=\"M377.5 395.3c0 0 64.8 0 64.8 0c0 0 0 129.6 0 129.6c0 0 28.8 0 28.8 0c0 0 0-129.6 0-129.6c0 0 64.8 0 64.8 0c0 0 0-28.8 0-28.8c0 0-158.4 0-158.4 0c0 0 0 28.8 0 28.8Z\" />\n        <path d=\"M338.9 363.6c0 0-62.5 62.4-62.5 62.4c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 62.4-62.4 62.4-62.4c0 0-20.3-20.4-20.3-20.4Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-60.7-72.8-60.7-72.8c0 0-22.1 18.6-22.1 18.6c0 0 68.4 82 68.4 82c0 0 0 62.4 0 62.4c0 0 28.8 0 28.8 0c0 0 0-62.6 0-62.6c0 0 68.4-81.8 68.4-81.8c0 0-22-18.6-22-18.6c0 0-60.8 72.8-60.8 72.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-353.7c195.2 0 353.7 158.5 353.7 353.7c0 195.2-158.5 353.7-353.7 353.7c-195.2 0-353.7-158.5-353.7-353.7c0-195.2 158.5-353.7 353.7-353.7Z\" fill=\"none\" transform=\"translate(359.8,360.4) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-2)\" transform=\"translate(144.3,-144.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-3)\">\n        <path d=\"M390.6 395.2c0 0 51.7 .1 51.7 .1c0 0 .1 103.6 .1 103.6c0 0 28.7 0 28.7 0c0 0 0-103.6 0-103.6c0 0 52-0.1 52-0.1c0 0 0-28.4 0-28.4c0 0-132.5 0-132.5 0c0 0 0 28.4 0 28.4Z\" />\n        <path d=\"M329 373.4c0 .1-52.6 52.6-52.6 52.6c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 52.6-52.6 52.6-52.6c0 0-20.4-20.3-20.4-20.3Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-48.7-58.3-48.7-58.3c0 0-21.1 19-21.1 19c0 0 55.5 67.2 55.5 67.2c0 0 .3 50 .3 50c0 0 28.4 0 28.4 0c0 0 0-50.3 0-50.3c0 0 55.4-66.9 55.4-66.9c0 0-21-18.6-21-18.6c0 0-48.8 57.9-48.8 57.9Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-336.2c185.6 0 336.2 150.6 336.2 336.2c0 185.6-150.6 336.2-336.2 336.2c-185.6 0-336.2-150.6-336.2-336.2c0-185.6 150.6-336.2 336.2-336.2Z\" fill=\"none\" display=\"block\" transform=\"translate(370.8,347.5) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#" + iconPrefix + "_reverse_Mask-4)\" transform=\"translate(91.1,-91.1)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#" + iconPrefix + "_reverse_Mask-5)\">\n        <path d=\"M409.7 395.1c0 0 32.6 .2 32.6 .2c0 0 .3 65.5 .3 65.5c0 0 28.5 0 28.5 0c0 0 0-65.5 0-65.5c0 0 33.1-0.2 33.1-0.2c0 0 0-27.8 0-27.8c0 0-94.5 0-94.5 0c0 0 0 27.8 0 27.8Z\" />\n        <path d=\"M319.7 382.8c0 0-43.3 43.2-43.3 43.2c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 43.4-43.3 43.4-43.3c0 0-20.5-20.3-20.5-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l69.8-69.9l.3-0.2l-20.3-20.4l-71.2 71.1c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-31.1-37-31.1-37c0 0-19.7 19.5-19.7 19.5c0 0 36.7 45.6 36.7 45.6c0 0 .7 31.8 .7 31.8c0 0 27.7 0 27.7 0c0 0 0-32.4 0-32.4c0 0 36.5-44.9 36.5-44.9c0 0-19.6-18.6-19.6-18.6c0 0-31.2 36-31.2 36Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-310c171.1 0 310 138.9 310 310c0 171.1-138.9 310-310 310c-171.1 0-310-138.9-310-310c0-171.1 138.9-310 310-310Z\" fill=\"none\" transform=\"translate(387.8,328.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-6)\" transform=\"translate(61.3,-61.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#" + iconPrefix + "_reverse_Mask-7)\">\n        <path d=\"M420.4 395c0 0 21.9 .3 21.9 .3c0 0 .4 44.1 .4 44.1c0 0 28.4 0 28.4 0c0 0 0-44.1 0-44.1c0 0 22.6-0.3 22.6-0.3c0 0 0-27.5 0-27.5c0 0-73.3 0-73.3 0c0 0 0 27.5 0 27.5Z\" />\n        <path d=\"M313.2 389.2c0 0-36.8 36.8-36.8 36.8c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 37-36.9 37-36.9c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M500 200c-13.4-9.9-27.2-16.2-45.3-16.2c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l57.7-57.7l-20.3-20.4l-58.8 58.7c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-21.2-25.1-21.2-25.1c0 0-19 19.8-19 19.8c0 0 26.2 33.5 26.2 33.5c0 0 1 21.6 1 21.6c0 0 27.2 0 27.2 0c0 0 0-22.3 0-22.3c0 0 25.9-32.7 25.9-32.7c0 0-18.8-18.6-18.8-18.6c0 0-21.3 23.8-21.3 23.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-294.3c162.4 0 294.3 131.9 294.3 294.3c0 162.4-131.9 294.3-294.3 294.3c-162.4 0-294.3-131.9-294.3-294.3c0-162.4 131.9-294.3 294.3-294.3Z\" fill=\"none\" display=\"block\" transform=\"translate(398.7,318.2) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#" + iconPrefix + "_reverse_Mask-8)\" transform=\"translate(42.6,-42.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-9)\">\n        <path d=\"M427.2 394.9c0 0 15.1 .4 15.1 .4c0 0 .4 30.7 .4 30.7c0 0 28.4 0 28.4 0c0 0 0-30.7 0-30.7c0 0 15.9-0.4 15.9-0.4c0 0 0-27.2 0-27.2c0 0-59.8 0-59.8 0c0 0 0 27.2 0 27.2Z\" />\n        <path d=\"M307.4 395c0 0-31 31-31 31c0 0-53.9-54-53.9-54c0 0-20.4 20.4-20.4 20.4c0 0 54 54 54 54c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 54 54 54 54c0 0 20.4-20.3 20.4-20.3c0 0-54-54.1-54-54.1c0 0 31.2-31.1 31.2-31.1c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l45.5-45.5l-20.4-20.4l-46.5 46.5c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-15-17.6-15-17.6c0 0-18.4 20-18.4 20c0 0 19.4 25.8 19.4 25.8c0 0 1.2 15.2 1.2 15.2c0 0 27 0 27 0c0 0 0-15.9 0-15.9c0 0 19.1-24.9 19.1-24.9c0 0-18.2-18.7-18.2-18.7c0 0-15.1 16.1-15.1 16.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-284.4c157 0 284.4 127.4 284.4 284.4c0 157-127.4 284.4-284.4 284.4c-157 0-284.4-127.4-284.4-284.4c0-157 127.4-284.4 284.4-284.4Z\" fill=\"none\" transform=\"translate(406.1,311.6) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-10)\" transform=\"translate(29.6,-29.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-11)\">\n        <path d=\"M436 393.5c0 0 8.7 .4 8.7 .4c0 0 .4 17.8 .4 17.8c0 0 23.6 0 23.6 0c0 0 0-17.8 0-17.8c0 0 9.4-0.4 9.4-0.4c0 0 0-22.6 0-22.6c0 0-42.1 0-42.1 0c0 0 0 22.6 0 22.6Z\" />\n        <path d=\"M297.2 405.2c0 0-20.8 20.8-20.8 20.8c0 0-35.4-35.6-35.4-35.6c0 0-20.3 20.5-20.3 20.5c0 0 35.4 35.5 35.4 35.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 35.6 35.5 35.6 35.5c0 0 20.2-20.2 20.2-20.2c0 0-35.4-35.7-35.4-35.7c0 0 21.1-21 21.1-21c0 0-20.7-20.2-20.7-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l33.7-33.7l-20.4-20.3l-34.7 34.6c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-10.7-12.4-10.7-12.4c0 0-18.1 20.1-18.1 20.1c0 0 14.9 20.6 14.9 20.6c0 0 1.2 10.7 1.2 10.7c0 0 26.8 0 26.8 0c0 0 0-11.5 0-11.5c0 0 14.6-19.6 14.6-19.6c0 0-17.9-18.6-17.9-18.6c0 0-10.8 10.7-10.8 10.7Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-277.5c153.1 0 277.5 124.4 277.5 277.5c0 153.1-124.4 277.5-277.5 277.5c-153.1 0-277.5-124.4-277.5-277.5c0-153.1 124.4-277.5 277.5-277.5Z\" fill=\"none\" display=\"block\" transform=\"translate(411.2,307.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-12)\" transform=\"translate(20.3,-20.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-13)\">\n        <path d=\"M446 390.8c0 0 3.5 .2 3.5 .2c0 0 .2 7.3 .2 7.3c.1 0 14.2 0 14.2 0c0 0 0-7.3 0-7.3c0 0 4-0.2 4-0.2c0 0 0-13.5 0-13.5c0 0-21.9 0-21.9 0c0 0 0 13.5 0 13.5Z\" />\n        <path d=\"M287.9 414.4c0 0-11.5 11.6-11.5 11.6c0 0-18.5-18.8-18.5-18.8c0 0-20.3 20.5-20.3 20.5c0 0 18.5 18.7 18.5 18.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 18.7 18.7 18.7 18.7c0 0 20.2-20 20.2-20c0 0-18.5-19.1-18.5-19.1c0 0 11.9-11.8 11.9-11.8c0 0-20.8-20.2-20.8-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l22.4-22.4l-20.4-20.4l-23.4 23.4c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 259.4c0 0-4.5-5.2-4.5-5.2c0 0-10.7 12.1-10.7 12.1c0 0 6.9 10.1 6.9 10.1c0 0 .8 4.5 .8 4.5c0 0 16 0 16 0c0 0 0-5 0-5c0 0 6.7-9.4 6.7-9.4c0 0-10.6-11.2-10.6-11.2c0 0-4.6 4.1-4.6 4.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-272.5c150.4 0 272.5 122.1 272.5 272.5c0 150.4-122.1 272.5-272.5 272.5c-150.4 0-272.5-122.1-272.5-272.5c0-150.4 122.1-272.5 272.5-272.5Z\" fill=\"none\" display=\"block\" transform=\"translate(414.9,303.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-14)\" transform=\"translate(13.4,-13.4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-15)\">\n        <path d=\"M453.6 388.1c0 0 .7 0 .7 0c0 0 .1 1.7 .1 1.7c0 0 4.7 0 4.7 0c0 0 0-1.7 0-1.7c0 0 1 0 1 0c0 0 0-4.5 0-4.5c0 0-6.5 0-6.5 0c0 0 0 4.5 0 4.5Z\" />\n        <path d=\"M280.8 421.5c0 0-4.4 4.5-4.4 4.5c0 0-5.5-5.9-5.5-5.9c0 0-20.3 20.6-20.3 20.6c0 0 5.5 5.7 5.5 5.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 5.8 5.7 5.8 5.7c0 0 20.1-19.9 20.1-19.9c0 0-5.5-6.2-5.5-6.2c0 0 4.8-4.6 4.8-4.6c0 0-20.8-20.3-20.8-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l11.9-11.9l-20.4-20.3l-12.9 12.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 262.9c0 0-1-1.2-1-1.2c0 0-3.6 4-3.6 4c0 0 1.9 2.8 1.9 2.8c0 0 .2 1.1 .2 1.1c0 0 5.4 0 5.4 0c0 0 0-1.2 0-1.2c0 0 1.7-2.6 1.7-2.6c0 0-3.5-3.7-3.5-3.7c0 0-1.1 .8-1.1 .8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-268.8c148.4 0 268.8 120.4 268.8 268.8c0 148.4-120.4 268.8-268.8 268.8c-148.4 0-268.8-120.4-268.8-268.8c0-148.4 120.4-268.8 268.8-268.8Z\" fill=\"none\" display=\"block\" transform=\"translate(417.6,301.3) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-16)\" transform=\"translate(7.3,-7.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-17)\">\n        <path d=\"M275.4 426.9c0 0-19.3 19.5-19.3 19.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 19.9-19.7 19.9-19.7c0 0-20.9-20.2-20.9-20.2Z\" />\n        <path d=\"M411.4 291.3l20.7 20.7l.1-0.1c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 21.9 6.3 35.3 16.2l-7.9 20.3c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10.1 2.9 19.5 7.9 27.5Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-265.6c146.6 0 265.6 119 265.6 265.6c0 146.6-119 265.6-265.6 265.6c-146.6 0-265.6-119-265.6-265.6c0-146.6 119-265.6 265.6-265.6Z\" fill=\"none\" display=\"block\" transform=\"translate(420,299.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-18)\" transform=\"translate(4,-4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-19)\">\n        <path d=\"M265.4 437.1c0 0-9.3 9.3-9.3 9.3c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 9.8-9.6 9.8-9.6c0 0-20.8-20.1-20.8-20.1Z\" />\n        <path d=\"M403 299.3l20.9 20.9l8.3-8.3c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 34.6 5.8 48.1 15.8l-20.7 20.7c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10 2.9 19.3 7.8 27.3Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-263.8c145.6 0 263.8 118.2 263.8 263.8c0 145.6-118.2 263.8-263.8 263.8c-145.6 0-263.8-118.2-263.8-263.8c0-145.6 118.2-263.8 263.8-263.8Z\" fill=\"none\" display=\"block\" transform=\"translate(421.2,297.8) scale(.977,.977)\" />\n    </g>\n    <g clip-path=\"url(#" + iconPrefix + "_reverse_ClipPath-1)\" opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_reverse_Mask-20)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-261.7c144.4 0 261.7 117.3 261.7 261.7c0 144.4-117.3 261.7-261.7 261.7c-144.4 0-261.7-117.3-261.7-261.7c0-144.4 117.3-261.7 261.7-261.7Z\" fill=\"none\" display=\"block\" transform=\"translate(422.8,296.4) scale(.977,.977)\" />\n    </g>";
	  }
	});

	var yextAnimatedReverse = new SVGIcon({
	  name: 'yext_animated_forward',
	  viewBox: '0 0 72 72',
	  complexContents: function complexContents(params) {
	    if (params === void 0) {
	      params = {};
	    }

	    var iconPrefix = params.iconPrefix || 'yxt';
	    return "<defs>\n      <mask id=\"" + iconPrefix + "_forward_Mask-1\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-2\">\n        <rect x=\"-144.3\" y=\"144.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-3\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M489.8 277.4c0 0 78 18.8 78 18.8c0 0-96.1 61.5-96.1 61.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-13.9 14-13.9 14m-67.8-108.1c0 0 73.9 1.3 73.9 1.3c0 0-33.8 54.5-33.8 54.5c0 0 18.6-3.2 18.6-3.2c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-32.1 9.8-32.1 9.8\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-4\">\n        <rect x=\"-91.1\" y=\"91.1\" fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M-0.3 .1c0 0 1.3 1.2 1.3 1.2c0 0 .3-1.6 .3-1.6c0 0-1.6 .4-1.6 .4\" />\n        <path fill=\"#fff\" d=\"M.3 .7c0 0-0.3 .3-0.3 .3c0 0 0 0 0 0c0 0 .3-0.3 .3-0.3c0 0 0 0 0 0\" />\n        <path d=\"M.3 .7c0 0-0.1 0-0.1 0c0 0 .1 .1 .1 .1c0 0 .1-0.1 .1-0.1c0 0-0.1 0-0.1 0m222.8 469.1c0 0-70.5 69.4-70.5 69.4c0 0 34.1 33.5 34.1 33.5c0 0 67-72.9 67-72.9c0 0-30.6-30-30.6-30\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-5\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M488.4 291.4c0 0 40.5 39.3 40.5 39.3c0 0-57.2 27-57.2 27c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-15.3 28-15.3 28m-90.5-97.4c0 0 52-11.3 52-11.3c0 0-6 45.2-6 45.2c0 0 36.8-6 36.8-6c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-56.2 34.5-56.2 34.5\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-6\">\n        <rect x=\"-61.3\" y=\"61.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-7\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M481.8 298.4c0 0 27.5 39.8 27.5 39.8c0 0-37.6 19.5-37.6 19.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-21.9 35-21.9 35m-108.1-79.7c0 0 30.2-23.8 30.2-23.8c0 0 21.7 35.9 21.7 35.9c0 0 55.1-8.9 55.1-8.9c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-80.4 59.2-80.4 59.2\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-8\">\n        <rect x=\"-42.6\" y=\"42.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-9\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M475.2 305.4c0 0 14.5 40.3 14.5 40.3c0 0-18 12-18 12c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-28.5 42-28.5 42m-113.6-74.3c0 0 17.9-18.5 17.9-18.5c0 0 36.4 25.3 36.4 25.3c0 0 64.8-16 64.8-16c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-10\">\n        <rect x=\"-29.6\" y=\"29.6\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-11\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M468.6 312.4c0 0 1.5 40.8 1.5 40.8c0 0 1.6 4.5 1.6 4.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-35.1 49-35.1 49m-107-81.3c0 0 15.1 4.9 15.1 4.9c0 0 38.2 13.3 38.2 13.3c0 0 65.8-27.4 65.8-27.4c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-12\">\n        <rect x=\"-20.3\" y=\"20.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-13\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M456.6 311.9c0 0-7 35.6-7 35.6c0 0 22.1 10.2 22.1 10.2c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-47.1 48.5-47.1 48.5m-95-80.8c0 0 12.3 28.3 12.3 28.3c0 0 39.9 1.3 39.9 1.3c0 0 66.9-38.8 66.9-38.8c0 0 39.3-21.9 39.3-21.9c0 0-65.9-40.5-65.9-40.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-14\">\n        <rect x=\"-13.4\" y=\"13.4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-15\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M444.6 311.4c0 0-15.6 30.5-15.6 30.5c0 0 42.7 15.8 42.7 15.8c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-59.1 48-59.1 48m-83-80.3c0 0 9.5 51.7 9.5 51.7c0 0 41.7-10.8 41.7-10.8c0 0 67.9-50.1 67.9-50.1c0 0 50.6-31.9 50.6-31.9c0 0-77.2-30.5-77.2-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-16\">\n        <rect x=\"-7.3\" y=\"7.3\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-17\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 35.4-36.5 35.4-36.5c0 0-62-25.9-62-25.9c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-18\">\n        <rect x=\"-4\" y=\"4\" fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-19\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n        <path d=\"M432.6 310.9c0 0-24.2 25.3-24.2 25.3c0 0 63.3 21.5 63.3 21.5c0 0 59.6-41.1 59.6-41.1c0 0 10.6-53.8 10.6-53.8c0 0-38.2 .6-38.2 .6c0 0-71.1 47.5-71.1 47.5m-71-79.8c0 0 20.3 90.4 20.3 90.4c0 0 29-29.5 29-29.5c0 0 69.8-70.1 69.8-70.1c0 0 39.3-31.9 39.3-31.9c0 0-65.9-30.5-65.9-30.5c0 0-92.5 71.6-92.5 71.6\" />\n      </mask>\n      <mask id=\"" + iconPrefix + "_forward_Mask-20\">\n        <rect fill=\"#fff\" width=\"720\" height=\"720\" />\n      </mask>\n      <clipPath id=\"" + iconPrefix + "_forward_ClipPath-1\">\n        <rect width=\"720\" height=\"720\" />\n      </clipPath>\n    </defs>\n    <g transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#" + iconPrefix + "_forward_Mask-1)\">\n        <path d=\"M377.5 395.3c0 0 64.8 0 64.8 0c0 0 0 129.6 0 129.6c0 0 28.8 0 28.8 0c0 0 0-129.6 0-129.6c0 0 64.8 0 64.8 0c0 0 0-28.8 0-28.8c0 0-158.4 0-158.4 0c0 0 0 28.8 0 28.8Z\" />\n        <path d=\"M338.9 363.6c0 0-62.5 62.4-62.5 62.4c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 62.4-62.4 62.4-62.4c0 0-20.3-20.4-20.3-20.4Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-60.7-72.8-60.7-72.8c0 0-22.1 18.6-22.1 18.6c0 0 68.4 82 68.4 82c0 0 0 62.4 0 62.4c0 0 28.8 0 28.8 0c0 0 0-62.6 0-62.6c0 0 68.4-81.8 68.4-81.8c0 0-22-18.6-22-18.6c0 0-60.8 72.8-60.8 72.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-353.7c195.2 0 353.7 158.5 353.7 353.7c0 195.2-158.5 353.7-353.7 353.7c-195.2 0-353.7-158.5-353.7-353.7c0-195.2 158.5-353.7 353.7-353.7Z\" fill=\"none\" transform=\"translate(359.8,360.4) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-2)\" transform=\"translate(144.3,-144.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-3)\">\n        <path d=\"M390.6 395.2c0 0 51.7 .1 51.7 .1c0 0 .1 103.6 .1 103.6c0 0 28.7 0 28.7 0c0 0 0-103.6 0-103.6c0 0 52-0.1 52-0.1c0 0 0-28.4 0-28.4c0 0-132.5 0-132.5 0c0 0 0 28.4 0 28.4Z\" />\n        <path d=\"M329 373.4c0 .1-52.6 52.6-52.6 52.6c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 52.6-52.6 52.6-52.6c0 0-20.4-20.3-20.4-20.3Z\" />\n        <path d=\"M454.7 345.8c44.8 0 81-36.3 81-81c0 0-28.8 0-28.8 0c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3c0 0 69.8-69.9 69.8-69.9c0 0 21.1-21 21.1-21c-14.4-22.3-39.5-37-68-37c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81Zm0-133.2c10.2 0 19.6 2.9 27.6 7.9c0 0-71.9 71.8-71.9 71.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2Z\" />\n        <path d=\"M276.4 255.9c0 0-48.7-58.3-48.7-58.3c0 0-21.1 19-21.1 19c0 0 55.5 67.2 55.5 67.2c0 0 .3 50 .3 50c0 0 28.4 0 28.4 0c0 0 0-50.3 0-50.3c0 0 55.4-66.9 55.4-66.9c0 0-21-18.6-21-18.6c0 0-48.8 57.9-48.8 57.9Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-336.2c185.6 0 336.2 150.6 336.2 336.2c0 185.6-150.6 336.2-336.2 336.2c-185.6 0-336.2-150.6-336.2-336.2c0-185.6 150.6-336.2 336.2-336.2Z\" fill=\"none\" display=\"block\" transform=\"translate(370.8,347.5) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#" + iconPrefix + "_forward_Mask-4)\" transform=\"translate(91.1,-91.1)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#" + iconPrefix + "_forward_Mask-5)\">\n        <path d=\"M409.7 395.1c0 0 32.6 .2 32.6 .2c0 0 .3 65.5 .3 65.5c0 0 28.5 0 28.5 0c0 0 0-65.5 0-65.5c0 0 33.1-0.2 33.1-0.2c0 0 0-27.8 0-27.8c0 0-94.5 0-94.5 0c0 0 0 27.8 0 27.8Z\" />\n        <path d=\"M319.7 382.8c0 0-43.3 43.2-43.3 43.2c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 43.4-43.3 43.4-43.3c0 0-20.5-20.3-20.5-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l69.8-69.9l.3-0.2l-20.3-20.4l-71.2 71.1c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-31.1-37-31.1-37c0 0-19.7 19.5-19.7 19.5c0 0 36.7 45.6 36.7 45.6c0 0 .7 31.8 .7 31.8c0 0 27.7 0 27.7 0c0 0 0-32.4 0-32.4c0 0 36.5-44.9 36.5-44.9c0 0-19.6-18.6-19.6-18.6c0 0-31.2 36-31.2 36Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-310c171.1 0 310 138.9 310 310c0 171.1-138.9 310-310 310c-171.1 0-310-138.9-310-310c0-171.1 138.9-310 310-310Z\" fill=\"none\" transform=\"translate(387.8,328.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-6)\" transform=\"translate(61.3,-61.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g mask=\"url(#" + iconPrefix + "_forward_Mask-7)\">\n        <path d=\"M420.4 395c0 0 21.9 .3 21.9 .3c0 0 .4 44.1 .4 44.1c0 0 28.4 0 28.4 0c0 0 0-44.1 0-44.1c0 0 22.6-0.3 22.6-0.3c0 0 0-27.5 0-27.5c0 0-73.3 0-73.3 0c0 0 0 27.5 0 27.5Z\" />\n        <path d=\"M313.2 389.2c0 0-36.8 36.8-36.8 36.8c0 0-62.4-62.4-62.4-62.4c0 0-20.4 20.4-20.4 20.4c0 0 62.5 62.4 62.5 62.4c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 62.5 62.4 62.5 62.4c0 0 20.3-20.4 20.3-20.4c0 0-62.4-62.4-62.4-62.4c0 0 37-36.9 37-36.9c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M500 200c-13.4-9.9-27.2-16.2-45.3-16.2c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l57.7-57.7l-20.3-20.4l-58.8 58.7c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-21.2-25.1-21.2-25.1c0 0-19 19.8-19 19.8c0 0 26.2 33.5 26.2 33.5c0 0 1 21.6 1 21.6c0 0 27.2 0 27.2 0c0 0 0-22.3 0-22.3c0 0 25.9-32.7 25.9-32.7c0 0-18.8-18.6-18.8-18.6c0 0-21.3 23.8-21.3 23.8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-294.3c162.4 0 294.3 131.9 294.3 294.3c0 162.4-131.9 294.3-294.3 294.3c-162.4 0-294.3-131.9-294.3-294.3c0-162.4 131.9-294.3 294.3-294.3Z\" fill=\"none\" display=\"block\" transform=\"translate(398.7,318.2) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g mask=\"url(#" + iconPrefix + "_forward_Mask-8)\" transform=\"translate(42.6,-42.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-9)\">\n        <path d=\"M427.2 394.9c0 0 15.1 .4 15.1 .4c0 0 .4 30.7 .4 30.7c0 0 28.4 0 28.4 0c0 0 0-30.7 0-30.7c0 0 15.9-0.4 15.9-0.4c0 0 0-27.2 0-27.2c0 0-59.8 0-59.8 0c0 0 0 27.2 0 27.2Z\" />\n        <path d=\"M307.4 395c0 0-31 31-31 31c0 0-53.9-54-53.9-54c0 0-20.4 20.4-20.4 20.4c0 0 54 54 54 54c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 54 54 54 54c0 0 20.4-20.3 20.4-20.3c0 0-54-54.1-54-54.1c0 0 31.2-31.1 31.2-31.1c0 0-20.6-20.3-20.6-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l45.5-45.5l-20.4-20.4l-46.5 46.5c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-15-17.6-15-17.6c0 0-18.4 20-18.4 20c0 0 19.4 25.8 19.4 25.8c0 0 1.2 15.2 1.2 15.2c0 0 27 0 27 0c0 0 0-15.9 0-15.9c0 0 19.1-24.9 19.1-24.9c0 0-18.2-18.7-18.2-18.7c0 0-15.1 16.1-15.1 16.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-284.4c157 0 284.4 127.4 284.4 284.4c0 157-127.4 284.4-284.4 284.4c-157 0-284.4-127.4-284.4-284.4c0-157 127.4-284.4 284.4-284.4Z\" fill=\"none\" transform=\"translate(406.1,311.6) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-10)\" transform=\"translate(29.6,-29.6)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-11)\">\n        <path d=\"M436 393.5c0 0 8.7 .4 8.7 .4c0 0 .4 17.8 .4 17.8c0 0 23.6 0 23.6 0c0 0 0-17.8 0-17.8c0 0 9.4-0.4 9.4-0.4c0 0 0-22.6 0-22.6c0 0-42.1 0-42.1 0c0 0 0 22.6 0 22.6Z\" />\n        <path d=\"M297.2 405.2c0 0-20.8 20.8-20.8 20.8c0 0-35.4-35.6-35.4-35.6c0 0-20.3 20.5-20.3 20.5c0 0 35.4 35.5 35.4 35.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 35.6 35.5 35.6 35.5c0 0 20.2-20.2 20.2-20.2c0 0-35.4-35.7-35.4-35.7c0 0 21.1-21 21.1-21c0 0-20.7-20.2-20.7-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-9.9-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l33.7-33.7l-20.4-20.3l-34.7 34.6c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 255.9c0 0-10.7-12.4-10.7-12.4c0 0-18.1 20.1-18.1 20.1c0 0 14.9 20.6 14.9 20.6c0 0 1.2 10.7 1.2 10.7c0 0 26.8 0 26.8 0c0 0 0-11.5 0-11.5c0 0 14.6-19.6 14.6-19.6c0 0-17.9-18.6-17.9-18.6c0 0-10.8 10.7-10.8 10.7Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-277.5c153.1 0 277.5 124.4 277.5 277.5c0 153.1-124.4 277.5-277.5 277.5c-153.1 0-277.5-124.4-277.5-277.5c0-153.1 124.4-277.5 277.5-277.5Z\" fill=\"none\" display=\"block\" transform=\"translate(411.2,307.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-12)\" transform=\"translate(20.3,-20.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-13)\">\n        <path d=\"M446 390.8c0 0 3.5 .2 3.5 .2c0 0 .2 7.3 .2 7.3c.1 0 14.2 0 14.2 0c0 0 0-7.3 0-7.3c0 0 4-0.2 4-0.2c0 0 0-13.5 0-13.5c0 0-21.9 0-21.9 0c0 0 0 13.5 0 13.5Z\" />\n        <path d=\"M287.9 414.4c0 0-11.5 11.6-11.5 11.6c0 0-18.5-18.8-18.5-18.8c0 0-20.3 20.5-20.3 20.5c0 0 18.5 18.7 18.5 18.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 18.7 18.7 18.7 18.7c0 0 20.2-20 20.2-20c0 0-18.5-19.1-18.5-19.1c0 0 11.9-11.8 11.9-11.8c0 0-20.8-20.2-20.8-20.2Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l22.4-22.4l-20.4-20.4l-23.4 23.4c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 259.4c0 0-4.5-5.2-4.5-5.2c0 0-10.7 12.1-10.7 12.1c0 0 6.9 10.1 6.9 10.1c0 0 .8 4.5 .8 4.5c0 0 16 0 16 0c0 0 0-5 0-5c0 0 6.7-9.4 6.7-9.4c0 0-10.6-11.2-10.6-11.2c0 0-4.6 4.1-4.6 4.1Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-272.5c150.4 0 272.5 122.1 272.5 272.5c0 150.4-122.1 272.5-272.5 272.5c-150.4 0-272.5-122.1-272.5-272.5c0-150.4 122.1-272.5 272.5-272.5Z\" fill=\"none\" display=\"block\" transform=\"translate(414.9,303.7) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-14)\" transform=\"translate(13.4,-13.4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-15)\">\n        <path d=\"M453.6 388.1c0 0 .7 0 .7 0c0 0 .1 1.7 .1 1.7c0 0 4.7 0 4.7 0c0 0 0-1.7 0-1.7c0 0 1 0 1 0c0 0 0-4.5 0-4.5c0 0-6.5 0-6.5 0c0 0 0 4.5 0 4.5Z\" />\n        <path d=\"M280.8 421.5c0 0-4.4 4.5-4.4 4.5c0 0-5.5-5.9-5.5-5.9c0 0-20.3 20.6-20.3 20.6c0 0 5.5 5.7 5.5 5.7c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 5.8 5.7 5.8 5.7c0 0 20.1-19.9 20.1-19.9c0 0-5.5-6.2-5.5-6.2c0 0 4.8-4.6 4.8-4.6c0 0-20.8-20.3-20.8-20.3Z\" />\n        <path d=\"M502.8 199.6c-13.4-10-30.1-15.8-48.1-15.8c-44.7 0-81 36.2-81 81c0 44.7 36.3 81 81 81c44.8 0 81-36.3 81-81h-28.8c0 28.8-23.3 52.2-52.2 52.2c-8.2 0-16-1.9-22.9-5.3l11.9-11.9l-20.4-20.3l-12.9 12.8c-5-8-7.9-17.4-7.9-27.5c0-28.9 23.4-52.2 52.2-52.2c10.1 0 19.4 2.8 27.4 7.7Z\" fill-rule=\"evenodd\" />\n        <path d=\"M276.4 262.9c0 0-1-1.2-1-1.2c0 0-3.6 4-3.6 4c0 0 1.9 2.8 1.9 2.8c0 0 .2 1.1 .2 1.1c0 0 5.4 0 5.4 0c0 0 0-1.2 0-1.2c0 0 1.7-2.6 1.7-2.6c0 0-3.5-3.7-3.5-3.7c0 0-1.1 .8-1.1 .8Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-268.8c148.4 0 268.8 120.4 268.8 268.8c0 148.4-120.4 268.8-268.8 268.8c-148.4 0-268.8-120.4-268.8-268.8c0-148.4 120.4-268.8 268.8-268.8Z\" fill=\"none\" display=\"block\" transform=\"translate(417.6,301.3) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-16)\" transform=\"translate(7.3,-7.3)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-17)\">\n        <path d=\"M275.4 426.9c0 0-19.3 19.5-19.3 19.5c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 19.9-19.7 19.9-19.7c0 0-20.9-20.2-20.9-20.2Z\" />\n        <path d=\"M411.4 291.3l20.7 20.7l.1-0.1c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 21.9 6.3 35.3 16.2l-7.9 20.3c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10.1 2.9 19.5 7.9 27.5Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-265.6c146.6 0 265.6 119 265.6 265.6c0 146.6-119 265.6-265.6 265.6c-146.6 0-265.6-119-265.6-265.6c0-146.6 119-265.6 265.6-265.6Z\" fill=\"none\" display=\"block\" transform=\"translate(420,299.1) scale(.977,.977)\" />\n    </g>\n    <g opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-18)\" transform=\"translate(4,-4)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-19)\">\n        <path d=\"M265.4 437.1c0 0-9.3 9.3-9.3 9.3c0 0-62.5 62.4-62.5 62.4c0 0 20.4 20.4 20.4 20.4c0 0 62.4-62.4 62.4-62.4c0 0 9.8-9.6 9.8-9.6c0 0-20.8-20.1-20.8-20.1Z\" />\n        <path d=\"M403 299.3l20.9 20.9l8.3-8.3c6.8 3.2 14.5 5.1 22.5 5.1c28.9 0 52.2-23.4 52.2-52.2h28.8c0 44.7-36.2 81-81 81c-44.7 0-81-36.3-81-81c0-44.8 36.3-81 81-81c18 0 34.6 5.8 48.1 15.8l-20.7 20.7c-8-4.9-17.3-7.7-27.4-7.7c-28.8 0-52.2 23.3-52.2 52.2c0 10 2.9 19.3 7.8 27.3Z\" fill-rule=\"evenodd\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-263.8c145.6 0 263.8 118.2 263.8 263.8c0 145.6-118.2 263.8-263.8 263.8c-145.6 0-263.8-118.2-263.8-263.8c0-145.6 118.2-263.8 263.8-263.8Z\" fill=\"none\" display=\"block\" transform=\"translate(421.2,297.8) scale(.977,.977)\" />\n    </g>\n    <g clip-path=\"url(#" + iconPrefix + "_forward_ClipPath-1)\" opacity=\"0\" transform=\"translate(0,0) scale(.1,.1)\">\n      <g display=\"block\" mask=\"url(#" + iconPrefix + "_forward_Mask-20)\">\n        <path d=\"M224.2 478.3c0 0-210.6 210.5-210.6 210.5c0 0 20.4 20.4 20.4 20.4c0 0 210.7-210.7 210.7-210.7c-11.7-11-5.9-6-20.5-20.2Z\" />\n      </g>\n      <path stroke=\"#000\" stroke-width=\"30\" d=\"M0-261.7c144.4 0 261.7 117.3 261.7 261.7c0 144.4-117.3 261.7-261.7 261.7c-144.4 0-261.7-117.3-261.7-261.7c0-144.4 117.3-261.7 261.7-261.7Z\" fill=\"none\" display=\"block\" transform=\"translate(422.8,296.4) scale(.977,.977)\" />\n    </g>";
	  }
	});

	var email = new SVGIcon({
	  name: 'email',
	  path: 'M12,-3.55271368e-15 C8.81712,-3.55271368e-15 5.7648,1.26468 3.5148,3.5148 C1.2648,5.76492 3.55271368e-15,8.81736 3.55271368e-15,12 C3.55271368e-15,15.18264 1.26468,18.2352 3.5148,20.4852 C5.76492,22.7352 8.81736,24 12,24 C15.18264,24 18.2352,22.73532 20.4852,20.4852 C22.7352,18.23508 24,15.18264 24,12 C24,8.81736 22.73532,5.7648 20.4852,3.5148 C18.23508,1.2648 15.18264,-3.55271368e-15 12,-3.55271368e-15 Z M17.28,7.92 L12,11.87064 L6.72,7.92 L17.28,7.92 Z M18,15.64776 C18,15.7743216 17.9446872,15.894312 17.85,15.976824 C17.7543744,16.059324 17.6278128,16.096824 17.503128,16.0799496 L6.479928,16.0799496 C6.352428,16.0940122 6.224928,16.0499496 6.13212,15.961824 C6.0402456,15.8727624 5.9914944,15.7471368 5.9999328,15.618696 L5.9999328,9.047736 L5.9999328,8.441184 L7.9536768,9.90744 L11.6398368,12.67224 C11.839524,12.8681784 12.1601568,12.8681784 12.3598368,12.67224 L17.8939968,8.51736 L17.9849352,8.44986 L17.9858726,8.45079768 C17.9914978,8.48548488 17.9952478,8.52111048 17.9971226,8.55579768 L17.9971226,15.6386777 L18,15.64776 Z'
	});

	var iconsArray = [thumbIcon, receiptIcon, pantheonIcon, micIcon, directionsIcon, calendarIcon, calloutIcon, infoIcon, briefcaseIcon, kabobIcon, personIcon, magnifyingGlassIcon, officeIcon, linkIcon, windowIcon, phoneIcon, tagIcon, documentIcon, chevronIcon, supportIcon, yextIcon, pinIcon, gearIcon, lightBulbIcon, elements, close, yextAnimatedForward, yextAnimatedReverse, email, starIcon];
	var Icons = {};

	forEach$4(iconsArray).call(iconsArray, function (icon) {
	  Icons[icon.name] = icon.markup();
	});

	Icons["default"] = starIcon.markup();

	var keys$6 = entryVirtual('Array').keys;

	var keys$7 = keys$6;

	var ArrayPrototype$d = Array.prototype;

	var DOMIterables$1 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var keys_1 = function (it) {
	  var own = it.keys;
	  return it === ArrayPrototype$d || (it instanceof Array && own === ArrayPrototype$d.keys)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables$1.hasOwnProperty(classof(it)) ? keys$7 : own;
	};

	var keys$8 = keys_1;

	var minimalSafe = createCommonjsModule(function (module, exports) {
	Object.defineProperty(exports,"__esModule",{value:!0});var n=/(\w+)[-_].*/;function f(f,r){if(r[f])return r[f];var t=f.match(n);if(!t)throw new Error("Can't find lang or lcale with code "+f);return r[t[1]]}function r(n){return n>1}function t(n){return 1!==n}function u(n){return 0}var e={ach:{n:2,f:r},af:{n:2,f:t},ak:{n:2,f:r},am:{n:2,f:r},an:{n:2,f:t},ar:{n:6,f:function(n){return 0===n?0:1===n?1:2===n?2:n%100>=3&&n%100<=10?3:n%100>=11?4:5}},arn:{n:2,f:r},ast:{n:2,f:t},ay:{n:1,f:u},az:{n:2,f:t},be:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},bg:{n:2,f:t},bn:{n:2,f:t},bo:{n:1,f:u},br:{n:2,f:r},brx:{n:2,f:t},bs:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},ca:{n:2,f:t},cgg:{n:1,f:u},cs:{n:3,f:function(n){return 1===n?0:n>=2&&n<=4?1:2}},csb:{n:3,f:function(n){return 1===n?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},cy:{n:4,f:function(n){return 1===n?0:2===n?1:8!==n&&11!==n?2:3}},da:{n:2,f:t},de:{n:2,f:t},doi:{n:2,f:t},dz:{n:1,f:u},el:{n:2,f:t},en:{n:2,f:t},eo:{n:2,f:t},es:{n:2,f:t},et:{n:2,f:t},eu:{n:2,f:t},fa:{n:1,f:u},ff:{n:2,f:t},fi:{n:2,f:t},fil:{n:2,f:r},fo:{n:2,f:t},fr:{n:2,f:r},fur:{n:2,f:t},fy:{n:2,f:t},ga:{n:5,f:function(n){return 1===n?0:2===n?1:n<7?2:n<11?3:4}},gd:{n:4,f:function(n){return 1===n||11===n?0:2===n||12===n?1:n>2&&n<20?2:3}},gl:{n:2,f:t},gu:{n:2,f:t},gun:{n:2,f:r},ha:{n:2,f:t},he:{n:2,f:t},hi:{n:2,f:t},hne:{n:2,f:t},hr:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},hu:{n:2,f:t},hy:{n:2,f:t},id:{n:1,f:u},is:{n:2,f:function(n){return n%10!=1||n%100==11}},it:{n:2,f:t},ja:{n:1,f:u},jbo:{n:1,f:u},jv:{n:2,f:function(n){return 0!==n}},ka:{n:1,f:u},kk:{n:1,f:u},km:{n:1,f:u},kn:{n:2,f:t},ko:{n:1,f:u},ku:{n:2,f:t},kw:{n:4,f:function(n){return 1===n?0:2===n?1:3===n?2:3}},ky:{n:1,f:u},lb:{n:2,f:t},ln:{n:2,f:r},lo:{n:1,f:u},lt:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&(n%100<10||n%100>=20)?1:2}},lv:{n:3,f:function(n){return n%10==1&&n%100!=11?0:0!==n?1:2}},mai:{n:2,f:t},mfe:{n:2,f:r},mg:{n:2,f:r},mi:{n:2,f:r},mk:{n:2,f:function(n){return 1===n||n%10==1?0:1}},ml:{n:2,f:t},mn:{n:2,f:t},mni:{n:2,f:t},mnk:{n:3,f:function(n){return 0===n?0:1===n?1:2}},mr:{n:2,f:t},ms:{n:1,f:u},mt:{n:4,f:function(n){return 1===n?0:0===n||n%100>1&&n%100<11?1:n%100>10&&n%100<20?2:3}},my:{n:1,f:u},nah:{n:2,f:t},nap:{n:2,f:t},nb:{n:2,f:t},ne:{n:2,f:t},nl:{n:2,f:t},nn:{n:2,f:t},no:{n:2,f:t},nso:{n:2,f:t},oc:{n:2,f:r},or:{n:2,f:t},pa:{n:2,f:t},pap:{n:2,f:t},pl:{n:3,f:function(n){return 1===n?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},pms:{n:2,f:t},ps:{n:2,f:t},pt:{n:2,f:t},rm:{n:2,f:t},ro:{n:3,f:function(n){return 1===n?0:0===n||n%100>0&&n%100<20?1:2}},ru:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},rw:{n:2,f:t},sah:{n:1,f:u},sat:{n:2,f:t},sco:{n:2,f:t},sd:{n:2,f:t},se:{n:2,f:t},si:{n:2,f:t},sk:{n:3,f:function(n){return 1===n?0:n>=2&&n<=4?1:2}},sl:{n:4,f:function(n){return n%100==1?1:n%100==2?2:n%100==3||n%100==4?3:0}},so:{n:2,f:t},son:{n:2,f:t},sq:{n:2,f:t},sr:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},su:{n:1,f:u},sv:{n:2,f:t},sw:{n:2,f:t},ta:{n:2,f:t},te:{n:2,f:t},tg:{n:2,f:r},th:{n:1,f:u},ti:{n:2,f:r},tk:{n:2,f:t},tr:{n:2,f:r},tt:{n:1,f:u},ug:{n:1,f:u},uk:{n:3,f:function(n){return n%10==1&&n%100!=11?0:n%10>=2&&n%10<=4&&(n%100<10||n%100>=20)?1:2}},ur:{n:2,f:t},uz:{n:2,f:r},vi:{n:1,f:u},wa:{n:2,f:r},wo:{n:1,f:u},yo:{n:2,f:t},zh:{n:1,f:u}};function o(n){return f(n,e).n}var i={};function c(n){if(i[n])return i[n];var r=f(n,e),t=function(n,f){return f[+r.f(n)]};return i[n]=t,t}function a(n){try{return f(n,e),!0}catch(n){return !1}}function s(){return Object.keys(e)}exports.getNPlurals=o,exports.getPluralFunc=c,exports.hasLang=a,exports.getAvailLangs=s;
	});

	unwrapExports(minimalSafe);
	var minimalSafe_1 = minimalSafe.getNPlurals;
	var minimalSafe_2 = minimalSafe.getPluralFunc;
	var minimalSafe_3 = minimalSafe.hasLang;
	var minimalSafe_4 = minimalSafe.getAvailLangs;

	var TranslationProcessor =
	/*#__PURE__*/
	function () {
	  function TranslationProcessor() {}

	  /**
	   * Processes a translation which includes performing interpolation, pluralization, or
	   * both
	   * @param {string | Object} translations The translation, or an object containing
	   * translated plural forms
	   * @param {Object} interpolationParams Params to use during interpolation
	   * @param {number} count The count associated with the pluralization
	   * @param {string} language The langauge associated with the pluralization
	   * @returns {string} The translation with any interpolation or pluralization applied
	   */
	  TranslationProcessor.process = function process(translations, interpolationParams, count, language) {
	    var stringToInterpolate = typeof translations === 'string' ? translations : this._selectPluralForm(translations, count, language);
	    return this._interpolate(stringToInterpolate, interpolationParams);
	  }
	  /**
	   * Returns the correct plural form given a translations object and count.
	   * @param {Object} translations
	   * @param {number} count
	   * @param {string} language
	   * @returns {string}
	   */
	  ;

	  TranslationProcessor._selectPluralForm = function _selectPluralForm(translations, count, language) {
	    if (!minimalSafe_3(language)) {
	      language = 'en';
	    }

	    var oneToNArray = this._generateArrayOneToN(language);

	    var pluralFormIndex = minimalSafe_2(language)(count, oneToNArray);
	    return translations[pluralFormIndex];
	  }
	  /**
	   * @param {string} language
	   * @returns {Array} an array of the form [0, 1, 2, ..., nPluralForms]
	   */
	  ;

	  TranslationProcessor._generateArrayOneToN = function _generateArrayOneToN(language) {
	    var _context;

	    var numberOfPluralForms = minimalSafe_1(language);
	    return from_1$2(keys$8(_context = new Array(numberOfPluralForms)).call(_context));
	  };

	  TranslationProcessor._interpolate = function _interpolate(stringToInterpolate, interpolationParams) {
	    var interpolationRegex = /\[\[([a-zA-Z0-9]+)\]\]/g;
	    return stringToInterpolate.replace(interpolationRegex, function (match, interpolationKey) {
	      return interpolationParams[interpolationKey];
	    });
	  };

	  return TranslationProcessor;
	}();

	/**
	 * HandlebarsRenderer is a wrapper around the nativate handlebars renderer.
	 * @extends Renderer
	 */

	var HandlebarsRenderer =
	/*#__PURE__*/
	function (_Renderer) {
	  inheritsLoose(HandlebarsRenderer, _Renderer);

	  function HandlebarsRenderer(templates, opts) {
	    var _this;

	    if (templates === void 0) {
	      templates = {};
	    }

	    if (opts === void 0) {
	      opts = {};
	    }

	    _this = _Renderer.call(this) || this;
	    /**
	     * A local reference to the handlebars compiler
	     * @type {Handlebars}
	     * @private
	     */

	    _this._handlebars = templates._hb || null;
	    /**
	     * A local reference to the pre-compiled handlebars templates
	     * @type {Handlebars}
	     * @private
	     */

	    _this._templates = templates || {};
	    return _this;
	  }

	  var _proto = HandlebarsRenderer.prototype;

	  _proto.init = function init(templates, locale) {
	    // Assign the handlebars compiler and templates based on
	    // information provided from external dep (in default case, it comes from external server request)
	    this._handlebars = templates._hb;
	    this._templates = templates; // Store the locale that ANSWERS was initialized with

	    this._initLocale = locale; // TODO(billy) Once we re-write templates using the new helpers library
	    // we probably don't need these custom helpers anymore

	    this._registerCustomHelpers();
	  }
	  /**
	   * registerHelper is a public interface for external dependencies to
	   * register their own custom helpers to our internal Handlebars Compiler
	   */
	  ;

	  _proto.registerHelper = function registerHelper(name, cb) {
	    this._handlebars.registerHelper(name, cb);
	  }
	  /**
	   * SafeString is a public interface for external dependencies to
	   * mark a string as 'safe'. Handlebars will not escape a SafeString
	   */
	  ;

	  _proto.SafeString = function SafeString(string) {
	    return new this._handlebars.SafeString(string);
	  }
	  /**
	   * EscapeExpression is a public interface for external dependencies to
	   * escape a string
	   */
	  ;

	  _proto.escapeExpression = function escapeExpression(string) {
	    return this._handlebars.escapeExpression(string);
	  }
	  /**
	   * compile a handlebars template so that it can be rendered,
	   * using the {Handlebars} compiler
	   * @param {string} template The template string to compile
	   * @returns {Function}
	   */
	  ;

	  _proto.compile = function compile(template) {
	    if (typeof template !== 'string') {
	      return '';
	    }

	    return this._handlebars.compile(template);
	  }
	  /**
	   * compile a template and then add it to the current template bundle
	   * @param {string} templateName The unique name for the template
	   * @param {string} template The handlebars template string
	   */
	  ;

	  _proto.registerTemplate = function registerTemplate(templateName, template) {
	    this._templates[templateName] = this.compile(template);
	  }
	  /**
	   * render will render a template with data
	   * @param {Object} config Provide either a templateName or a pre-compiled template
	   * @param {Object} data The data to provide to the template
	   */
	  ;

	  _proto.render = function render(config, data) {
	    // If a custom template is provided, use it,
	    // otherwise fall back to the template name
	    // TODO(billy) This interface should probably be less ugly
	    if (config.template !== null) {
	      return config.template(data);
	    }

	    try {
	      return this._templates[config.templateName](data);
	    } catch (e) {
	      throw new Error('Can not find/render template: ' + config.templateName, e);
	    }
	  };

	  _proto._registerCustomHelpers = function _registerCustomHelpers() {
	    this.registerHelper('ifeq', function (arg1, arg2, options) {
	      return arg1 === arg2 ? options.fn(this) : options.inverse(this);
	    });
	    this.registerHelper('ifnoteq', function (arg1, arg2, options) {
	      return arg1 !== arg2 ? options.fn(this) : options.inverse(this);
	    });
	    this.registerHelper({
	      eq: function eq(v1, v2) {
	        return v1 === v2;
	      },
	      ne: function ne(v1, v2) {
	        return v1 !== v2;
	      },
	      lt: function lt(v1, v2) {
	        return v1 < v2;
	      },
	      gt: function gt(v1, v2) {
	        return v1 > v2;
	      },
	      lte: function lte(v1, v2) {
	        return v1 <= v2;
	      },
	      gte: function gte(v1, v2) {
	        return v1 >= v2;
	      },
	      and: function and() {
	        var _context;

	        return every$2(_context = slice$3(Array.prototype).call(arguments)).call(_context, Boolean);
	      },
	      or: function or() {
	        var _context2;

	        return some$2(_context2 = slice$3(Array.prototype).call(arguments, 0, -1)).call(_context2, Boolean);
	      }
	    });
	    this.registerHelper({
	      add: function add(a1, a2) {
	        return a1 + a2;
	      },
	      sub: function sub(a1, a2) {
	        return a1 - a2;
	      },
	      mul: function mul(a1, a2) {
	        return a1 * a2;
	      },
	      div: function div(a1, a2) {
	        return a1 / a2;
	      },
	      mod: function mod(a1, a2) {
	        return a1 % a2;
	      }
	    });
	    this.registerHelper('every', function () {
	      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var values = slice$3(args).call(args, 0, args.length - 1);

	      var options = args[args.length - 1];
	      return every$2(values).call(values, function (v) {
	        return v;
	      }) ? options.fn(this) : options.inverse(this);
	    });
	    this.registerHelper('formatPhoneNumber', function (phoneNumberString) {
	      var cleaned = ('' + phoneNumberString).replace(/\D/g, '');
	      var match = cleaned.match(/^(1|)?(\d{3})(\d{3})(\d{4})$/);

	      if (match) {
	        var intlCode = match[1] ? '+1 ' : '';
	        return [intlCode, '(', match[2], ') ', match[3], '-', match[4]].join('');
	      }

	      return null;
	    });
	    this.registerHelper('assign', function (name, value, options) {
	      var args = arguments;
	      options = args[args.length - 1];

	      if (!options.data.root) {
	        options.data.root = {};
	      }

	      var v = '';

	      for (var i = 1; i < args.length - 1; i++) {
	        v = v + args[i];
	      }

	      options.data.root[name] = v;
	    });
	    this.registerHelper('json', function (name, value, options) {
	      return name === undefined ? '' : stringify$2(name);
	    });
	    this.registerHelper('plural', function (number, singularText, pluralText) {
	      return number === 1 ? singularText : pluralText;
	    });
	    var self = this;
	    this.registerHelper('processTranslation', function (options) {
	      var _context3;

	      var pluralizationInfo = {};
	      var interpolationParams = {};
	      var _options$hash = options.hash,
	          phrase = _options$hash.phrase,
	          count = _options$hash.count,
	          locale = _options$hash.locale;

	      forEach$4(_context3 = entries$2(options.hash)).call(_context3, function (_ref) {
	        var key = _ref[0],
	            value = _ref[1];

	        if (startsWith$2(key).call(key, 'pluralForm')) {
	          var pluralFormIndex = _parseInt$2(key.substring(10));

	          pluralizationInfo[pluralFormIndex] = value;
	        } else {
	          interpolationParams[key] = value;
	        }
	      });

	      var isUsingPluralization = typeof phrase !== 'string';
	      locale = locale || self._initLocale;
	      var language = locale.substring(0, 2);
	      return isUsingPluralization ? TranslationProcessor.process(pluralizationInfo, interpolationParams, count, language) : TranslationProcessor.process(phrase, interpolationParams);
	    });
	    self.registerHelper('icon', function (name, complexContentsParams, options) {
	      var icon = Icons["default"];

	      if (!Icons[name]) {
	        return self.SafeString(icon);
	      }

	      if (typeof Icons[name] === 'function') {
	        icon = Icons[name](complexContentsParams);
	      } else {
	        icon = Icons[name];
	      }

	      return self.SafeString(icon);
	    });
	    self.registerHelper('highlightValue', function (value, getInverted) {
	      var input = value.value || value.shortValue;
	      var highlightedVal = new HighlightedValue({
	        value: input,
	        matchedSubstrings: value.matchedSubstrings
	      });

	      var escapeFunction = function escapeFunction(val) {
	        return self.escapeExpression(val);
	      };

	      return getInverted ? self.SafeString(highlightedVal.getInvertedWithTransformFunction(escapeFunction)) : self.SafeString(highlightedVal.getWithTransformFunction(escapeFunction));
	    });
	  };

	  return HandlebarsRenderer;
	}(Renderer);

	/** @module */
	// E.g. Mustache, SOY, HandleBars, React, etc.

	var Renderers = {
	  SOY: Renderer,
	  Handlebars: HandlebarsRenderer
	};

	/** @module */

	/** The current lib version, reported with errors and analytics, injected by the build process */
	var LIB_VERSION = 'v1.7.0';
	/** The current locale, injected by the build process */

	var LOCALE = 'en';
	/** The identifier of the production environment */

	var PRODUCTION = 'production';
	/** The identifier of the sandbox environment */

	var SANDBOX = 'sandbox';
	/** The default url for compiled component templates */

	var COMPILED_TEMPLATES_URL = "https://assets.sitescdn.net/answers/" + LIB_VERSION + "/answerstemplates.compiled.min.js";
	/** The query source, reported with analytics */

	var QUERY_SOURCE = 'STANDARD';

	/**
	 * DefaultTemplatesLoader exposes an interface for loading the default set of compiled templates
	 * asynchronously from the server. Note that this class cannot be repurposed to fetch custom
	 * templates hosted by a client.
	 */

	var DefaultTemplatesLoader =
	/*#__PURE__*/
	function () {
	  function DefaultTemplatesLoader(onLoaded) {
	    if (!DefaultTemplatesLoader.setInstance(this)) {
	      return DefaultTemplatesLoader.getInstance();
	    }

	    this._templates = {};

	    this._onLoaded = onLoaded || function () {};
	  }

	  DefaultTemplatesLoader.setInstance = function setInstance(instance) {
	    if (!this.instance) {
	      this.instance = instance;
	      return true;
	    }

	    return false;
	  };

	  DefaultTemplatesLoader.getInstance = function getInstance() {
	    return this.instance;
	  };

	  var _proto = DefaultTemplatesLoader.prototype;

	  _proto.fetchTemplates = function fetchTemplates() {
	    // If template have already been loaded, do nothing
	    var node = DOM.query('#yext-answers-templates');

	    if (node) {
	      return promise$3.resolve();
	    } // Inject a script to fetch the compiled templates,
	    // wrapping it a Promise for cleanliness


	    return new promise$3(function (resolve, reject) {
	      var script = DOM.createEl('script', {
	        id: 'yext-answers-templates',
	        onload: resolve,
	        onerror: reject,
	        async: true,
	        src: COMPILED_TEMPLATES_URL
	      });
	      DOM.append('body', script);
	    });
	  }
	  /**
	   * register the templates internally so that they can be later consumed
	   * (e.g. by components and renderers) with convienience.
	   *
	   * This is called from inside handlebarswrapper.txt.
	   */
	  ;

	  _proto.register = function register(templates) {
	    this._templates = templates; // Notify our consumers that the templates are here :)

	    this._onLoaded(this._templates);

	    return this;
	  };

	  _proto.get = function get(templateName) {
	    return this._templates[templateName];
	  }
	  /**
	   * @return The internal template collection
	   */
	  ;

	  _proto.getTemplates = function getTemplates() {
	    return this._templates;
	  };

	  return DefaultTemplatesLoader;
	}();

	/** @module */

	var nativeReverse = [].reverse;
	var test$2 = [1, 2];

	// `Array.prototype.reverse` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.reverse
	// fix for Safari 12.0 bug
	// https://bugs.webkit.org/show_bug.cgi?id=188794
	_export({ target: 'Array', proto: true, forced: String(test$2) === String(test$2.reverse()) }, {
	  reverse: function reverse() {
	    // eslint-disable-next-line no-self-assign
	    if (isArray(this)) this.length = this.length;
	    return nativeReverse.call(this);
	  }
	});

	var reverse = entryVirtual('Array').reverse;

	var ArrayPrototype$e = Array.prototype;

	var reverse_1 = function (it) {
	  var own = it.reverse;
	  return it === ArrayPrototype$e || (it instanceof Array && own === ArrayPrototype$e.reverse) ? reverse : own;
	};

	var reverse$1 = reverse_1;

	var reverse$2 = reverse$1;

	var bind$4 = bind_1;

	var bind$5 = bind$4;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;

	    defineProperty$5(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	var createClass = _createClass;

	var lodash_clonedeep = createCommonjsModule(function (module, exports) {
	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Detect free variable `exports`. */
	var freeExports = exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/**
	 * Adds the key-value `pair` to `map`.
	 *
	 * @private
	 * @param {Object} map The map to modify.
	 * @param {Array} pair The key-value pair to add.
	 * @returns {Object} Returns `map`.
	 */
	function addMapEntry(map, pair) {
	  // Don't return `map.set` because it's not chainable in IE 11.
	  map.set(pair[0], pair[1]);
	  return map;
	}

	/**
	 * Adds `value` to `set`.
	 *
	 * @private
	 * @param {Object} set The set to modify.
	 * @param {*} value The value to add.
	 * @returns {Object} Returns `set`.
	 */
	function addSetEntry(set, value) {
	  // Don't return `set.add` because it's not chainable in IE 11.
	  set.add(value);
	  return set;
	}

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array ? array.length : 0;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	function isHostObject(value) {
	  // Many host objects are `Object` objects that can coerce to strings
	  // despite having improperly defined `toString` methods.
	  var result = false;
	  if (value != null && typeof value.toString != 'function') {
	    try {
	      result = !!(value + '');
	    } catch (e) {}
	  }
	  return result;
	}

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols,
	    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeKeys = overArg(Object.keys, Object);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView'),
	    Map = getNative(root, 'Map'),
	    Promise = getNative(root, 'Promise'),
	    Set = getNative(root, 'Set'),
	    WeakMap = getNative(root, 'WeakMap'),
	    nativeCreate = getNative(Object, 'create');

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	}

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  return this.has(key) && delete this.__data__[key];
	}

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	}

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  return true;
	}

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  return getMapData(this, key)['delete'](key);
	}

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  getMapData(this, key).set(key, value);
	  return this;
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  this.__data__ = new ListCache(entries);
	}

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	}

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  return this.__data__['delete'](key);
	}

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var cache = this.__data__;
	  if (cache instanceof ListCache) {
	    var pairs = cache.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      return this;
	    }
	    cache = this.__data__ = new MapCache(pairs);
	  }
	  cache.set(key, value);
	  return this;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {boolean} [isFull] Specify a clone including symbols.
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      if (isHostObject(value)) {
	        return object ? value : {};
	      }
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, baseClone, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (!isArr) {
	    var props = isFull ? getAllKeys(value) : keys(value);
	  }
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
	  });
	  return result;
	}

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} prototype The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	function baseCreate(proto) {
	  return isObject(proto) ? objectCreate(proto) : {};
	}

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var result = new buffer.constructor(buffer.length);
	  buffer.copy(result);
	  return result;
	}

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	/**
	 * Creates a clone of `map`.
	 *
	 * @private
	 * @param {Object} map The map to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned map.
	 */
	function cloneMap(map, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
	  return arrayReduce(array, addMapEntry, new map.constructor);
	}

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	/**
	 * Creates a clone of `set`.
	 *
	 * @private
	 * @param {Object} set The set to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned set.
	 */
	function cloneSet(set, isDeep, cloneFunc) {
	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
	  return arrayReduce(array, addSetEntry, new set.constructor);
	}

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}

	/**
	 * Copies own symbol properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	/**
	 * Creates an array of the own enumerable symbol properties of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11,
	// for data views in Edge < 14, and promises in Node.js.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {Function} cloneFunc The function to clone values.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, cloneFunc, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return cloneMap(object, isDeep, cloneFunc);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return cloneSet(object, isDeep, cloneFunc);

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, true, true);
	}

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = cloneDeep;
	});

	/** @module EventEmitter */

	/**
	 * EventEmitter is a base class for any object that wants to expose
	 * a pub/sub interface, for emitting messages and providing listeners.
	 */
	var EventEmitter =
	/*#__PURE__*/
	function () {
	  function EventEmitter() {
	    /**
	     * The subscribers of messages
	     * @type {object[]}
	     * @private
	     */
	    this._listeners = {};
	  }
	  /**
	   * on is the public interface for subscribing events that are emitted.
	   * @param {string} evt the event name to listen to
	   * @param {function} cb The callback to invoke when the {evt} is emitted
	   * @param {boolean} once Optional value which will only handle the message once
	   */


	  var _proto = EventEmitter.prototype;

	  _proto.on = function on(evt, cb, once) {
	    if (typeof cb !== 'function') {
	      throw new Error('callback handler should be of type {function}');
	    }

	    if (this._listeners[evt] === undefined) {
	      this._listeners[evt] = [];
	    }

	    this._listeners[evt].push({
	      event: evt,
	      cb: cb,
	      once: once || false
	    });

	    return this;
	  }
	  /**
	   * once is the public interface for subscribing events that are emitted.
	   * The handler will only be triggered once.
	   *
	   * @param {string} evt the event name to listen to
	   * @param {function} cb The callback to invoke when the {evt} is emitted
	   * @param {boolean} once Optional value which will only handle the message once
	   */
	  ;

	  _proto.once = function once(evt, cb) {
	    return this.on(evt, cb, true);
	  }
	  /**
	   * off is the public interface for unsubscribing from an event
	   * @param {string} evt the event name to unsubscribe from
	   */
	  ;

	  _proto.off = function off(evt) {
	    delete this._listeners[evt];
	    return this;
	  }
	  /**
	   * emit is the public interface for broadcasting messages/events
	   * @param {string} evt the event name to publish from
	   * @param {Object} data the data to send along to the subscribers
	   */
	  ;

	  _proto.emit = function emit(evt, data) {
	    var listeners = this._listeners[evt];

	    if (listeners === undefined) {
	      return;
	    } // Invoke each of all the listener handlers and remove the ones that should fire only once.


	    var keep = [];

	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i].cb(data);

	      if (listeners[i].once === true) {
	        continue;
	      } // Instead of having a 'dirty' array with deleted or 'undefined' entries,
	      // we just create a brand new array without the listeners that were removed


	      keep.push(listeners[i]);
	    } // Update our old list of listeners to the newly created array


	    this._listeners[evt] = keep;
	    return this;
	  };

	  return EventEmitter;
	}();

	/**
	 * State contains the data for the component
	 * and exposes an {EventEmitter} interface so that external
	 * dependencies can listen/hook subscribe to messages/updates.
	 * @extends EventEmitter
	 */

	var State =
	/*#__PURE__*/
	function (_EventEmitter) {
	  inheritsLoose(State, _EventEmitter);

	  function State(data) {
	    var _this;

	    _this = _EventEmitter.call(this) || this;
	    /**
	     * The initial state of the component
	     * @type {Object}
	     * @private
	     */

	    _this._state = data || {};
	    return _this;
	  }
	  /**
	   * Set the initial state of the component.
	   * NOTE(billy): Does not fire an update message
	   */


	  var _proto = State.prototype;

	  _proto.init = function init(prop, optVal) {
	    this._set(prop, optVal);
	  }
	  /**
	   * setter for the state
	   * @param prop {string|Object} The property to set
	   * @param optVal Optional, if prop is a {string}, it will assign the value to that property
	   */
	  ;

	  _proto.set = function set(prop, optVal) {
	    this._set(prop, optVal);

	    this.emit('update');
	  }
	  /**
	   * setter for the state enables you to update a single property, or complete state
	   * depending on the arguments provided.
	   * @param prop {string|Object} The property to set
	   * @param optVal If prop is a {string}, provide its value
	   * @private
	   */
	  ;

	  _proto._set = function _set(prop, optVal) {
	    if (optVal === undefined) {
	      this._state = prop;
	    } else {
	      this._state[prop] = optVal;
	    }
	  };

	  _proto.update = function update(data) {
	    this._state = data;
	    this.emit('update');
	  }
	  /**
	   * Retrieve a properties value from the state
	   * If no property provided, return the full state
	   * @param {string} optProp optional property to retrieve
	   */
	  ;

	  _proto.get = function get(optProp) {
	    if (optProp === undefined) {
	      return this._state;
	    }

	    return this._state[optProp];
	  };

	  _proto.has = function has(prop) {
	    return this._state[prop] !== undefined;
	  };

	  _proto.asJSON = function asJSON() {
	    return this._state;
	  };

	  return State;
	}(EventEmitter);

	var create$3 = create;

	var create$4 = create$3;

	var non = '\u200B\u0085\u180E';

	// check that a method works with the correct list
	// of whitespaces and has a correct name
	var stringTrimForced = function (METHOD_NAME) {
	  return fails(function () {
	    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
	  });
	};

	var $trim = stringTrim.trim;


	// `String.prototype.trim` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.trim
	_export({ target: 'String', proto: true, forced: stringTrimForced('trim') }, {
	  trim: function trim() {
	    return $trim(this);
	  }
	});

	var trim$1 = entryVirtual('String').trim;

	var StringPrototype$2 = String.prototype;

	var trim_1 = function (it) {
	  var own = it.trim;
	  return typeof it === 'string' || it === StringPrototype$2
	    || (it instanceof String && own === StringPrototype$2.trim) ? trim$1 : own;
	};

	var trim$2 = trim_1;

	var trim$3 = trim$2;

	var entries$3 = entryVirtual('Array').entries;

	var entries$4 = entries$3;

	var ArrayPrototype$f = Array.prototype;

	var DOMIterables$2 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var entries_1 = function (it) {
	  var own = it.entries;
	  return it === ArrayPrototype$f || (it instanceof Array && own === ArrayPrototype$f.entries)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables$2.hasOwnProperty(classof(it)) ? entries$4 : own;
	};

	var entries$5 = entries_1;

	var nativeGetOwnPropertyNames$2 = objectGetOwnPropertyNamesExternal.f;

	var FAILS_ON_PRIMITIVES$4 = fails(function () { return !Object.getOwnPropertyNames(1); });

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$4 }, {
	  getOwnPropertyNames: nativeGetOwnPropertyNames$2
	});

	var Object$2 = path.Object;

	var getOwnPropertyNames = function getOwnPropertyNames(it) {
	  return Object$2.getOwnPropertyNames(it);
	};

	var getOwnPropertyNames$1 = getOwnPropertyNames;

	var getOwnPropertyNames$2 = getOwnPropertyNames$1;

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	var iterator = wellKnownSymbolWrapped.f('iterator');

	var iterator$1 = iterator;

	var iterator$2 = iterator$1;

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol('asyncIterator');

	// empty

	var es_symbol_description = /*#__PURE__*/Object.freeze({

	});

	// `Symbol.hasInstance` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
	defineWellKnownSymbol('hasInstance');

	// `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
	defineWellKnownSymbol('isConcatSpreadable');

	// `Symbol.match` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.match
	defineWellKnownSymbol('match');

	// `Symbol.matchAll` well-known symbol
	defineWellKnownSymbol('matchAll');

	// `Symbol.replace` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.replace
	defineWellKnownSymbol('replace');

	// `Symbol.search` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.search
	defineWellKnownSymbol('search');

	// `Symbol.species` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.species
	defineWellKnownSymbol('species');

	// `Symbol.split` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.split
	defineWellKnownSymbol('split');

	// `Symbol.toPrimitive` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
	defineWellKnownSymbol('toPrimitive');

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol('toStringTag');

	// `Symbol.unscopables` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.unscopables
	defineWellKnownSymbol('unscopables');

	// Math[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
	setToStringTag(Math, 'Math', true);

	// JSON[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
	setToStringTag(global_1.JSON, 'JSON', true);

	getCjsExportFromNamespace(es_symbol_description);

	var symbol = path.Symbol;

	var symbol$1 = symbol;

	var symbol$2 = symbol$1;

	var support = {
	  searchParams: 'URLSearchParams' in self,
	  iterable: 'Symbol' in self && 'iterator' in symbol$2,
	  blob: 'FileReader' in self && 'Blob' in self && function () {
	    try {
	      new Blob();
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }(),
	  formData: 'FormData' in self,
	  arrayBuffer: 'ArrayBuffer' in self
	};

	function isDataView(obj) {
	  return obj && DataView.prototype.isPrototypeOf(obj);
	}

	if (support.arrayBuffer) {
	  var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

	  var isArrayBufferView = ArrayBuffer.isView || function (obj) {
	    return obj && indexOf$5(viewClasses).call(viewClasses, Object.prototype.toString.call(obj)) > -1;
	  };
	}

	function normalizeName(name) {
	  if (typeof name !== 'string') {
	    name = String(name);
	  }

	  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
	    throw new TypeError('Invalid character in header field name');
	  }

	  return name.toLowerCase();
	}

	function normalizeValue(value) {
	  if (typeof value !== 'string') {
	    value = String(value);
	  }

	  return value;
	} // Build a destructive iterator for the value list


	function iteratorFor(items) {
	  var iterator = {
	    next: function next() {
	      var value = items.shift();
	      return {
	        done: value === undefined,
	        value: value
	      };
	    }
	  };

	  if (support.iterable) {
	    iterator[iterator$2] = function () {
	      return iterator;
	    };
	  }

	  return iterator;
	}

	function Headers$1(headers) {
	  this.map = {};

	  if (headers instanceof Headers$1) {
	    forEach$4(headers).call(headers, function (value, name) {
	      this.append(name, value);
	    }, this);
	  } else if (isArray$3(headers)) {
	    forEach$4(headers).call(headers, function (header) {
	      this.append(header[0], header[1]);
	    }, this);
	  } else if (headers) {
	    var _context;

	    forEach$4(_context = getOwnPropertyNames$2(headers)).call(_context, function (name) {
	      this.append(name, headers[name]);
	    }, this);
	  }
	}

	Headers$1.prototype.append = function (name, value) {
	  name = normalizeName(name);
	  value = normalizeValue(value);

	  var oldValue = map$2(this)[name];

	  map$2(this)[name] = oldValue ? oldValue + ', ' + value : value;
	};

	Headers$1.prototype['delete'] = function (name) {
	  delete map$2(this)[normalizeName(name)];
	};

	Headers$1.prototype.get = function (name) {
	  name = normalizeName(name);
	  return this.has(name) ? map$2(this)[name] : null;
	};

	Headers$1.prototype.has = function (name) {
	  return map$2(this).hasOwnProperty(normalizeName(name));
	};

	Headers$1.prototype.set = function (name, value) {
	  map$2(this)[normalizeName(name)] = normalizeValue(value);
	};

	Headers$1.prototype.forEach = function (callback, thisArg) {
	  for (var name in map$2(this)) {
	    if (map$2(this).hasOwnProperty(name)) {
	      callback.call(thisArg, map$2(this)[name], name, this);
	    }
	  }
	};

	Headers$1.prototype.keys = function () {
	  var _context2;

	  var items = [];

	  forEach$4(_context2 = this).call(_context2, function (value, name) {
	    items.push(name);
	  });

	  return iteratorFor(items);
	};

	Headers$1.prototype.values = function () {
	  var _context3;

	  var items = [];

	  forEach$4(_context3 = this).call(_context3, function (value) {
	    items.push(value);
	  });

	  return iteratorFor(items);
	};

	Headers$1.prototype.entries = function () {
	  var _context4;

	  var items = [];

	  forEach$4(_context4 = this).call(_context4, function (value, name) {
	    items.push([name, value]);
	  });

	  return iteratorFor(items);
	};

	if (support.iterable) {
	  Headers$1.prototype[iterator$2] = entries$5(Headers$1.prototype);
	}

	function consumed(body) {
	  if (body.bodyUsed) {
	    return promise$3.reject(new TypeError('Already read'));
	  }

	  body.bodyUsed = true;
	}

	function fileReaderReady(reader) {
	  return new promise$3(function (resolve, reject) {
	    reader.onload = function () {
	      resolve(reader.result);
	    };

	    reader.onerror = function () {
	      reject(reader.error);
	    };
	  });
	}

	function readBlobAsArrayBuffer(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsArrayBuffer(blob);
	  return promise;
	}

	function readBlobAsText(blob) {
	  var reader = new FileReader();
	  var promise = fileReaderReady(reader);
	  reader.readAsText(blob);
	  return promise;
	}

	function readArrayBufferAsText(buf) {
	  var view = new Uint8Array(buf);
	  var chars = new Array(view.length);

	  for (var i = 0; i < view.length; i++) {
	    chars[i] = String.fromCharCode(view[i]);
	  }

	  return chars.join('');
	}

	function bufferClone(buf) {
	  if (slice$3(buf)) {
	    return slice$3(buf).call(buf, 0);
	  } else {
	    var view = new Uint8Array(buf.byteLength);
	    view.set(new Uint8Array(buf));
	    return view.buffer;
	  }
	}

	function Body() {
	  this.bodyUsed = false;

	  this._initBody = function (body) {
	    this._bodyInit = body;

	    if (!body) {
	      this._bodyText = '';
	    } else if (typeof body === 'string') {
	      this._bodyText = body;
	    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	      this._bodyBlob = body;
	    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	      this._bodyFormData = body;
	    } else if (support.searchParams && urlSearchParams$2.prototype.isPrototypeOf(body)) {
	      this._bodyText = body.toString();
	    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	      this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

	      this._bodyInit = new Blob([this._bodyArrayBuffer]);
	    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	      this._bodyArrayBuffer = bufferClone(body);
	    } else {
	      this._bodyText = body = Object.prototype.toString.call(body);
	    }

	    if (!this.headers.get('content-type')) {
	      if (typeof body === 'string') {
	        this.headers.set('content-type', 'text/plain;charset=UTF-8');
	      } else if (this._bodyBlob && this._bodyBlob.type) {
	        this.headers.set('content-type', this._bodyBlob.type);
	      } else if (support.searchParams && urlSearchParams$2.prototype.isPrototypeOf(body)) {
	        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
	      }
	    }
	  };

	  if (support.blob) {
	    this.blob = function () {
	      var rejected = consumed(this);

	      if (rejected) {
	        return rejected;
	      }

	      if (this._bodyBlob) {
	        return promise$3.resolve(this._bodyBlob);
	      } else if (this._bodyArrayBuffer) {
	        return promise$3.resolve(new Blob([this._bodyArrayBuffer]));
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as blob');
	      } else {
	        return promise$3.resolve(new Blob([this._bodyText]));
	      }
	    };

	    this.arrayBuffer = function () {
	      if (this._bodyArrayBuffer) {
	        return consumed(this) || promise$3.resolve(this._bodyArrayBuffer);
	      } else {
	        return this.blob().then(readBlobAsArrayBuffer);
	      }
	    };
	  }

	  this.text = function () {
	    var rejected = consumed(this);

	    if (rejected) {
	      return rejected;
	    }

	    if (this._bodyBlob) {
	      return readBlobAsText(this._bodyBlob);
	    } else if (this._bodyArrayBuffer) {
	      return promise$3.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
	    } else if (this._bodyFormData) {
	      throw new Error('could not read FormData body as text');
	    } else {
	      return promise$3.resolve(this._bodyText);
	    }
	  };

	  if (support.formData) {
	    this.formData = function () {
	      return this.text().then(decode);
	    };
	  }

	  this.json = function () {
	    return this.text().then(JSON.parse);
	  };

	  return this;
	} // HTTP methods whose capitalization should be normalized


	var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

	function normalizeMethod(method) {
	  var upcased = method.toUpperCase();
	  return indexOf$5(methods).call(methods, upcased) > -1 ? upcased : method;
	}

	function Request(input, options) {
	  options = options || {};
	  var body = options.body;

	  if (input instanceof Request) {
	    if (input.bodyUsed) {
	      throw new TypeError('Already read');
	    }

	    this.url = input.url;
	    this.credentials = input.credentials;

	    if (!options.headers) {
	      this.headers = new Headers$1(input.headers);
	    }

	    this.method = input.method;
	    this.mode = input.mode;
	    this.signal = input.signal;

	    if (!body && input._bodyInit != null) {
	      body = input._bodyInit;
	      input.bodyUsed = true;
	    }
	  } else {
	    this.url = String(input);
	  }

	  this.credentials = options.credentials || this.credentials || 'same-origin';

	  if (options.headers || !this.headers) {
	    this.headers = new Headers$1(options.headers);
	  }

	  this.method = normalizeMethod(options.method || this.method || 'GET');
	  this.mode = options.mode || this.mode || null;
	  this.signal = options.signal || this.signal;
	  this.referrer = null;

	  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	    throw new TypeError('Body not allowed for GET or HEAD requests');
	  }

	  this._initBody(body);
	}

	Request.prototype.clone = function () {
	  return new Request(this, {
	    body: this._bodyInit
	  });
	};

	function decode(body) {
	  var _context5;

	  var form = new FormData();

	  forEach$4(_context5 = trim$3(body).call(body).split('&')).call(_context5, function (bytes) {
	    if (bytes) {
	      var split = bytes.split('=');
	      var name = split.shift().replace(/\+/g, ' ');
	      var value = split.join('=').replace(/\+/g, ' ');
	      form.append(decodeURIComponent(name), decodeURIComponent(value));
	    }
	  });

	  return form;
	}

	function parseHeaders(rawHeaders) {
	  var _context6;

	  var headers = new Headers$1(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
	  // https://tools.ietf.org/html/rfc7230#section-3.2

	  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');

	  forEach$4(_context6 = preProcessedHeaders.split(/\r?\n/)).call(_context6, function (line) {
	    var _context7;

	    var parts = line.split(':');

	    var key = trim$3(_context7 = parts.shift()).call(_context7);

	    if (key) {
	      var _context8;

	      var value = trim$3(_context8 = parts.join(':')).call(_context8);

	      headers.append(key, value);
	    }
	  });

	  return headers;
	}

	Body.call(Request.prototype);
	function Response(bodyInit, options) {
	  if (!options) {
	    options = {};
	  }

	  this.type = 'default';
	  this.status = options.status === undefined ? 200 : options.status;
	  this.ok = this.status >= 200 && this.status < 300;
	  this.statusText = 'statusText' in options ? options.statusText : 'OK';
	  this.headers = new Headers$1(options.headers);
	  this.url = options.url || '';

	  this._initBody(bodyInit);
	}
	Body.call(Response.prototype);

	Response.prototype.clone = function () {
	  return new Response(this._bodyInit, {
	    status: this.status,
	    statusText: this.statusText,
	    headers: new Headers$1(this.headers),
	    url: this.url
	  });
	};

	Response.error = function () {
	  var response = new Response(null, {
	    status: 0,
	    statusText: ''
	  });
	  response.type = 'error';
	  return response;
	};

	var redirectStatuses = [301, 302, 303, 307, 308];

	Response.redirect = function (url, status) {
	  if (indexOf$5(redirectStatuses).call(redirectStatuses, status) === -1) {
	    throw new RangeError('Invalid status code');
	  }

	  return new Response(null, {
	    status: status,
	    headers: {
	      location: url
	    }
	  });
	};

	var DOMException = self.DOMException;

	try {
	  new DOMException();
	} catch (err) {
	  DOMException = function DOMException(message, name) {
	    this.message = message;
	    this.name = name;
	    var error = Error(message);
	    this.stack = error.stack;
	  };

	  DOMException.prototype = create$4(Error.prototype);
	  DOMException.prototype.constructor = DOMException;
	}

	function fetch$1(input, init) {
	  return new promise$3(function (resolve, reject) {
	    var _context9;

	    var request = new Request(input, init);

	    if (request.signal && request.signal.aborted) {
	      return reject(new DOMException('Aborted', 'AbortError'));
	    }

	    var xhr = new XMLHttpRequest();

	    function abortXhr() {
	      xhr.abort();
	    }

	    xhr.onload = function () {
	      var options = {
	        status: xhr.status,
	        statusText: xhr.statusText,
	        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	      };
	      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
	      var body = 'response' in xhr ? xhr.response : xhr.responseText;
	      resolve(new Response(body, options));
	    };

	    xhr.onerror = function () {
	      reject(new TypeError('Network request failed'));
	    };

	    xhr.ontimeout = function () {
	      reject(new TypeError('Network request failed'));
	    };

	    xhr.onabort = function () {
	      reject(new DOMException('Aborted', 'AbortError'));
	    };

	    xhr.open(request.method, request.url, true);

	    if (request.credentials === 'include') {
	      xhr.withCredentials = true;
	    } else if (request.credentials === 'omit') {
	      xhr.withCredentials = false;
	    }

	    if ('responseType' in xhr && support.blob) {
	      xhr.responseType = 'blob';
	    }

	    forEach$4(_context9 = request.headers).call(_context9, function (value, name) {
	      xhr.setRequestHeader(name, value);
	    });

	    if (request.signal) {
	      request.signal.addEventListener('abort', abortXhr);

	      xhr.onreadystatechange = function () {
	        // DONE (success or failure)
	        if (xhr.readyState === 4) {
	          request.signal.removeEventListener('abort', abortXhr);
	        }
	      };
	    }

	    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
	  });
	}
	fetch$1.polyfill = true;

	if (!self.fetch) {
	  self.fetch = fetch$1;
	  self.Headers = Headers$1;
	  self.Request = Request;
	  self.Response = Response;
	}

	/**
	 * Types of HTTP requests
	 */

	var Methods = {
	  GET: 'get',
	  POST: 'post',
	  PUT: 'put',
	  DELETE: 'delete'
	};
	/**
	 * HttpRequester is a wrapper around the native implementation of AJAX
	 * related matters. It's used to make all types of network requests
	 * and exposes a promise interface.
	 */

	var HttpRequester =
	/*#__PURE__*/
	function () {
	  function HttpRequester() {}

	  var _proto = HttpRequester.prototype;

	  /**
	   * Create a GET HTTP request
	   * @param {string} url The url to make a request to
	   * @param {Object} data The data to provide (gets encoded into the URL)
	   * @param {Object} opts Configuration options to use for the request
	   */
	  _proto.get = function get(url, data, opts) {
	    return this.request(Methods.GET, this.encodeParams(url, data), opts);
	  }
	  /**
	   * Create a POST HTTP request
	   * @param {string} url The url to make a request to
	   * @param {Object} urlParams The params to encode into the URL
	   * @param {Object} jsonBody The request body (json) to provide with the POST request
	   * @param {Object} requestConfig Configuration options to use for the request
	   */
	  ;

	  _proto.post = function post(url, urlParams, jsonBody, requestConfig) {
	    return this.request(Methods.POST, this.encodeParams(url, urlParams), _extends_1({}, {
	      body: stringify$2(jsonBody),
	      credentials: undefined
	    }, requestConfig));
	  };

	  _proto.request = function request(method, url, opts) {
	    var reqArgs = _extends_1({}, {
	      'method': method,
	      'credentials': 'include'
	    }, opts);

	    return this._fetch(url, reqArgs);
	  } // TODO (agrow) investigate removing this
	  // Use imported fetchPolyfill if it does not already exist on window
	  ;

	  _proto._fetch = function _fetch(url, reqArgs) {
	    if (!window.fetch) {
	      return fetch$1(url, reqArgs);
	    }

	    return fetch(url, reqArgs);
	  }
	  /**
	   * Send a beacon to the provided url which will send a non-blocking request
	   * to the server that is guaranteed to send before page load. No response is returned,
	   * so beacons are primarily used for analytics reporting.
	   * @param {string} url The url to send the beacon to
	   * @param {object} data The data payload to send in the beacon
	   * @return {boolean} true if the request is successfully queued
	   */
	  ;

	  _proto.beacon = function beacon(url, data) {
	    return this._sendBeacon(url, stringify$2(data));
	  } // TODO (agrow) investigate removing this
	  // Navigator.sendBeacon polyfill
	  // Combination of the compact Financial Times polyfill:
	  // https://github.com/Financial-Times/polyfill-library/blob/master/polyfills/navigator/sendBeacon/polyfill.js
	  // with the async-by-default behavior of Miguel Mota's polyfill:
	  // https://github.com/miguelmota/Navigator.sendBeacon/blob/master/sendbeacon.js
	  ;

	  _proto._sendBeacon = function _sendBeacon(url, data) {
	    if (window.navigator && window.navigator.sendBeacon) {
	      return window.navigator.sendBeacon(url, data);
	    }

	    var event = window.event && window.event.type;
	    var sync = event === 'unload' || event === 'beforeunload';
	    var xhr = 'XMLHttpRequest' in window ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
	    xhr.open('POST', url, !sync);
	    xhr.setRequestHeader('Accept', '*/*');

	    if (typeof data === 'string') {
	      xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
	    } else if (Object.prototype.toString.call(data) === '[object Blob]') {
	      if (data.type) {
	        xhr.setRequestHeader('Content-Type', data.type);
	      }
	    }

	    xhr.send(data);
	    return true;
	  };

	  _proto.encodeParams = function encodeParams(url, params) {
	    if (typeof params !== 'object') {
	      return;
	    }

	    var hasParam = indexOf$5(url).call(url, '?') > -1;
	    var searchQuery = '';

	    for (var key in params) {
	      if (!hasParam) {
	        hasParam = true;
	        searchQuery += '?';
	      } else {
	        searchQuery += '&';
	      }

	      searchQuery += key + '=' + encodeURIComponent(params[key]);
	    }

	    return url + searchQuery;
	  };

	  return HttpRequester;
	}();

	var getIterator_1 = getIterator;

	var getIterator$1 = getIterator_1;

	/** @module */

	/**
	 * An enum listing the different Component types supported in the SDK
	 * TODO: add all component types
	 * @type {Object.<string, string>}
	 */
	var ComponentTypes = {
	  FILTER_BOX: 'FilterBox',
	  FILTER_OPTIONS: 'FilterOptions',
	  RANGE_FILTER: 'RangeFilter',
	  DATE_RANGE_FILTER: 'DateRangeFilter',
	  FACETS: 'Facets',
	  GEOLOCATION_FILTER: 'GeoLocationFilter',
	  SORT_OPTIONS: 'SortOptions',
	  FILTER_SEARCH: 'FilterSearch'
	};

	/**
	 * Returns the base url for the live api backend in the desired environment.
	 * @param {string} env The desired environment.
	 */

	function getLiveApiUrl(env) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi.yext.com';
	}
	/**
	 * Returns the base url for the live api backend in the desired environment.
	 * @param {string} env The desired environment.
	 */

	function getCachedLiveApiUrl(env) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  return env === SANDBOX ? 'https://liveapi-sandbox.yext.com' : 'https://liveapi-cached.yext.com';
	}
	/**
	 * Returns the base url for the knowledge api backend in the desired environment.
	 * @param {string} env The desired environment.
	 */

	function getKnowledgeApiUrl(env) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  return env === SANDBOX ? 'https://api-sandbox.yext.com' : 'https://api.yext.com';
	}
	/**
	 * Returns the base url for the analytics backend in the desired environment.
	 * @param {string} env The desired environment.
	 * @param {boolean} conversionTrackingEnabled If conversion tracking has been opted into.
	 */

	function getAnalyticsUrl(env, conversionTrackingEnabled) {
	  if (env === void 0) {
	    env = PRODUCTION;
	  }

	  if (conversionTrackingEnabled === void 0) {
	    conversionTrackingEnabled = false;
	  }

	  if (conversionTrackingEnabled) {
	    return env === SANDBOX ? 'https://sandbox-realtimeanalytics.yext.com' : 'https://realtimeanalytics.yext.com';
	  }

	  return env === SANDBOX ? 'https://sandbox-answers.yext-pixel.com' : 'https://answers.yext-pixel.com';
	}
	/**
	 * Returns the passed in url with the passed in params appended as query params
	 * Note: query parameters in the url are stripped, you should include those query parameters
	 * in `params` if you want to keep them
	 * @param {string} url
	 * @param {SearchParams} params to add to the url
	 * @returns {string}
	 */

	function replaceUrlParams(url, params) {
	  if (params === void 0) {
	    params = new SearchParams();
	  }

	  return url.split('?')[0] + '?' + params.toString();
	}
	/**
	 * Returns the given url without query params and hashes
	 * @param {string} url Full url e.g. https://yext.com/?query=hello#Footer
	 * @returns {string} Url without query params and hashes e.g. https://yext.com/
	 */

	function urlWithoutQueryParamsAndHash(url) {
	  return url.split('?')[0].split('#')[0];
	}
	/**
	 * returns if two SearchParams objects have the same key,value entries
	 * @param {SearchParams} params1
	 * @param {SearchParams} params2
	 * @return {boolean} true if params1 and params2 have the same key,value entries, false otherwise
	 */

	function equivalentParams(params1, params2) {
	  var entries1 = from_1$2(entries$5(params1).call(params1));

	  var entries2 = from_1$2(entries$5(params2).call(params2));

	  if (entries1.length !== entries2.length) {
	    return false;
	  }

	  for (var _iterator = entries$5(params1).call(params1), _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var _ref2 = _ref,
	        key = _ref2[0],
	        val = _ref2[1];

	    if (val !== params2.get(key)) {
	      return false;
	    }
	  }

	  return true;
	}
	/**
	 * Creates a copy of the provided {@link SearchParams}, with the specified
	 * attributes filtered out
	 * @param {SearchParams} params The parameters to remove from
	 * @param {string[]} prefixes The prefixes of parameters to remove
	 * @return {SearchParams} A new instance of SearchParams without entries with
	 *   keys that start with the given prefixes
	 */

	function removeParamsWithPrefixes(params, prefixes) {
	  var newParams = new SearchParams();

	  var _loop = function _loop() {
	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) return "break";
	      _ref3 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) return "break";
	      _ref3 = _i2.value;
	    }

	    var _ref4 = _ref3,
	        key = _ref4[0],
	        val = _ref4[1];

	    var includeEntry = every$2(prefixes).call(prefixes, function (prefix) {
	      return !startsWith$2(key).call(key, prefix);
	    });

	    if (includeEntry) {
	      newParams.set(key, val);
	    }
	  };

	  for (var _iterator2 = entries$5(params).call(params), _isArray2 = isArray$3(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : getIterator$1(_iterator2);;) {
	    var _ref3;

	    var _ret = _loop();

	    if (_ret === "break") break;
	  }

	  return newParams;
	}
	/**
	 * Removes parameters for filters, facets, sort options, and pagination
	 * from the provided {@link SearchParams}. This is useful for constructing
	 * inter-experience answers links.
	 * @param {SearchParams} params The parameters to remove from
	 * @param {function} getComponentNamesForComponentTypes Given string[]
	 *   component types, returns string[] component names for those types
	 * @return {SearchParams} Parameters that have filtered out params that
	 *   should not persist across the answers experience
	 */

	function filterParamsForExperienceLink(params, getComponentNamesForComponentTypes) {
	  var componentTypesToExclude = [ComponentTypes.FACETS, ComponentTypes.FILTER_BOX, ComponentTypes.FILTER_OPTIONS, ComponentTypes.RANGE_FILTER, ComponentTypes.DATE_RANGE_FILTER, ComponentTypes.SORT_OPTIONS, ComponentTypes.GEOLOCATION_FILTER, ComponentTypes.FILTER_SEARCH];

	  var paramsToFilter = flatMap$2(componentTypesToExclude).call(componentTypesToExclude, function (type) {
	    var params = getComponentNamesForComponentTypes([type]);

	    if (type === ComponentTypes.GEOLOCATION_FILTER || type === ComponentTypes.FILTER_SEARCH) {
	      params = map$2(params).call(params, function (param) {
	        return StorageKeys.QUERY + "." + param;
	      });
	    }

	    return params;
	  });

	  paramsToFilter = concat$4(paramsToFilter).call(paramsToFilter, [StorageKeys.FILTER]);
	  var newParams = removeParamsWithPrefixes(params, paramsToFilter);
	  newParams["delete"](StorageKeys.SEARCH_OFFSET);
	  return newParams;
	}

	/**
	 * ApiRequest is the base class for all API requests.
	 * It defines all of the core properties required to make a request
	 */

	var ApiRequest =
	/*#__PURE__*/
	function () {
	  // TODO (tmeyer): Create an ApiService interface and pass an implementation to the current
	  // consumers of ApiRequest as a dependency.
	  function ApiRequest(opts, globalStorage) {
	    if (opts === void 0) {
	      opts = {};
	    }

	    /**
	     * An abstraction used for making network request and handling errors
	     * @type {HttpRequester}
	     * @private
	     */
	    this._requester = new HttpRequester();
	    /**
	     * The environment the request should be made to
	     * @type {string}
	     * @private
	     */

	    this._environment = opts.environment || PRODUCTION;
	    /**
	     * The baseUrl to use for making a request
	     * @type {string}
	     * @private
	     */

	    this._baseUrl = opts.baseUrl || getLiveApiUrl(this._environment);
	    /**
	     * The endpoint to use in the url (appended to the {baseUrl})
	     * @type {string}
	     * @private
	     */

	    this._endpoint = opts.endpoint || null;
	    /**
	     * The API Key to use for the request
	     * @type {string}
	     * @private
	     */

	    this._apiKey = opts.apiKey || null;
	    /**
	     * The version of the API to make a request to
	     * @type {string}
	     * @private
	     */

	    this._version = opts.version || 20190101;
	    /**
	     * Additional data params that are sent along with the request
	     * @type {string}
	     * @private
	     */

	    this._params = opts.params || {};

	    if (!globalStorage) {
	      throw new AnswersBasicError('Must include global storage', 'ApiRequest');
	    }
	    /**
	     * @type {GlobalStorage}
	     * @private
	     */


	    this._globalStorage = globalStorage;
	  }
	  /**
	   * get creates a new `GET` request to the server using the configuration of the request class
	   *
	   * @param {Object} opts Any configuration options to use for the GET request.
	   * @returns {Promise<Response>}
	   */


	  var _proto = ApiRequest.prototype;

	  _proto.get = function get(opts) {
	    return this._requester.get(this._baseUrl + this._endpoint, _extends_1({}, this.baseParams(), this.sanitizeParams(this._params)), opts);
	  }
	  /**
	   * @param {Object} opts
	   * @returns {Promise<Response>}
	   */
	  ;

	  _proto.post = function post(opts) {
	    return this._requester.post(this._baseUrl + this._endpoint, this.baseParams()
	    /* urlParams */
	    , this.sanitizeParams(this._params)
	    /* jsonBody */
	    , opts
	    /* requestConfig */
	    );
	  }
	  /**
	   * @returns {Object}
	   * @private
	   */
	  ;

	  _proto.baseParams = function baseParams() {
	    var baseParams = {
	      'v': this._version,
	      'api_key': this._apiKey,
	      'jsLibVersion': LIB_VERSION,
	      'sessionTrackingEnabled': this._globalStorage.getState(StorageKeys.SESSIONS_OPT_IN).value
	    };
	    var urlParams = new SearchParams(window.location.search.substring(1));

	    if (urlParams.has('beta')) {
	      baseParams['beta'] = urlParams.get('beta');
	    }

	    return baseParams;
	  };

	  _proto.sanitizeParams = function sanitizeParams(params) {
	    var _context;

	    if (params === void 0) {
	      params = {};
	    }

	    // Remove any paramaters whos value is `undefined`.
	    //
	    // NOTE(billy) Probably better to be explicit about how to handle this at the request building level,
	    // but I can't see any cases where we'd ever want to send 'undefined' as a value to the server.
	    // So it's probably fine to 'clean' the params object here
	    forEach$4(_context = keys$5(params)).call(_context, function (key) {
	      if (params[key] === undefined || params[key] === null) {
	        delete params[key];
	      }
	    });

	    return params;
	  };

	  return ApiRequest;
	}();

	/**
	 * SearchApi is the API for doing various types of search
	 * over the network (e.g. vertical or universal)
	 *
	 * @implements {SearchService}
	 */

	var SearchApi =
	/*#__PURE__*/
	function () {
	  function SearchApi(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * A local reference to the API Key to use for the request
	     * @type {string}
	     * @private
	     */
	    if (!config.apiKey) {
	      throw new AnswersBasicError('Api Key is required', 'Search');
	    }

	    this._apiKey = config.apiKey;
	    /**
	     * A local reference to the Answers Key to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.experienceKey) {
	      throw new AnswersBasicError('Answers Key is required', 'Search');
	    }

	    this._experienceKey = config.experienceKey;
	    /**
	     * The answers config version to use for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceVersion = config.experienceVersion;
	    /**
	     * The version of the API to make a request to
	     * @type {string}
	     * @private
	     */

	    this._version = config.version || 20190101 || 20190301;
	    /**
	     * A local reference to the locale to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.locale) {
	      throw new AnswersBasicError('Locale is required', 'Search');
	    }

	    this._locale = config.locale;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = config.environment;
	  }
	  /** @inheritdoc */


	  var _proto = SearchApi.prototype;

	  _proto.verticalSearch = function verticalSearch(verticalKey, _ref) {
	    var input = _ref.input,
	        filter = filter$4(_ref),
	        facetFilter = _ref.facetFilter,
	        limit = _ref.limit,
	        offset = _ref.offset,
	        id = _ref.id,
	        geolocation = _ref.geolocation,
	        isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
	        skipSpellCheck = _ref.skipSpellCheck,
	        queryTrigger = _ref.queryTrigger,
	        sessionTrackingEnabled = _ref.sessionTrackingEnabled,
	        sortBys = _ref.sortBys,
	        locationRadius = _ref.locationRadius,
	        context = _ref.context,
	        referrerPageUrl = _ref.referrerPageUrl,
	        querySource = _ref.querySource;

	    if (limit > 50) {
	      throw new AnswersCoreError('Provided search limit unsupported', 'SearchApi');
	    }

	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/vertical/query',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        input: input,
	        experienceKey: this._experienceKey,
	        version: this._experienceVersion,
	        filters: filter,
	        facetFilters: facetFilter,
	        verticalKey: verticalKey,
	        limit: limit,
	        offset: offset,
	        location: geolocation ? geolocation.lat + "," + geolocation.lng : null,
	        queryId: id,
	        retrieveFacets: isDynamicFiltersEnabled,
	        locale: this._locale,
	        skipSpellCheck: skipSpellCheck,
	        queryTrigger: queryTrigger,
	        sessionTrackingEnabled: sessionTrackingEnabled,
	        sortBys: sortBys,
	        locationRadius: locationRadius,
	        context: context,
	        referrerPageUrl: referrerPageUrl,
	        source: querySource
	      }
	    };

	    var getState = function getState() {
	      return {
	        value: sessionTrackingEnabled
	      };
	    };

	    var request = new ApiRequest(requestConfig, {
	      getState: getState
	    });
	    window.performance.mark('yext.answers.verticalQuerySent');
	    return request.get().then(function (response) {
	      window.performance.mark('yext.answers.verticalQueryResponseReceived');
	      return response.json();
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.universalSearch = function universalSearch(queryString, params) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/query',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        input: queryString,
	        experienceKey: this._experienceKey,
	        location: params.geolocation ? params.geolocation.lat + "," + params.geolocation.lng : null,
	        version: this._experienceVersion,
	        locale: this._locale,
	        skipSpellCheck: params.skipSpellCheck,
	        queryTrigger: params.queryTrigger,
	        context: params.context,
	        referrerPageUrl: params.referrerPageUrl,
	        source: params.querySource
	      }
	    };

	    var getState = function getState() {
	      return {
	        value: params.sessionTrackingEnabled
	      };
	    };

	    var request = new ApiRequest(requestConfig, {
	      getState: getState
	    });
	    window.performance.mark('yext.answers.universalQuerySent');
	    return request.get().then(function (response) {
	      window.performance.mark('yext.answers.universalQueryResponseReceived');
	      return response.json();
	    });
	  };

	  return SearchApi;
	}();

	/** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

	/**
	 * Class for reporting analytics events to the server via HTTP
	 *
	 * @implements {AnalyticsReporterService}
	 */

	var AnalyticsReporter =
	/*#__PURE__*/
	function () {
	  function AnalyticsReporter(experienceKey, experienceVersion, businessId, globalOptions, environment) {
	    if (globalOptions === void 0) {
	      globalOptions = {};
	    }

	    if (environment === void 0) {
	      environment = PRODUCTION;
	    }

	    /**
	     * The internal business identifier used for reporting
	     * @type {number}
	     */
	    this._businessId = businessId;
	    /**
	     * Options to include with every analytic event reported to the server
	     * @type {object}
	     * @private
	     */

	    this._globalOptions = _extends_1({}, globalOptions, {
	      experienceKey: experienceKey
	    });
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = environment;
	    /**
	     * Base URL for the analytics API
	     * @type {string}
	     * @private
	     */

	    this._baseUrl = getAnalyticsUrl(this._environment);
	    /**
	     * Boolean indicating if opted in or out of conversion tracking
	     * @type {boolean}
	     * @private
	     */

	    this._conversionTrackingEnabled = false;

	    if (experienceVersion) {
	      this._globalOptions.experienceVersion = experienceVersion;
	    }
	  }

	  var _proto = AnalyticsReporter.prototype;

	  _proto.getQueryId = function getQueryId() {
	    return this._globalOptions.queryId;
	  };

	  _proto.setQueryId = function setQueryId(queryId) {
	    this._globalOptions.queryId = queryId;
	  }
	  /** @inheritdoc */
	  ;

	  _proto.report = function report(event) {
	    var cookieData = {};

	    if (this._conversionTrackingEnabled && typeof ytag === 'function') {
	      ytag('optin', true);
	      cookieData = ytag('yfpc', null);
	    } else if (this._conversionTrackingEnabled) {
	      throw new AnswersAnalyticsError('Tried to enable conversion tracking without including ytag');
	    }

	    if (!(event instanceof AnalyticsEvent)) {
	      throw new AnswersAnalyticsError('Tried to send invalid analytics event', event);
	    }

	    event.addOptions(this._globalOptions);
	    return new HttpRequester().beacon(this._baseUrl + "/realtimeanalytics/data/answers/" + this._businessId, objectSpread({
	      data: event.toApiEvent()
	    }, cookieData));
	  }
	  /** @inheritdoc */
	  ;

	  _proto.setConversionTrackingEnabled = function setConversionTrackingEnabled(isEnabled) {
	    this._conversionTrackingEnabled = isEnabled;
	    this._baseUrl = getAnalyticsUrl(this._environment, isEnabled);
	  };

	  return AnalyticsReporter;
	}();

	/** @typedef {import('../services/analyticsreporterservice').default} AnalyticsReporterService */

	/**
	 * @implements {AnalyticsReporterService}
	 */
	var NoopAnalyticsReporter =
	/*#__PURE__*/
	function () {
	  function NoopAnalyticsReporter() {}

	  var _proto = NoopAnalyticsReporter.prototype;

	  /** @inheritdoc */
	  _proto.report = function report(event) {
	    return true;
	  }
	  /** @inheritdoc */
	  ;

	  _proto.setConversionTrackingEnabled = function setConversionTrackingEnabled(isEnabled) {};

	  return NoopAnalyticsReporter;
	}();

	/**
	 * ModuleData is used as a generic model for Storage.
	 * Typically an instance of ModuleData powers a single component.

	 * A data model that exposes an event emitter interface.
	 * @extends EventEmitter
	 */

	var ModuleData =
	/*#__PURE__*/
	function (_EventEmitter) {
	  inheritsLoose(ModuleData, _EventEmitter);

	  function ModuleData(id, data) {
	    var _this;

	    if (data === void 0) {
	      data = {};
	    }

	    _this = _EventEmitter.call(this) || this;
	    _this._id = id;
	    _this._history = [];
	    _this._data = data;

	    _this.set(data);

	    return _this;
	  }
	  /**
	   * replaces the currently held data with the given data
	   * @param {*} data the data to replace the current data
	   */


	  var _proto = ModuleData.prototype;

	  _proto.set = function set(data) {
	    this.capturePrevious();

	    if (data === null || typeof data !== 'object' || isArray$3(data) || keys$5(data).length !== keys$5(this._data).length) {
	      this._data = data;
	      this.emit('update', this._data);
	      return;
	    } // check for shallow equality


	    for (var _i = 0, _Object$keys2 = keys$5(data); _i < _Object$keys2.length; _i++) {
	      var key = _Object$keys2[_i];

	      if (this._data[key] !== data[key]) {
	        this._data = data;
	        this.emit('update', this._data);
	        return;
	      }
	    }
	  };

	  _proto.capturePrevious = function capturePrevious() {
	    if (this._history === undefined) {
	      this._history = [];
	    }

	    if (this._history.length + 1 > 5) {
	      this._history.shift();
	    } // If data is ever undefined, we default to empty object


	    this._history.push(stringify$2(this._data || {}));
	  };

	  _proto.undo = function undo() {
	    var previous = {};

	    if (this._previous.length > 0) {
	      previous = JSON.parse(this._previous.pop());
	    }

	    this._data.set(previous);
	  };

	  _proto.raw = function raw() {
	    return this._data;
	  };

	  return ModuleData;
	}(EventEmitter);

	/**
	 * Storage is a container around application state.
	 * It exposes an interface for CRUD operations as well as listening
	 * for stateful changes.
	 */

	var GlobalStorage =
	/*#__PURE__*/
	function () {
	  function GlobalStorage() {
	    this._moduleDataContainer = {};
	    this._futureListeners = {};
	  }
	  /**
	   * Set the data in storage with the given key to the provided data,
	   * completely overwriting any existing data.
	   * @param {string} key the storage key to set
	   * @param {*} data the data to set
	   */


	  var _proto = GlobalStorage.prototype;

	  _proto.set = function set(key, data) {
	    this._initDataContainer(key, data);

	    this._moduleDataContainer[key].set(data);
	  }
	  /**
	   * Add all key/value pairs in the provided map to the storage
	   * @param {*} data The key/value pairs to set in the storage
	   */
	  ;

	  _proto.setAll = function setAll(data) {
	    for (var _i = 0, _Object$entries = entries$2(data); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _Object$entries[_i],
	          key = _Object$entries$_i[0],
	          val = _Object$entries$_i[1];

	      if (key === StorageKeys.QUERY) {
	        continue;
	      }

	      this.set(key, val);
	    } // Update query last since it triggers a search
	    // TODO: move listeners up so all of storage can be updated at the same time


	    if (data[StorageKeys.QUERY]) {
	      this.set(StorageKeys.QUERY, data[StorageKeys.QUERY]);
	    }
	  };

	  _proto._initDataContainer = function _initDataContainer(key, data) {
	    if (key === undefined || key === null || typeof key !== 'string') {
	      throw new AnswersStorageError('Invalid storage key provided', key, data);
	    }

	    if (data === undefined) {
	      throw new AnswersStorageError('No data provided', key, data);
	    }

	    if (this._moduleDataContainer[key] === undefined) {
	      this._moduleDataContainer[key] = new ModuleData(key);

	      this._applyFutureListeners(key);
	    }
	  };

	  _proto.getState = function getState(moduleId) {
	    if (this._moduleDataContainer[moduleId]) {
	      return this._moduleDataContainer[moduleId].raw();
	    }

	    return null;
	  };

	  _proto.getAll = function getAll(key) {
	    var data = [];

	    for (var _i2 = 0, _Object$keys = keys$5(this._moduleDataContainer); _i2 < _Object$keys.length; _i2++) {
	      var dataKey = _Object$keys[_i2];

	      if (startsWith$2(dataKey).call(dataKey, key) && this._moduleDataContainer[dataKey].raw() !== null) {
	        data.push(this._moduleDataContainer[dataKey].raw());
	      }
	    }

	    return data;
	  }
	  /**
	   * Remove the data in storage with the given key to the provided data,
	   * @param {string} key the storage key to delete
	   */
	  ;

	  _proto["delete"] = function _delete(key) {
	    // Note: Do we need to clean up listeners here?
	    delete this._moduleDataContainer[key];
	  };

	  _proto.on = function on(evt, moduleId, cb) {
	    var moduleData = this._moduleDataContainer[moduleId];

	    if (moduleData === undefined) {
	      if (this._futureListeners[moduleId] === undefined) {
	        this._futureListeners[moduleId] = [];
	      }

	      this._futureListeners[moduleId].push({
	        event: evt,
	        cb: cb
	      });

	      return;
	    }

	    this._moduleDataContainer[moduleId].on(evt, cb);

	    return this;
	  };

	  _proto.off = function off(evt, moduleId, cb) {
	    var moduleData = this._moduleDataContainer[moduleId];

	    if (moduleData === undefined) {
	      if (this._futureListeners[moduleId] !== undefined) {
	        this._futureListeners[moduleId].pop();
	      }

	      return this;
	    }

	    this._moduleDataContainer[moduleId].off(evt, cb);

	    return this;
	  };

	  _proto._applyFutureListeners = function _applyFutureListeners(moduleId) {
	    var futures = this._futureListeners[moduleId];

	    if (!futures) {
	      return;
	    }

	    for (var i = 0; i < futures.length; i++) {
	      var future = futures[i];
	      this.on(future.event, moduleId, future.cb);
	    }

	    delete this._futureListeners[moduleId];
	  };

	  return GlobalStorage;
	}();

	/** @module */

	/**
	 * Component is an abstraction that encapsulates state, behavior,
	 * and view for a particular chunk of functionality on the page.
	 *
	 * The API exposes event life cycle hooks for when things are rendered,
	 * mounted, created, etc.
	 */

	var Component =
	/*#__PURE__*/
	function () {
	  function Component(config, systemConfig) {
	    var _context, _context2, _context3;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    this.moduleId = null;
	    /**
	     * Unique name of this component instance
	     * Used to distinguish between other components of the same type
	     * @type {String}
	     */

	    this.name = config.name || this.constructor.type;
	    /**
	     * Cache the options so that we can propogate properly to child components
	     * @type {Object}
	     */

	    this._config = config;
	    /**
	     * An identifier used to classify the type of component.
	     * The component manager uses this information in order to persist and organize components
	     * @type {string|ComponentType}
	     */

	    this._type = this.constructor.name;
	    /**
	     * A local reference to the parent component, if exists
	     * @type {Component}
	     */

	    this._parentContainer = config.parentContainer || null;
	    /**
	     * A container for all the child components
	     * @type {Component[]}
	     */

	    this._children = [];
	    /**
	     * The state (data) of the component to be provided to the template for rendering
	     * @type {object}
	     */

	    this._state = new State(config.state);
	    /**
	     * TODO(billy) This should be 'services'
	     */

	    this.core = systemConfig.core || null;
	    /**
	     * A local reference to the component manager, which contains all of the component classes
	     * eligible to be created
	     * @type {ComponentManager}
	     */

	    this.componentManager = systemConfig.componentManager || null;
	    /**
	     * A local reference to the analytics reporter, used to report events for this component
	     * @type {AnalyticsReporter}
	     */

	    this.analyticsReporter = systemConfig.analyticsReporter || null;
	    /**
	     * Options to include with all analytic events sent by this component
	     * @type {object}
	     * @private
	     */

	    this._analyticsOptions = config.analyticsOptions || {};
	    /**
	     * A reference to the DOM node that the component will be appended to when mounted/rendered.
	     * @type {HTMLElement}
	     */

	    if (this._parentContainer === null) {
	      if (typeof config.container === 'string') {
	        this._container = DOM.query(config.container) || null;

	        if (this._container === null) {
	          throw new Error('Cannot find container DOM node: ' + config.container);
	        }
	      }
	    } else {
	      this._container = DOM.query(this._parentContainer, config.container); // If we have a parent, and the container is missing from the DOM,
	      // we construct the container and append it to the parent

	      if (this._container === null) {
	        this._container = DOM.createEl('div', {
	          "class": config.container.substring(1, config.container.length)
	        });
	        DOM.append(this._parentContainer, this._container);
	      }
	    }
	    /**
	     * A custom class to be applied to {this._container} node. Note that the class
	     * 'yxt-Answers-component' will be included as well.
	     * @type {string}
	     */


	    this._className = config["class"] || 'component';
	    /**
	     * A custom render function to be used instead of using the default renderer
	     * @type {Renderer}
	     */

	    this._render = config.render || null;
	    /**
	     * A local reference to the default {Renderer} that will be used for rendering the template
	     * @type {Renderer}
	     */

	    this._renderer = systemConfig.renderer || Renderers.Handlebars;
	    /**
	     * The template string to use for rendering the component
	     * If this is left empty, we lookup the template the base templates using the templateName
	     * @type {string}
	     */

	    this._template = config.template ? this._renderer.compile(config.template) : null;
	    /**
	     * The templateName to use for rendering the component.
	     * This is only used if _template is empty.
	     * @type {string}
	     */

	    this._templateName = config.templateName || this.constructor.defaultTemplateName(config);
	    /**
	     * An internal state indicating whether or not the component has been mounted to the DOM
	     * @type {boolean}
	     */

	    this._isMounted = false;
	    /**
	     * A local reference to the callback, thats used to transform the internal data
	     * models of the components, before it gets applied to the component state.
	     * By default, no transformation happens.
	     * @type {function}
	     */

	    this.transformData = config.transformData || this.transformData || function () {};
	    /**
	     * The a local reference to the callback that will be invoked when a component is created.
	     * @type {function}
	     */


	    this.onCreate = config.onCreateOverride || this.onCreate || function () {};

	    this.onCreate = bind$5(_context = this.onCreate).call(_context, this);
	    /**
	     * The a local reference to the callback that will be invoked when a component is Mounted.
	     * @type {function}
	     */

	    this.onMount = config.onMountOverride || this.onMount || function () {};

	    this.onMount = bind$5(_context2 = this.onMount).call(_context2, this);
	    /**
	     * The a local reference to the callback that will be invoked when a components state is updated.
	     * @type {function}
	     */

	    this.onUpdate = config.onUpdateOverride || this.onUpdate || function () {};

	    this.onUpdate = bind$5(_context3 = this.onUpdate).call(_context3, this);
	    /**
	     * A user provided onCreate callback
	     * @type {function}
	     */

	    this.userOnCreate = config.onCreate || function () {};
	    /**
	     * A user provided onMount callback
	     * @type {function}
	     */


	    this.userOnMount = config.onMount || function () {};
	    /**
	     * A user provided onUpdate callback
	     * @type {function}
	     */


	    this.userOnUpdate = config.onUpdate || function () {};
	  }
	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */


	  Component.defaultTemplateName = function defaultTemplateName(config) {
	    return 'default';
	  };

	  Component.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return false;
	  };

	  var _proto = Component.prototype;

	  _proto.init = function init(opts) {
	    var _this = this;

	    try {
	      this.setState(opts.data || opts.state || {});
	      this.onCreate();
	      this.userOnCreate();
	    } catch (e) {
	      throw new AnswersComponentError('Error initializing component', this.constructor.type, e);
	    }

	    this._state.on('update', function () {
	      try {
	        _this.onUpdate();

	        _this.userOnUpdate();

	        _this.unMount();

	        _this.mount();
	      } catch (e) {
	        throw new AnswersComponentError('Error updating component', _this.constructor.type, e);
	      }
	    });

	    DOM.addClass(this._container, this._className);
	    DOM.addClass(this._container, 'yxt-Answers-component');
	    return this;
	  };

	  _proto.setState = function setState(data) {
	    var newState = _extends_1({}, {
	      _config: this._config
	    }, data);

	    this._state.set(newState);

	    return this;
	  };

	  _proto.getState = function getState(prop) {
	    return this._state.get(prop);
	  };

	  _proto.hasState = function hasState(prop) {
	    return this._state.has(prop);
	  };

	  _proto.transformData = function transformData(data) {
	    return data;
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    var childComponent = this.componentManager.create(type, _extends_1({
	      name: data.name,
	      parentContainer: this._container,
	      data: data
	    }, opts || {}, {
	      _parentOpts: this._config
	    }));

	    this._children.push(childComponent);

	    return childComponent;
	  }
	  /**
	   * Unmount and remove this component and its children from the list
	   * of active components
	   */
	  ;

	  _proto.remove = function remove() {
	    var _context4;

	    forEach$4(_context4 = this._children).call(_context4, function (c) {
	      return c.remove();
	    });

	    this.componentManager.remove(this);
	  }
	  /**
	   * Set the render method to be used for rendering the component
	   * @param {Function} render
	   * @return {string}
	   */
	  ;

	  _proto.setRender = function setRender(render) {
	    this._render = render;
	    return this;
	  }
	  /**
	   * Set the renderer for the component
	   * @param {RendererType} renderer
	   */
	  ;

	  _proto.setRenderer = function setRenderer(renderer) {
	    this._renderer = Renderers[renderer];
	    return this;
	  }
	  /**
	   * Sets the template for the component to use when rendering
	   * @param {string} template
	   */
	  ;

	  _proto.setTemplate = function setTemplate(template) {
	    this._template = this._renderer.compile(template);
	  };

	  _proto.unMount = function unMount() {
	    var _context5, _context6;

	    if (!this._container) {
	      return this;
	    }

	    forEach$4(_context5 = this._children).call(_context5, function (child) {
	      child.unMount();
	    });

	    DOM.empty(this._container);

	    forEach$4(_context6 = this._children).call(_context6, function (c) {
	      return c.remove();
	    });

	    this._children = [];
	    this.onUnMount();
	  };

	  _proto.mount = function mount(container) {
	    var _this2 = this,
	        _context7;

	    if (container) {
	      this._container = container;
	    }

	    if (!this._container) {
	      return this;
	    }

	    if (this.beforeMount() === false) {
	      return this;
	    }

	    DOM.append(this._container, this.render(this._state.asJSON())); // Process the DOM to determine if we should create
	    // in-memory sub-components for rendering

	    var domComponents = DOM.queryAll(this._container, '[data-component]:not([data-is-component-mounted])');
	    var data = this.transformData(lodash_clonedeep(this._state.get()));

	    forEach$4(domComponents).call(domComponents, function (c) {
	      return _this2._createSubcomponent(c, data);
	    });

	    forEach$4(_context7 = this._children).call(_context7, function (child) {
	      child.mount();
	    }); // Attach analytics hooks as necessary


	    if (this.analyticsReporter) {
	      var _context8;

	      var domHooks = DOM.queryAll(this._container, '[data-eventtype]:not([data-is-analytics-attached])');

	      forEach$4(domHooks).call(domHooks, bind$5(_context8 = this._createAnalyticsHook).call(_context8, this));
	    }

	    this._isMounted = true;
	    this.onMount(this);
	    this.userOnMount(this);
	    return this;
	  }
	  /**
	   * render the template using the {Renderer} with the current state and template of the component
	   * @returns {string}
	   */
	  ;

	  _proto.render = function render(data) {
	    if (data === void 0) {
	      data = this._state.get();
	    }

	    this.beforeRender(); // Temporary fix for passing immutable data to transformData().

	    data = this.transformData(lodash_clonedeep(data));
	    var html = ''; // Use either the custom render function or the internal renderer
	    // dependant on the component configuration

	    if (typeof this._render === 'function') {
	      html = this._render(data);

	      if (typeof html !== 'string') {
	        throw new Error('Render method must return HTML as type {string}');
	      }
	    } else {
	      // Render the existing templates as a string
	      html = this._renderer.render({
	        template: this._template,
	        templateName: this._templateName
	      }, data);
	    } // We create an HTML Document fragment with the rendered string
	    // So that we can query it for processing of sub components


	    var el = DOM.create(html);
	    this.afterRender();
	    return el.innerHTML;
	  };

	  _proto._createSubcomponent = function _createSubcomponent(domComponent, data) {
	    var _this3 = this;

	    domComponent.dataset.isComponentMounted = true;
	    var dataset = domComponent.dataset;
	    var type = dataset.component;
	    var prop = dataset.prop;
	    var opts = dataset.opts ? JSON.parse(dataset.opts) : {};
	    var childData = data[prop] || {};
	    opts = objectSpread({}, opts, {
	      container: domComponent
	    }); // TODO(billy) Right now, if we provide an array as the data prop,
	    // the behavior is to create many components for each item in the array.
	    // THAT interface SHOULD change to use a different property that defines
	    // whether to array data should be used for a single component or
	    // to create many components for each item.
	    // Overloading and having this side effect is unintuitive and WRONG

	    if (!isArray$3(childData)) {
	      // Rendering a sub component should be within the context,
	      // of the node that we processed it from
	      this.addChild(childData, type, opts);
	      return;
	    }

	    reverse$2(childData).call(childData);

	    forEach$4(childData).call(childData, function (data) {
	      _this3.addChild(data, type, opts);
	    });
	  };

	  _proto._createAnalyticsHook = function _createAnalyticsHook(domComponent) {
	    var _this4 = this;

	    domComponent.dataset.isAnalyticsAttached = true;
	    var dataset = domComponent.dataset;
	    var type = dataset.eventtype;
	    var label = dataset.eventlabel;
	    var middleclick = dataset.middleclick;
	    var options = dataset.eventoptions ? JSON.parse(dataset.eventoptions) : {};
	    DOM.on(domComponent, 'mousedown', function (e) {
	      if (e.button === 0 || middleclick && e.button === 1) {
	        var event = new AnalyticsEvent(type, label);
	        event.addOptions(_this4._analyticsOptions);
	        event.addOptions(options);

	        _this4.analyticsReporter.report(event);
	      }
	    });
	  }
	  /**
	   * onCreate is triggered when the component is constructed
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onCreate = function onCreate(cb) {}
	  /**
	   * onUpdate is triggered when the state of the component changes
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onUpdate = function onUpdate(cb) {}
	  /**
	   * beforeRender event is triggered before the component is rendered
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.beforeRender = function beforeRender(cb) {}
	  /**
	   * afterRender event is triggered after the component is rendered
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.afterRender = function afterRender(cb) {}
	  /**
	   * onMount is triggered when the component is appended to the DOM
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onMount = function onMount(cb) {}
	  /**
	   * onUnMount is triggered when the component is removed from the DOM
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onUnMount = function onUnMount(cb) {}
	  /**
	   * beforeMount is triggered before the component is mounted to the DOM
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.beforeMount = function beforeMount(cb) {}
	  /**
	   * onDestroy is triggered when the component is destroyed
	   * @param {function} the callback to invoke upon emit
	   */
	  ;

	  _proto.onDestroy = function onDestroy(cb) {};

	  createClass(Component, null, [{
	    key: "type",
	    get: function get() {
	      return 'Component';
	    }
	  }]);

	  return Component;
	}();

	/** @module ErrorReporter */
	/** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

	/**
	 * ErrorReporter is used for reporting errors to the console and API
	 *
	 * @implements {ErrorReporterService}
	 */

	var ErrorReporter =
	/*#__PURE__*/
	function () {
	  function ErrorReporter(config, globalStorage) {
	    var _this = this;

	    /**
	     * The apiKey to use for reporting
	     * @type {string}
	     */
	    this.apiKey = config.apiKey;
	    /**
	     * The experienceKey to use when reporting
	     * @type {string}
	     */

	    this.experienceKey = config.experienceKey;
	    /**
	     * The answers config version used for api requests
	     * @type {string|number}
	     */

	    this.experienceVersion = config.experienceVersion || 'config1.0';
	    /**
	     * If true, print entire error objects to the console for inspection
	     * @type {boolean}
	     */

	    this.printVerbose = config.printVerbose;
	    /**
	     * If true, report the error the server for logging and monitoring
	     * @type {boolean}
	     */

	    this.sendToServer = config.sendToServer;
	    /**
	     * The global storage instance of the experience
	     * @type {GlobalStorage}
	     */

	    if (this.sendToServer && !globalStorage) {
	      throw new AnswersBasicError('Must include globalStorage to send errors to server', 'ErrorReporter');
	    }

	    this.globalStorage = globalStorage;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this.environment = config.environment; // Attach reporting listeners to window

	    window.addEventListener('error', function (e) {
	      return _this.report(e.error);
	    });
	    window.addEventListener('unhandledrejection', function (e) {
	      return _this.report(e.error);
	    });
	  }
	  /**
	   * report pretty prints the error to the console, optionally
	   * prints the entire error if `printVerbose` is true, and sends the
	   * error to the server to be logged if `sendToServer` is true
	   * @param {AnswersBaseError} err The error to be reported
	   * @returns {AnswersBaseError} The reported error
	   */


	  var _proto = ErrorReporter.prototype;

	  _proto.report = function report(err) {
	    if (!(err instanceof AnswersBaseError) || err.reported) {
	      return;
	    }

	    err.reported = true;
	    this.printError(err);

	    if (this.sendToServer) {
	      var requestConfig = {
	        endpoint: '/v2/accounts/me/answers/errors',
	        apiKey: this.apiKey,
	        version: 20190301,
	        environment: this.environment,
	        params: {
	          'libVersion': LIB_VERSION,
	          'experienceVersion': this.experienceVersion,
	          'experienceKey': this.experienceKey,
	          'error': err.toJson()
	        }
	      };
	      var request = new ApiRequest(requestConfig, this.globalStorage); // TODO(amullings): We should probably change this endpoint to POST,
	      // ideally using the beacon API. Stack traces will likely easily hit URL
	      // length limits.

	      request.get()["catch"](console.err);
	    }

	    return err;
	  }
	  /**
	   * prints the given error to the browser console
	   * @param {AnswersBaseError} err The error to be printed
	   */
	  ;

	  _proto.printError = function printError(err) {
	    if (this.printVerbose) {
	      console.error("error: " + err.errorMessage + "\ncode: " + err.errorCode + "\nboundary: " + err.boundary + "\nstack: " + err.stack);
	    } else {
	      console.error(err.toString());
	    }
	  };

	  return ErrorReporter;
	}();

	/** @typedef {import('../services/errorreporterservice').default} ErrorReporterService */

	/**
	 * @implements {ErrorReporterService}
	 */
	var ConsoleErrorReporter =
	/*#__PURE__*/
	function () {
	  function ConsoleErrorReporter() {}

	  var _proto = ConsoleErrorReporter.prototype;

	  /** @inheritdoc */
	  _proto.report = function report(err) {
	    console.error(err.toString());
	  };

	  return ConsoleErrorReporter;
	}();

	/** @module PersistentStorage */

	var PersistentStorage =
	/*#__PURE__*/
	function () {
	  function PersistentStorage(config) {
	    var _this = this;

	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The current params model
	     * @type {SearchParams}
	     */
	    this._params = new SearchParams(window.location.search.substring(1));
	    /**
	     * The list of listeners to every storage update
	     * @type {function[]}
	     */

	    this._updateListener = config.updateListener || function () {};
	    /**
	     * The list of listeners to storage resets
	     * @type {function[]}
	     */


	    this._resetListener = config.resetListener || function () {};

	    window.onpopstate = function () {
	      _this._params = new SearchParams(window.location.search.substring(1));

	      _this._callListener(_this._updateListener, false);

	      _this._callListener(_this._resetListener, false);
	    };
	  }
	  /**
	   * Insert the given key/value pair into storage
	   * @param {string} key The key to insert the data in
	   * @param {*} data The data to insert
	   * @param {boolean} replace history instead of pushing new state
	   */


	  var _proto = PersistentStorage.prototype;

	  _proto.set = function set(key, data, replaceHistory) {
	    if (replaceHistory === void 0) {
	      replaceHistory = false;
	    }

	    if (typeof key !== 'string') {
	      throw new AnswersStorageError('Storage data key must be a string', key, data);
	    }

	    var newData = data;

	    if (typeof data !== 'string') {
	      newData = stringify$2(data);
	    }

	    this._params.set(key, newData);

	    this._updateHistory(replaceHistory);
	  }
	  /**
	   * Delete the given key from storage
	   * @param {string} key The key to delete
	   * @param {boolean} replace history instead of pushing new state
	   */
	  ;

	  _proto["delete"] = function _delete(key, replaceHistory) {
	    if (replaceHistory === void 0) {
	      replaceHistory = false;
	    }

	    this._params["delete"](key);

	    this._updateHistory(replaceHistory);
	  };

	  _proto._updateHistory = function _updateHistory(replaceHistory) {
	    if (replaceHistory === void 0) {
	      replaceHistory = false;
	    }

	    var currentParams = new SearchParams(window.location.search.substring(1));

	    if (equivalentParams(this._params, currentParams)) {
	      return;
	    }

	    if (replaceHistory) {
	      window.history.replaceState(null, null, "?" + this._params.toString());
	    } else {
	      window.history.pushState(null, null, "?" + this._params.toString());
	    }

	    this._callListener(this._updateListener, replaceHistory);
	  }
	  /**
	   * Invoke the given list of callbacks with the current storage data
	   * @param {function[]} listeners The callbacks to invoke
	   * @param {boolean} replaceHistory Whether to replace the history state in the browser
	   * @private
	   */
	  ;

	  _proto._callListener = function _callListener(listener, replaceHistory) {
	    listener(this.getAll(), this._params.toString(), replaceHistory);
	  }
	  /**
	   * Get all the key/value pairs in storage
	   */
	  ;

	  _proto.getAll = function getAll() {
	    var allParams = {};

	    for (var _iterator = entries$5(_context = this._params).call(_context), _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	      var _context;

	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var _ref2 = _ref,
	          key = _ref2[0],
	          val = _ref2[1];
	      allParams[key] = val;
	    }

	    return allParams;
	  }
	  /**
	   * Get a value for a given key in storage
	   * @param {string} key The unique key to get value for
	   */
	  ;

	  _proto.get = function get(key) {
	    return this._params.get(key);
	  };

	  return PersistentStorage;
	}();

	/** @module SearchConfig */

	var SearchConfig =
	/*#__PURE__*/
	function () {
	  function SearchConfig(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The max results per search.
	     * Also defines the number of results per page, if pagination is enabled
	     * @type {number}
	     */
	    this.limit = config.limit || 20;
	    /**
	     * The vertical key to use for all searches
	     * @type {string}
	     */

	    this.verticalKey = config.verticalKey || null;
	    /**
	     * A default search to use on initialization for vertical searchers, when the user has't provided a query
	     * @type {string}
	     */

	    this.defaultInitialSearch = config.defaultInitialSearch;
	    this.validate();

	    freeze$2(this);
	  }

	  var _proto = SearchConfig.prototype;

	  _proto.validate = function validate() {
	    if (typeof this.limit !== 'number' || this.limit < 1 || this.limit > 50) {
	      throw new AnswersConfigError('Search Limit must be between 1 and 50', 'SearchConfig');
	    }
	  };

	  return SearchConfig;
	}();

	/** @module AutoCompleteData */
	var AutoCompleteData =
	/*#__PURE__*/
	function () {
	  function AutoCompleteData(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    this.sections = data.sections || [];
	    this.queryId = data.queryId || '';
	    this.inputIntents = data.inputIntents || [];

	    freeze$2(this);
	  }

	  AutoCompleteData.from = function from(response) {
	    var sections;

	    if (response.sections) {
	      var _context;

	      sections = map$2(_context = response.sections).call(_context, function (s) {
	        var _context2;

	        return {
	          label: s.label,
	          results: map$2(_context2 = s.results).call(_context2, function (r) {
	            return new AutoCompleteResult(r);
	          }),
	          resultsCount: s.results.length
	        };
	      });
	    } else {
	      var _context3;

	      sections = [{
	        results: map$2(_context3 = response.results).call(_context3, function (r) {
	          return new AutoCompleteResult(r);
	        }),
	        resultsCount: response.results.length
	      }];
	    }

	    var inputIntents = response.input ? response.input.queryIntents : [];
	    return new AutoCompleteData({
	      sections: sections,
	      queryId: response.queryId,
	      inputIntents: inputIntents
	    });
	  };

	  return AutoCompleteData;
	}();
	var AutoCompleteResult = function AutoCompleteResult(data) {
	  if (data === void 0) {
	    data = {};
	  }

	  this.filter = filter$4(data) || {};
	  this.key = data.key || '';
	  this.matchedSubstrings = data.matchedSubstrings || [];
	  this.value = data.value || '';
	  this.shortValue = data.shortValue || this.value;
	  this.intents = data.queryIntents || [];

	  freeze$2(this);
	};

	/** @module AutoCompleteDataTransformer */
	/**
	 * A Data Transformer that takes the response object from a AutoComplete request
	 * And transforms in to a front-end oriented data structure that our
	 * component library and core storage understand.
	 *
	 * TODO(billy) Create our own front-end data models
	 */

	var AutoCompleteDataTransformer =
	/*#__PURE__*/
	function () {
	  function AutoCompleteDataTransformer() {}

	  AutoCompleteDataTransformer.clean = function clean(moduleId, data) {
	    var _ref;

	    if (data.sections && data.sections.length === 0) {
	      delete data.sections;
	    }

	    if (data.sections && data.sections.length === 1 && data.sections[0].results.length === 0) {
	      delete data.sections;
	    }

	    return _ref = {}, _ref[moduleId] = data, _ref;
	  };

	  AutoCompleteDataTransformer.universal = function universal(response) {
	    return AutoCompleteData.from(response);
	  };

	  AutoCompleteDataTransformer.filter = function filter(response) {
	    return AutoCompleteData.from(response);
	  };

	  AutoCompleteDataTransformer.vertical = function vertical(response) {
	    return AutoCompleteData.from(response);
	  };

	  return AutoCompleteDataTransformer;
	}();

	/** @typedef {import('./autocompleteservice').default} AutoCompleteService */

	/**
	 * AutoCompleteApi exposes an interface for network related matters
	 * for all the autocomplete endpoints.
	 *
	 * @implements {AutoCompleteService}
	 */

	var AutoCompleteApi =
	/*#__PURE__*/
	function () {
	  function AutoCompleteApi(config, globalStorage) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The API Key to use for the request
	     * @type {string}
	     * @private
	     */
	    if (!config.apiKey) {
	      throw new AnswersBasicError('Api Key is required', 'AutoComplete');
	    }

	    this._apiKey = config.apiKey;
	    /**
	     * The Answers Key to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.experienceKey) {
	      throw new AnswersBasicError('Answers Key is required', 'AutoComplete');
	    }

	    this._experienceKey = config.experienceKey;
	    /**
	     * The version of the API to make a request to
	     * @type {string}
	     * @private
	     */

	    this._version = config.version || 20190101 || 20190301;
	    /**
	     * The answers config version to use for all requests
	     * @type {string}
	     * @private
	     */

	    this._experienceVersion = config.experienceVersion;
	    /**
	     * The locale to use for the request
	     * @type {string}
	     * @private
	     */

	    if (!config.locale) {
	      throw new AnswersBasicError('Locale is required', 'AutoComplete');
	    }

	    this._locale = config.locale;
	    /**
	     * The global storage instance of the experience
	     * @type {GlobalStorage}
	     * @private
	     */

	    if (!globalStorage) {
	      throw new AnswersBasicError('Global storage is required', 'AutoComplete');
	    }

	    this._globalStorage = globalStorage;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = config.environment;
	    /**
	     * The base url for the autocomplete API request
	     * @type {string}
	     * @private
	     */

	    this._baseUrl = getCachedLiveApiUrl(this._environment);
	  }
	  /** @inheritdoc */


	  var _proto = AutoCompleteApi.prototype;

	  _proto.queryFilter = function queryFilter(input, config) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/filtersearch',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      params: {
	        'input': input,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'verticalKey': config.verticalKey,
	        'locale': this._locale,
	        'search_parameters': stringify$2(config.searchParameters)
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.get().then(function (response) {
	      return response.json();
	    }).then(function (response) {
	      return filter$4(AutoCompleteDataTransformer).call(AutoCompleteDataTransformer, response.response);
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Filter search request failed', 'AutoComplete', error);
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryVertical = function queryVertical(input, verticalKey) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/vertical/autocomplete',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      baseUrl: this._baseUrl,
	      params: {
	        'input': input,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'verticalKey': verticalKey,
	        'locale': this._locale
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.get().then(function (response) {
	      return response.json();
	    }).then(function (response) {
	      return AutoCompleteDataTransformer.vertical(response.response);
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Vertical search request failed', 'AutoComplete', error);
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryUniversal = function queryUniversal(queryString) {
	    var requestConfig = {
	      endpoint: '/v2/accounts/me/answers/autocomplete',
	      apiKey: this._apiKey,
	      version: this._version,
	      environment: this._environment,
	      baseUrl: this._baseUrl,
	      params: {
	        'input': queryString,
	        'experienceKey': this._experienceKey,
	        'version': this._experienceVersion,
	        'locale': this._locale
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.get().then(function (response) {
	      return response.json();
	    }).then(function (response) {
	      return AutoCompleteDataTransformer.universal(response.response);
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Universal search request failed', 'AutoComplete', error);
	    });
	  };

	  return AutoCompleteApi;
	}();

	/** @typedef {import('../services/autocompleteservice').default} AutoCompleteService */

	var universalOptions = ['what is yext', 'who is the ceo of yext'];
	var verticalOptions = ['near me', 'in new york', 'available now'];
	/**
	 * MockAutoCompleteService serves autocomplete queries with mock data
	 *
	 * @implements {AutoCompleteService}
	 */

	var MockAutoCompleteService =
	/*#__PURE__*/
	function () {
	  function MockAutoCompleteService() {}

	  var _proto = MockAutoCompleteService.prototype;

	  /** @inheritdoc */
	  _proto.queryFilter = function queryFilter(input, config) {
	    // TODO(amullings): Simulate filter search, with sections
	    return emptyResults();
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryVertical = function queryVertical(input, verticalKey) {
	    var _context;

	    return filterOptions(input, concat$4(_context = map$2(verticalOptions).call(verticalOptions, function (opt) {
	      return verticalKey + " " + opt;
	    })).call(_context, universalOptions));
	  }
	  /** @inheritdoc */
	  ;

	  _proto.queryUniversal = function queryUniversal(input) {
	    return filterOptions(input, universalOptions);
	  };

	  return MockAutoCompleteService;
	}();

	function filterOptions(input, options) {
	  var _context2;

	  if (input.length === 0) {
	    return emptyResults();
	  }

	  var lowercase = input.toLowerCase();

	  var results = map$2(_context2 = filter$4(options).call(options, function (opt) {
	    return includes$4(opt).call(opt, lowercase);
	  })).call(_context2, function (opt) {
	    return new AutoCompleteResult({
	      value: opt,
	      matchedSubstrings: [{
	        offset: indexOf$5(opt).call(opt, lowercase),
	        length: lowercase.length
	      }]
	    });
	  });

	  return promise$3.resolve(new AutoCompleteData({
	    sections: [{
	      results: results
	    }],
	    queryId: randomString()
	  }));
	}
	/**
	 * @returns {Promise<AutoCompleteData>}
	 */


	function emptyResults() {
	  return promise$3.resolve(new AutoCompleteData({
	    sections: [{}],
	    queryId: randomString()
	  }));
	}
	/**
	 * @returns {string}
	 */


	function randomString() {
	  return Math.random().toString(36).substring(2);
	}

	/** @module QuestionAnswerApi */
	/** @typedef {import('./questionanswerservice').default} QuestionAnswerService */

	/**
	 * QuestionAnswerApi submits questions via the Q&A REST API
	 *
	 * @implements {QuestionAnswerService}
	 */

	var QuestionAnswerApi =
	/*#__PURE__*/
	function () {
	  function QuestionAnswerApi(config, globalStorage) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The API Key to use for the request
	     * @type {string}
	     * @private
	     */
	    if (!config.apiKey) {
	      throw new AnswersBasicError('Api Key is required', 'QuestionAnswerApi');
	    }

	    this._apiKey = config.apiKey;
	    /**
	     * The global storage instance of the experience
	     * @type {GlobalStorage}
	     * @private
	     */

	    if (!globalStorage) {
	      throw new AnswersBasicError('Global storage is required', 'QuestionAnswerApi');
	    }

	    this._globalStorage = globalStorage;
	    /**
	     * The environment of the Answers experience
	     * @type {string}
	     * @private
	     */

	    this._environment = config.environment || PRODUCTION;
	  }
	  /** @inheritdoc */


	  var _proto = QuestionAnswerApi.prototype;

	  _proto.submitQuestion = function submitQuestion(question) {
	    var requestConfig = {
	      baseUrl: getKnowledgeApiUrl(this._environment),
	      endpoint: '/v2/accounts/me/createQuestion',
	      apiKey: this._apiKey,
	      params: {
	        'entityId': question.entityId,
	        'site': question.site,
	        'name': question.name,
	        'email': question.email,
	        'questionText': question.questionText,
	        'questionDescription': question.questionDescription,
	        'questionLanguage': question.questionLanguage
	      }
	    };
	    var request = new ApiRequest(requestConfig, this._globalStorage);
	    return request.post({
	      mode: 'cors',
	      headers: {
	        'Content-Type': 'application/json'
	      }
	    }).then(function (response) {
	      return response.json();
	    })["catch"](function (error) {
	      throw new AnswersEndpointError('Question submit failed', 'QuestionAnswerApi', error);
	    });
	  };

	  return QuestionAnswerApi;
	}();

	/** @module MockQuestionAnswerService */

	/** @typedef {import('../services/questionanswerservice').default} QuestionAnswerService */

	/**
	 * @implements {QuestionAnswerService}
	 */
	var MockQuestionAnswerService =
	/*#__PURE__*/
	function () {
	  function MockQuestionAnswerService() {}

	  var _proto = MockQuestionAnswerService.prototype;

	  /** @inheritdoc */
	  _proto.submitQuestion = function submitQuestion(question) {
	    // TODO(amullings): Make actual response object once we're using it for
	    // something
	    return promise$3.resolve({});
	  };

	  return MockQuestionAnswerService;
	}();

	var $find = arrayIteration.find;



	var FIND = 'find';
	var SKIPS_HOLES = true;

	var USES_TO_LENGTH$9 = arrayMethodUsesToLength(FIND);

	// Shouldn't skip holes
	if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

	// `Array.prototype.find` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.find
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH$9 }, {
	  find: function find(callbackfn /* , that = undefined */) {
	    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var find$1 = entryVirtual('Array').find;

	var ArrayPrototype$g = Array.prototype;

	var find_1 = function (it) {
	  var own = it.find;
	  return it === ArrayPrototype$g || (it instanceof Array && own === ArrayPrototype$g.find) ? find$1 : own;
	};

	var find$2 = find_1;

	var find$3 = find$2;

	/* global fetch */

	/** @typedef {import('../models/section').default} Section */

	/** @typedef {import('../services/searchservice').default} SearchService */

	/**
	 * @typedef {Object} ResultData
	 * @property {Object} data
	 * @property {string } htmlTitle
	 */

	/**
	 * @callback ResultsModifier
	 * @param {ResultData[]} results
	 * @returns {ResultData[]}
	 */

	/**
	 * @callback MockDataConsumer
	 * @param {Section[]} sections
	 * @returns {Promise<Object>}
	 */
	var ARBITRARY_BUSINESS_ID = 919871;
	/**
	 * @implements {SearchService}
	 */

	var MockSearchService =
	/*#__PURE__*/
	function () {
	  function MockSearchService() {
	    /**
	     * @type {Promise<string>}
	     * @private
	     */
	    this._getMockDataJson = fetch('https://assets.sitescdn.net/answers/testdata/search/mockdata_v1.json').then(function (resp) {
	      return resp.text();
	    })["catch"](console.error);
	  }
	  /** @inheritdoc */


	  var _proto = MockSearchService.prototype;

	  _proto.verticalSearch = function verticalSearch(verticalKey, _ref) {
	    var input = _ref.input,
	        filter = filter$4(_ref),
	        facetFilter = _ref.facetFilter,
	        limit = _ref.limit,
	        offset = _ref.offset,
	        id = _ref.id,
	        geolocation = _ref.geolocation,
	        isDynamicFiltersEnabled = _ref.isDynamicFiltersEnabled,
	        skipSpellCheck = _ref.skipSpellCheck,
	        queryTrigger = _ref.queryTrigger;

	    return this.useMockData(function (sections) {
	      if (input === '') {
	        return delayedResponse(constructVerticalResponse({
	          results: [],
	          appliedQueryFilters: []
	        }));
	      } // Either find a section with matching ID, or pick one at random


	      var section = find$3(sections).call(sections, function (verticalModule) {
	        return verticalKey === verticalModule['verticalConfigId'];
	      });

	      if (section == null) {
	        section = sections[Math.floor(Math.random() * sections.length)];
	      }

	      modifyResults(section, getResultsFilterer(input));

	      if (offset != null && limit != null) {
	        modifyResults(section, function limit(results) {
	          return slice$3(results).call(results, offset, offset + limit);
	        });
	      }

	      var resp = constructVerticalResponse(section);
	      return delayedResponse(resp);
	    });
	  }
	  /** @inheritdoc */
	  ;

	  _proto.universalSearch = function universalSearch(queryString, params) {
	    return this.useMockData(function (sections) {
	      if (queryString === '') {
	        return delayedResponse(constructUniversalResponse([]));
	      }

	      forEach$4(sections).call(sections, function (section) {
	        modifyResults(section, getResultsFilterer(queryString));
	      });

	      sections = filter$4(sections).call(sections, function (section) {
	        return section.results.length > 0;
	      });
	      var resp = constructUniversalResponse(sections);
	      return delayedResponse(resp);
	    });
	  }
	  /**
	   * @param {MockDataConsumer} consumer
	   * @returns {Promise<Object>}
	   * @private
	   */
	  ;

	  _proto.useMockData = function useMockData(consumer) {
	    return this._getMockDataJson.then(JSON.parse).then(consumer);
	  };

	  return MockSearchService;
	}();

	function getResultsFilterer(queryString) {
	  return function (results) {
	    return filter$4(results).call(results, function (result) {
	      var _context;

	      if (result.htmlTitle && includes$4(_context = result.htmlTitle.toLowerCase()).call(_context, queryString)) {
	        return true;
	      }

	      for (var prop in result.data) {
	        var _context2;

	        var val = result.data[prop];

	        if (typeof val === 'string' && includes$4(_context2 = val.toLowerCase()).call(_context2, queryString)) {
	          return true;
	        }
	      }

	      return false;
	    });
	  };
	}
	/**
	 * @param {Section} section
	 * @param {ResultsModifier} modifyFn
	 */


	function modifyResults(section, modifyFn) {
	  section.results = modifyFn(section.results);
	}
	/**
	 * @param {Section[]} sections A list of mock section data
	 * @returns {Object} A mock AnswersApi response
	 */


	function constructUniversalResponse(sections) {
	  // TODO(amullings): spellcheck, geo, filters
	  // TODO(amullings): Fake encodedState once the SDK uses it
	  sections = map$2(sections).call(sections, fillSectionFields);
	  return {
	    meta: {
	      uuid: uuidV4(),
	      errors: []
	    },
	    response: {
	      businessId: ARBITRARY_BUSINESS_ID,
	      modules: sections,
	      failedVerticals: [],
	      queryId: uuidV4(),
	      searchIntents: []
	    }
	  };
	}
	/**
	 * @param {Section} section A mock section data
	 * @returns {Object} A mock AnswersApi response
	 */


	function constructVerticalResponse(section) {
	  // TODO(amullings): spellcheck, geo, filters
	  // TODO(amullings): Fake encodedState once the SDK uses it
	  section = fillSectionFields(section);
	  return {
	    meta: {
	      uuid: uuidV4(),
	      errors: []
	    },
	    response: _extends_1(section, {
	      businessId: ARBITRARY_BUSINESS_ID,
	      queryId: uuidV4(),
	      searchIntents: []
	    })
	  };
	}
	/**
	 * @param {Section}
	 * @returns {Section}
	 */


	function fillSectionFields(section) {
	  return {
	    verticalConfigId: section.verticalConfigId,
	    resultsCount: section.results.length,
	    encodedState: '',
	    results: section.results,
	    appliedQueryFilters: section.appliedQueryFilters,
	    queryDurationMillis: randomInt(50, 1000),
	    facets: section.facets,
	    source: section.source
	  };
	}
	/**
	 * @param {Object} resp
	 * @returns {Promise<Object>}
	 */


	function delayedResponse(resp) {
	  return new promise$3(function (resolve) {
	    setTimeout$2(function () {
	      resolve(resp);
	    }, randomInt(250, 1000));
	  });
	}
	/**
	 * Code-golf-y but legit basic UUID v4 implementation. Not cryptographically secure.
	 * From https://gist.github.com/jed/982883
	 * @returns {string} A v4-compliant UUID
	 */


	function uuidV4() {
	  return function b(a) {
	    return a ? (a ^ Math.random() * 16 >> a / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);
	  }();
	}
	/**
	 * @param {number} min inclusive
	 * @param {number} max exclusive
	 * @returns {number} A random integer in the specified range
	 */


	function randomInt(min, max) {
	  return Math.floor(Math.random() * (max - min) + min);
	}

	var HAS_SPECIES_SUPPORT$3 = arrayMethodHasSpeciesSupport('splice');
	var USES_TO_LENGTH$a = arrayMethodUsesToLength('splice', { ACCESSORS: true, 0: 0, 1: 2 });

	var max$2 = Math.max;
	var min$3 = Math.min;
	var MAX_SAFE_INTEGER$1 = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

	// `Array.prototype.splice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.splice
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$3 || !USES_TO_LENGTH$a }, {
	  splice: function splice(start, deleteCount /* , ...items */) {
	    var O = toObject(this);
	    var len = toLength(O.length);
	    var actualStart = toAbsoluteIndex(start, len);
	    var argumentsLength = arguments.length;
	    var insertCount, actualDeleteCount, A, k, from, to;
	    if (argumentsLength === 0) {
	      insertCount = actualDeleteCount = 0;
	    } else if (argumentsLength === 1) {
	      insertCount = 0;
	      actualDeleteCount = len - actualStart;
	    } else {
	      insertCount = argumentsLength - 2;
	      actualDeleteCount = min$3(max$2(toInteger(deleteCount), 0), len - actualStart);
	    }
	    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER$1) {
	      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
	    }
	    A = arraySpeciesCreate(O, actualDeleteCount);
	    for (k = 0; k < actualDeleteCount; k++) {
	      from = actualStart + k;
	      if (from in O) createProperty(A, k, O[from]);
	    }
	    A.length = actualDeleteCount;
	    if (insertCount < actualDeleteCount) {
	      for (k = actualStart; k < len - actualDeleteCount; k++) {
	        from = k + actualDeleteCount;
	        to = k + insertCount;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
	    } else if (insertCount > actualDeleteCount) {
	      for (k = len - actualDeleteCount; k > actualStart; k--) {
	        from = k + actualDeleteCount - 1;
	        to = k + insertCount - 1;
	        if (from in O) O[to] = O[from];
	        else delete O[to];
	      }
	    }
	    for (k = 0; k < insertCount; k++) {
	      O[k + actualStart] = arguments[k + 2];
	    }
	    O.length = len - actualDeleteCount + insertCount;
	    return A;
	  }
	});

	var splice = entryVirtual('Array').splice;

	var ArrayPrototype$h = Array.prototype;

	var splice_1 = function (it) {
	  var own = it.splice;
	  return it === ArrayPrototype$h || (it instanceof Array && own === ArrayPrototype$h.splice) ? splice : own;
	};

	var splice$1 = splice_1;

	var splice$2 = splice$1;

	var $findIndex = arrayIteration.findIndex;



	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES$1 = true;

	var USES_TO_LENGTH$b = arrayMethodUsesToLength(FIND_INDEX);

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES$1 = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES$1 || !USES_TO_LENGTH$b }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var findIndex = entryVirtual('Array').findIndex;

	var ArrayPrototype$i = Array.prototype;

	var findIndex_1 = function (it) {
	  var own = it.findIndex;
	  return it === ArrayPrototype$i || (it instanceof Array && own === ArrayPrototype$i.findIndex) ? findIndex : own;
	};

	var findIndex$1 = findIndex_1;

	var findIndex$2 = findIndex$1;

	function getUrlParams() {
	  return new SearchParams(window.location.search.substring(1));
	}
	function getDefaultTabOrder(tabsConfig, urlParams) {
	  var tabOrder = []; // Use the ordering from the URL as the primary configuration
	  // And then merge it with the local configuration, if provided.

	  if (urlParams && urlParams.has('tabOrder')) {
	    tabOrder = urlParams.get('tabOrder').split(',');
	  }

	  for (var _iterator = tabsConfig, _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var tab = _ref;
	    var verticalKeyOrUrl = tab.verticalKey || tab.url; // Avoid duplicates if config was provided from URL

	    if (includes$4(tabOrder).call(tabOrder, verticalKeyOrUrl)) {
	      continue;
	    } // isFirst should always be the first element in the list


	    if (tab.isFirst) {
	      tabOrder.unshift(verticalKeyOrUrl);
	    } else {
	      tabOrder.push(verticalKeyOrUrl);
	    }
	  }

	  return tabOrder;
	}
	/**
	 * mergeTabOrder merges two arrays into one
	 * by appending additional tabs to the end of the original array
	 * @param {string[]} tabOrder Tab order provided by the server
	 * @param {string[]} otherTabOrder Tab order provided by configuration
	 * @return {string[]}
	 */

	function mergeTabOrder(tabOrder, otherTabOrder, tabs) {
	  for (var _iterator2 = otherTabOrder, _isArray2 = isArray$3(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : getIterator$1(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var tabConfig = _ref2;

	    if (includes$4(tabOrder).call(tabOrder, tabConfig)) {
	      continue;
	    } // isFirst should be an override to dynamic tab ordering.


	    if (tabs[tabConfig] && tabs[tabConfig].isFirst) {
	      tabOrder.unshift(tabConfig);
	    } else {
	      tabOrder.push(tabConfig);
	    }
	  }

	  return tabOrder;
	}
	function getTabOrder(tabsConfig, dataTabOrder) {
	  var tabOrder = getDefaultTabOrder(tabsConfig, getUrlParams()); // We want to persist the params from the existing URL to the new
	  // URLS we create.

	  if (tabOrder && dataTabOrder) {
	    tabOrder = mergeTabOrder(dataTabOrder, tabOrder, tabsConfig);
	  }

	  return tabOrder;
	}

	/**
	 * TranslationFlagger is a class used to flag Translation calls. The usages of this class
	 * are handled and removed during SDK bundling.
	 */
	var TranslationFlagger =
	/*#__PURE__*/
	function () {
	  function TranslationFlagger() {}

	  /**
	   * Any calls of this method will be removed during a preprocessing step during SDK
	   * bundling.
	   *
	   * To support cases where someone may want to bundle without using our
	   * bundling tasks, this function attempts to return the same-language interpolated
	   * and pluralized value based on the information given.
	   *
	   * @param {string} phrase
	   * @param {string} pluralForm
	   * @param {string | number} count
	   * @param {string} context
	   * @param {Object} interpolationValues
	   * @returns {string}
	   */
	  TranslationFlagger.flag = function flag(_ref) {
	    var phrase = _ref.phrase,
	        pluralForm = _ref.pluralForm,
	        count = _ref.count,
	        context = _ref.context,
	        interpolationValues = _ref.interpolationValues;
	    var isPlural = count && count > 1 && pluralForm;
	    var declensionOfPhrase = isPlural ? pluralForm : phrase;

	    if (!interpolationValues) {
	      return declensionOfPhrase;
	    }

	    var interpolatedPhrase = declensionOfPhrase;

	    for (var _i = 0, _Object$entries = entries$2(interpolationValues); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _Object$entries[_i],
	          key = _Object$entries$_i[0],
	          value = _Object$entries$_i[1];
	      interpolatedPhrase = interpolatedPhrase.replace("[[" + key + "]]", value);
	    }

	    return interpolatedPhrase;
	  };

	  return TranslationFlagger;
	}();

	/**
	 * The debounce duration for resize events
	 * @type {number}
	 */

	var RESIZE_DEBOUNCE = 100;
	/**
	 * The breakpoint for mobile
	 * @type {number}
	 */

	var MOBILE_BREAKPOINT = 767;
	/**
	 * Enum options for mobile overflow beahvior
	 * @type {Object.<string, string>}
	 */

	var MOBILE_OVERFLOW_BEHAVIOR_OPTION = {
	  COLLAPSE: 'COLLAPSE',
	  INNERSCROLL: 'INNERSCROLL'
	};
	/**
	 * The Tab is a model that is used to power the Navigation tabs in the view.
	 * It's initialized through the configuration provided to the component.
	 */

	var Tab =
	/*#__PURE__*/
	function () {
	  function Tab(config) {
	    /**
	     * The name of the tab that is exposed for the link
	     * @type {string}
	     */
	    this.label = config.label;

	    if (typeof this.label !== 'string') {
	      throw new AnswersComponentError('label is a required configuration option for tab.', 'NavigationComponent');
	    }
	    /**
	     * The complete URL, including the params
	     * @type {string}
	     */


	    this.url = config.url;

	    if (typeof this.url !== 'string') {
	      throw new AnswersComponentError('url is a required configuration option for tab.', 'NavigationComponent');
	    }
	    /**
	     * The serverside vertical config id that this is referenced to.
	     * By providing this, enables dynamic sorting based on results.
	     * @type {string}
	     */


	    this.verticalKey = config.verticalKey || null;
	    /**
	     * The base URL used for constructing the URL with params
	     * @type {string}
	     */

	    this.baseUrl = config.url;
	    /**
	     * Determines whether to show this tab first in the order
	     * @type {boolean}
	     */

	    this.isFirst = config.isFirst || false;
	    /**
	     * Determines whether or not to apply a special class to the
	     * markup to determine if it's an active tab
	     * @type {boolean}
	     */

	    this.isActive = config.isActive || false;
	  }
	  /**
	   * from will construct a map of verticalKey to {Tab} from
	   * a configuration file
	   * @param {object} tabsConfig the configuration to use
	   */


	  Tab.from = function from(tabsConfig) {
	    var tabs = {}; // Parse the options and build out our tabs and

	    for (var i = 0; i < tabsConfig.length; i++) {
	      var tab = objectSpread({}, tabsConfig[i]); // If a tab is configured to be hidden in this component,
	      // do not process it


	      if (tab.hideInNavigation) {
	        continue;
	      } // For tabs without config ids, map their URL to the configID
	      // to avoid duplication of renders


	      if (!tab.verticalKey && !tabs[tab.url]) {
	        tab.verticalKey = tab.url;
	      }

	      tabs[tab.verticalKey] = new Tab(tab);
	    }

	    return tabs;
	  };

	  return Tab;
	}();
	/**
	 * NavigationComponent exposes an interface for building a dynamic
	 * navigation that is powered by universal search updates.
	 * @extends Component
	 */

	var NavigationComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(NavigationComponent, _Component);

	  function NavigationComponent(config, systemConfig) {
	    var _context, _context2;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The label to show on the dropdown menu button when overflow
	     * @type {string}
	     */

	    _this.overflowLabel = config.overflowLabel || "More";
	    /**
	     * The optional icon to show on the dropdown menu button when overflow
	     * @type {string}
	     */

	    _this.overflowIcon = config.overflowIcon || 'kabob';
	    /**
	     * The data storage key
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.NAVIGATION;
	    /**
	     * Tabs config from global navigation config
	     * @type {Array.<object>}
	     * @private
	     */

	    _this._tabsConfig = config.verticalPages || _this.core.globalStorage.getState(StorageKeys.VERTICAL_PAGES_CONFIG).get();
	    /**
	     * Unordered map of each tab, keyed by VS verticalKey
	     * @type {Object.<String, Object>}
	     * @private
	     */

	    _this._tabs = Tab.from(_this._tabsConfig);
	    /**
	     * The order of the tabs, parsed from configuration or URL.
	     * This gets updated based on the server results
	     * @type {Array.<String>} The list of VS verticalKeys
	     * @private
	     */

	    _this._tabOrder = getDefaultTabOrder(_this._tabsConfig, getUrlParams());
	    /**
	     * Breakpoints at which navigation items move to the "more" dropdown
	     * @type {number[]}
	     * @private
	     */

	    _this._navBreakpoints = [];
	    /**
	     *  The mobile overflow behavior config
	     *  @type {string}
	     */

	    _this._mobileOverflowBehavior = config.mobileOverflowBehavior || MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE;
	    /**
	     *  The ARIA label
	     *  @type {string}
	     */

	    _this._ariaLabel = config.ariaLabel || "Search Page Navigation";
	    _this.checkOutsideClick = bind$5(_context = _this.checkOutsideClick).call(_context, assertThisInitialized(_this));
	    _this.checkMobileOverflowBehavior = bind$5(_context2 = _this.checkMobileOverflowBehavior).call(_context2, assertThisInitialized(_this));

	    var reRender = function reRender() {
	      _this.setState(_this.core.globalStorage.getState(StorageKeys.NAVIGATION) || {});
	    };

	    _this.core.globalStorage.on('update', StorageKeys.API_CONTEXT, reRender);

	    _this.core.globalStorage.on('update', StorageKeys.SESSIONS_OPT_IN, reRender);

	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  NavigationComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'navigation/navigation';
	  };

	  var _proto = NavigationComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    // TODO: Re-rendering and re-mounting the component every tim e the window changes size
	    // is not great.
	    DOM.on(window, 'resize', this.checkMobileOverflowBehavior);
	  };

	  _proto.onDestroy = function onDestroy() {
	    DOM.off(window, 'resize', this.checkMobileOverflowBehavior);
	  };

	  _proto.onMount = function onMount() {
	    if (this.shouldCollapse()) {
	      var _context3;

	      this._navBreakpoints = [];
	      this.bindOverflowHandlers();
	      this.refitNav();
	      DOM.on(DOM.query(this._container, '.yxt-Nav-more'), 'click', bind$5(_context3 = this.toggleMoreDropdown).call(_context3, this));
	    }
	  };

	  _proto.onUnMount = function onUnMount() {
	    this.unbindOverflowHandlers();
	  };

	  _proto.bindOverflowHandlers = function bindOverflowHandlers() {
	    DOM.on(window, 'click', this.checkOutsideClick);
	  };

	  _proto.unbindOverflowHandlers = function unbindOverflowHandlers() {
	    DOM.off(window, 'click', this.checkOutsideClick);
	  };

	  _proto.refitNav = function refitNav() {
	    var container = DOM.query(this._container, '.yxt-Nav-container');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    var mainLinks = DOM.query(this._container, '.yxt-Nav-expanded');
	    var collapsedLinks = DOM.query(this._container, '.yxt-Nav-modal');
	    var navWidth = moreButton.classList.contains('yxt-Nav-item--more') ? container.offsetWidth : container.offsetWidth - moreButton.offsetWidth;
	    var numBreakpoints = this._navBreakpoints.length; // sum child widths instead of using parent's width to avoid
	    // browser inconsistencies

	    var mainLinksWidth = 0;

	    for (var _iterator = mainLinks.children, _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var el = _ref;
	      mainLinksWidth += el.offsetWidth;
	    }

	    if (mainLinksWidth > navWidth) {
	      this._navBreakpoints.push(mainLinksWidth);

	      var lastLink = mainLinks.children.item(mainLinks.children.length - 1);

	      if (lastLink === null) {
	        return;
	      }

	      this._prepend(collapsedLinks, lastLink);

	      if (moreButton.classList.contains('yxt-Nav-item--more')) {
	        moreButton.classList.remove('yxt-Nav-item--more');
	      }
	    } else {
	      if (numBreakpoints && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
	        var firstLink = collapsedLinks.children.item(0);

	        if (firstLink === null) {
	          return;
	        }

	        mainLinks.append(firstLink);

	        this._navBreakpoints.pop();

	        numBreakpoints--;
	      }

	      if (collapsedLinks.children.length === 0) {
	        moreButton.classList.add('yxt-Nav-item--more');
	      }
	    }

	    this.closeMoreDropdown();

	    if (mainLinksWidth > navWidth || numBreakpoints > 0 && navWidth > this._navBreakpoints[numBreakpoints - 1]) {
	      this.refitNav();
	    }
	  };

	  _proto.closeMoreDropdown = function closeMoreDropdown() {
	    var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
	    collapsed.classList.remove('is-active');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    moreButton.setAttribute('aria-expanded', false);
	  };

	  _proto.openMoreDropdown = function openMoreDropdown() {
	    var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
	    collapsed.classList.add('is-active');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    moreButton.setAttribute('aria-expanded', true);
	  };

	  _proto.toggleMoreDropdown = function toggleMoreDropdown() {
	    var collapsed = DOM.query(this._container, '.yxt-Nav-modal');
	    collapsed.classList.toggle('is-active');
	    var moreButton = DOM.query(this._container, '.yxt-Nav-more');
	    moreButton.setAttribute('aria-expanded', collapsed.classList.contains('is-active'));
	  };

	  _proto.checkOutsideClick = function checkOutsideClick(e) {
	    if (this._closest(e.target, '.yxt-Nav-container')) {
	      return;
	    }

	    this.closeMoreDropdown();
	  };

	  _proto.checkMobileOverflowBehavior = function checkMobileOverflowBehavior() {
	    var _context4;

	    if (this._checkMobileOverflowBehaviorTimer) {
	      clearTimeout(this._checkMobileOverflowBehaviorTimer);
	    }

	    this._checkMobileOverflowBehaviorTimer = setTimeout$2(bind$5(_context4 = this.setState).call(_context4, this), RESIZE_DEBOUNCE);
	  }
	  /**
	   * Since the server data only provides a list of
	   * VS verticalKeys, we need to compute and transform
	   * the data into the proper format for rendering.
	   *
	   * @override
	   */
	  ;

	  _proto.setState = function setState(data) {
	    var _this2 = this;

	    if (data === void 0) {
	      data = {};
	    }

	    if (data.tabOrder !== undefined) {
	      this._tabOrder = mergeTabOrder(data.tabOrder, this._tabOrder, this._tabs);
	    }

	    var params = getUrlParams();
	    params.set('tabOrder', this._tabOrder);
	    var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

	    if (context) {
	      params.set(StorageKeys.API_CONTEXT, context);
	    }

	    var referrerPageUrl = this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

	    if (referrerPageUrl !== null) {
	      params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
	    }

	    var filteredParams = filterParamsForExperienceLink(params, function (types) {
	      return _this2.componentManager.getComponentNamesForComponentTypes(types);
	    }); // Since the tab ordering can change based on the server data
	    // we need to update each tabs URL to include the order as part of their params.
	    // This helps with persisting state across verticals.

	    var tabs = [];

	    for (var i = 0; i < this._tabOrder.length; i++) {
	      var tab = this._tabs[this._tabOrder[i]];

	      if (tab !== undefined) {
	        tab.url = replaceUrlParams(tab.baseUrl, filteredParams);
	        tabs.push(tab);
	      }
	    }

	    return _Component.prototype.setState.call(this, {
	      tabs: tabs,
	      overflowLabel: this.overflowLabel,
	      overflowIcon: this.overflowIcon,
	      showCollapse: this.shouldCollapse(),
	      ariaLabel: this._ariaLabel
	    });
	  } // TODO (agrow) investigate removing this
	  // ParentNode.prepend polyfill
	  // https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend#Polyfill
	  ;

	  _proto._prepend = function _prepend(collapsedLinks, lastLink) {
	    if (!collapsedLinks.hasOwnProperty('prepend')) {
	      var docFrag = document.createDocumentFragment();
	      var isNode = lastLink instanceof Node;
	      docFrag.appendChild(isNode ? lastLink : document.createTextNode(String(lastLink)));
	      collapsedLinks.insertBefore(docFrag, collapsedLinks.firstChild);
	      return;
	    }

	    collapsedLinks.prepend(lastLink);
	  } // TODO (agrow) investigate removing this
	  // Adapted from Element.closest polyfill
	  // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
	  ;

	  _proto._closest = function _closest(el, closestElSelector) {
	    if (!el.hasOwnProperty('closest')) {
	      do {
	        if (DOM.matches(el, closestElSelector)) return el;
	        el = el.parentElement || el.parentNode;
	      } while (el !== null && el.nodeType === 1);

	      return null;
	    }

	    return el.closest(closestElSelector);
	  };

	  _proto.shouldCollapse = function shouldCollapse() {
	    switch (this._mobileOverflowBehavior) {
	      case MOBILE_OVERFLOW_BEHAVIOR_OPTION.COLLAPSE:
	        return true;

	      case MOBILE_OVERFLOW_BEHAVIOR_OPTION.INNERSCROLL:
	        var container = DOM.query(this._container, '.yxt-Nav-container') || this._container;

	        var navWidth = container.offsetWidth;
	        return navWidth > MOBILE_BREAKPOINT;
	    }
	  };

	  createClass(NavigationComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Navigation';
	    }
	  }]);

	  return NavigationComponent;
	}(Component);

	var IconState = {
	  'YEXT': 0,
	  'MAGNIFYING_GLASS': 1
	};
	/**
	 * SearchComponent exposes an interface in order to create
	 * a UI Search experience for vertical and universal search.
	 *
	 * @extends Component
	 */

	var SearchComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(SearchComponent, _Component);

	  function SearchComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The optional vertical key for vertical search configuration
	     * If not provided, auto-complete and search will be based on universal
	     * @type {string}
	     */

	    _this._verticalKey = config.verticalKey || null;
	    /**
	     * Query submission can optionally be based on a form as context. Note that if
	     * a form is not used, the component has no guarantee of WCAG compliance.
	     */

	    _this._useForm = config.useForm !== undefined ? config.useForm : true;
	    /**
	     * Query submission is based on a form as context.
	     * Optionally provided, otherwise defaults to native form node within container
	     * @type {string} CSS selector
	     */

	    _this._formEl = config.formSelector || 'form';
	    /**
	     * The input element used for searching and wires up the keyboard interaction
	     * Optionally provided.
	     * @type {string} CSS selector
	     */

	    _this._inputEl = config.inputEl || '.js-yext-query';
	    /**
	     * The title used, provided to the template as a data point
	     * Optionally provided. If not provided, no title will be included.
	     * @type {string}
	     */

	    _this.title = config.title;
	    /**
	     * The label text is used for labeling the input box, also provided to template.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.labelText = config.labelText || "Conduct a search";
	    /**
	     * The submit text is used for labeling the submit button, also provided to the template.
	     * @type {string}
	     */

	    _this.submitText = config.submitText || "Submit";
	    /**
	     * The clear text is used for labeling the clear button, also provided to the template.
	     * @type {string}
	     */

	    _this.clearText = config.clearText || "Clear";
	    /**
	     * The submit icon is an icon for the submit button, if provided it will be displayed and the
	     * submit text will be used for screen readers.
	     * @type {string|null}
	     */

	    _this.submitIcon = config.submitIcon || null;
	    /**
	     * The query text to show as the first item for auto complete.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.promptHeader = config.promptHeader || null;
	    /**
	     * Auto focuses the input box if set to true.
	     * Optionally provided, defaults to false.
	     * @type {boolean}
	     */

	    _this.autoFocus = config.autoFocus === true;
	    /**
	     * If true, show an "x" that allows the user to clear the current
	     * query
	     * @type {boolean}
	     */

	    _this.clearButton = config.clearButton === undefined ? true : config.clearButton;
	    /**
	     * When autofocusing on load, optionally open the autocomplete
	     * (preset prompts)
	     * @type {boolean}
	     */

	    _this.autocompleteOnLoad = config.autocompleteOnLoad || false;
	    /**
	     * submitURL will force the search query submission to get
	     * redirected to the URL provided.
	     * Optional, defaults to null.
	     *
	     * If no redirectUrl provided, we keep the page as a single page app.
	     *
	     * @type {string}
	     */

	    _this.redirectUrl = config.redirectUrl || null;
	    /**
	     * redirectUrlTarget will force the search query submission to open in the frame specified if
	     * redirectUrl is also supplied.
	     * Optional, defaults to current frame.
	     *
	     * @type {string}
	     */

	    _this.redirectUrlTarget = config.redirectUrlTarget || '_self';
	    /**
	     * true if there is another search bar present on the page.
	     * Twins only update the query, and do not search
	     */

	    _this._isTwin = config.isTwin;
	    /**
	     * The search config from ANSWERS.init configuration
	     */

	    _this._globalSearchConfig = _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG) || {};
	    /**
	     * The default initial search query, can be an empty string
	     */

	    _this._defaultInitialSearch = _this._globalSearchConfig.defaultInitialSearch;
	    /**
	     * The default options for core search
	     * @type {Object}
	     */

	    _this._defaultSearchOptions = {
	      setQueryParams: true,
	      resetPagination: !!_this._verticalKey
	    };
	    /**
	     * The query string to use for the input box, provided to template for rendering.
	     * Optionally provided
	     * @type {string|null}
	     */

	    _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY);

	    _this.core.globalStorage.on('update', StorageKeys.QUERY, function (q) {
	      _this.query = q;

	      if (_this.queryEl) {
	        _this.queryEl.value = q;
	      }

	      if (q === null) {
	        if (_this._defaultInitialSearch || _this._defaultInitialSearch === '') {
	          _this.core.globalStorage.set(StorageKeys.QUERY_TRIGGER, QueryTriggers.INITIALIZE);

	          _this.core.setQuery(_this._defaultInitialSearch);
	        }

	        return;
	      }

	      _this._updateClearButtonVisibility(q);

	      var queryTrigger = _this.core.globalStorage.getState(StorageKeys.QUERY_TRIGGER);

	      var resetPagination = _this._verticalKey && queryTrigger !== QueryTriggers.QUERY_PARAMETER && queryTrigger !== QueryTriggers.INITIALIZE;

	      var searchOptions = _extends_1({}, _this._defaultSearchOptions, {
	        resetPagination: resetPagination
	      });

	      _this.debouncedSearch(q, searchOptions);
	    });
	    /**
	     * The minimum time allowed in milliseconds between searches to prevent
	     * many duplicate searches back-to-back
	     * @type {number}
	     * @private
	     */


	    _this._searchCooldown = config.searchCooldown || 300;
	    /**
	     * When true and "near me" intent is expressed, prompt the user for their geolocation
	     * @type {boolean}
	     * @private
	     */

	    _this._promptForLocation = config.promptForLocation === undefined ? true : Boolean(config.promptForLocation);
	    /**
	     * Controls showing and hiding the search clear button
	     */

	    _this._showClearButton = _this.clearButton && _this.query;
	    /**
	     * For vertical search bars, whether or not to allow empty searches.
	     * @type {boolean}
	     * @private
	     */

	    _this._allowEmptySearch = !!config.allowEmptySearch;
	    /**
	     * The name of the child AutoComplete component.
	     * @type {string}
	     * @private
	     */

	    _this._autoCompleteName = _this.name + ".autocomplete";
	    /**
	     * Options to pass to the geolocation api.
	     * @type {Object}
	     */

	    _this._geolocationOptions = objectSpread({
	      enableHighAccuracy: false,
	      timeout: 1000,
	      maximumAge: 300000
	    }, config.geolocationOptions);
	    /**
	     * Options for the geolocation timeout alert.
	     * @type {Object}
	     */

	    _this._geolocationTimeoutAlert = objectSpread({
	      enabled: false,
	      message: "We are unable to determine your location"
	    }, config.geolocationTimeoutAlert);
	    /**
	     * The unique HTML id name for the autocomplete container
	     * @type {string}
	     */

	    _this.autocompleteContainerIdName = "yxt-SearchBar-autocomplete--" + _this.name;
	    /**
	     * The unique HTML id name for the search input label
	     * @type {string}
	     */

	    _this.inputLabelIdName = "yxt-SearchBar-inputLabel--" + _this.name;
	    /**
	     * The unique HTML id name for the search input
	     * @type {string}
	     */

	    _this.inputIdName = "yxt-SearchBar-input--" + _this.name;
	    _this.customHooks = {
	      /**
	       * Callback invoked when the clear search button is clicked
	       */
	      onClearSearch: config.customHooks && config.customHooks.onClearSearch || function () {},

	      /**
	       * Callback invoked when a search is conducted
	       */
	      onConductSearch: config.customHooks && config.customHooks.onConductSearch || function () {}
	    };
	    /**
	     * Options to pass to the autocomplete component
	     * @type {Object}
	     */

	    _this._autocompleteConfig = {
	      shouldHideOnEmptySearch: config.autocomplete && config.autocomplete.shouldHideOnEmptySearch,
	      onOpen: config.autocomplete && config.autocomplete.onOpen,
	      onClose: config.autocomplete && config.autocomplete.onClose
	    };
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  SearchComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/search';
	  };

	  var _proto = SearchComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    if (this.query != null && !this.redirectUrl) {
	      this.core.setQuery(this.query);
	    }
	  };

	  _proto.onMount = function onMount() {
	    this.queryEl = DOM.query(this._container, this._inputEl);

	    if (this.autoFocus && !this.query && !this.autocompleteOnLoad) {
	      this.focusInputElement();
	    }

	    this.isUsingYextAnimatedIcon = !this._config.customIconUrl && !this.submitIcon;

	    if (this.isUsingYextAnimatedIcon) {
	      this.initAnimatedIcon();
	    } // Wire up our search handling and auto complete


	    this.initSearch(this._formEl);
	    this.initAutoComplete(this._inputEl);

	    if (this.clearButton) {
	      this.initClearButton();
	    }

	    if (this.autoFocus && !this.query && this.autocompleteOnLoad) {
	      this.focusInputElement();
	    }
	  };

	  _proto.requestIconAnimationFrame = function requestIconAnimationFrame(iconState) {
	    var _this2 = this;

	    if (this.iconState === iconState) {
	      return;
	    }

	    this.iconState = iconState;

	    if (!this.isRequestingAnimationFrame) {
	      this.isRequestingAnimationFrame = true;
	      window.requestAnimationFrame(function () {
	        _this2.forwardIcon.classList.remove('yxt-SearchBar-AnimatedIcon--paused');

	        _this2.reverseIcon.classList.remove('yxt-SearchBar-AnimatedIcon--paused');

	        if (_this2.iconState === IconState.MAGNIFYING_GLASS) {
	          _this2.forwardIcon.classList.remove('yxt-SearchBar-AnimatedIcon--inactive');

	          _this2.reverseIcon.classList.add('yxt-SearchBar-AnimatedIcon--inactive');
	        } else if (_this2.iconState === IconState.YEXT) {
	          _this2.forwardIcon.classList.add('yxt-SearchBar-AnimatedIcon--inactive');

	          _this2.reverseIcon.classList.remove('yxt-SearchBar-AnimatedIcon--inactive');
	        }

	        _this2.isRequestingAnimationFrame = false;
	      });
	    }
	  };

	  _proto.animateIconToMagnifyingGlass = function animateIconToMagnifyingGlass() {
	    if (this.iconIsFrozen) {
	      return;
	    }

	    this.requestIconAnimationFrame(IconState.MAGNIFYING_GLASS);
	  };

	  _proto.animateIconToYext = function animateIconToYext(e) {
	    var focusStillInSearchbar = false;

	    if (e && e.relatedTarget) {
	      focusStillInSearchbar = this._container.contains(e.relatedTarget);
	    }

	    if (this.iconIsFrozen || focusStillInSearchbar) {
	      return;
	    }

	    this.requestIconAnimationFrame(IconState.YEXT);
	  };

	  _proto.initAnimatedIcon = function initAnimatedIcon() {
	    var _this3 = this;

	    this.iconState = this.autoFocus && !this.query ? IconState.MAGNIFYING_GLASS : IconState.YEXT;
	    this.forwardIcon = DOM.query(this._container, '.js-yxt-AnimatedForward');
	    this.reverseIcon = DOM.query(this._container, '.js-yxt-AnimatedReverse');
	    var clickableElementSelectors = ['.js-yext-submit', '.js-yxt-SearchBar-clear'];

	    for (var _i = 0, _clickableElementSele = clickableElementSelectors; _i < _clickableElementSele.length; _i++) {
	      var selector = _clickableElementSele[_i];
	      var clickableEl = DOM.query(this._container, selector);

	      if (clickableEl) {
	        DOM.on(clickableEl, 'mousedown', function () {
	          _this3.iconIsFrozen = true;
	        });
	        DOM.on(clickableEl, 'mouseup', function () {
	          _this3.iconIsFrozen = false;
	        });
	      }
	    }

	    DOM.on(this.queryEl, 'focus', function () {
	      _this3.animateIconToMagnifyingGlass();
	    });
	    DOM.on(this._container, 'focusout', function (e) {
	      _this3.animateIconToYext(e);
	    });
	  };

	  _proto.remove = function remove() {
	    this._autocomplete.remove();

	    _Component.prototype.remove.call(this);
	  };

	  _proto.initClearButton = function initClearButton() {
	    var _this4 = this;

	    var button = this._getClearButton();

	    this._showClearButton = this._showClearButton || this.query;
	    button.classList.toggle('yxt-SearchBar--hidden', !this._showClearButton);
	    DOM.on(button, 'click', function () {
	      _this4.customHooks.onClearSearch();

	      _this4.query = '';
	      _this4._showClearButton = false;
	      button.classList.add('yxt-SearchBar--hidden');
	      _this4.queryEl.value = _this4.query;

	      _this4.core.persistentStorage.set(StorageKeys.QUERY, _this4.query);

	      _this4.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);

	      _this4.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);

	      _this4.core.setQuery(_this4.query); // Focus the input element after clearing the query, regardless of whether
	      // or not the autoFocus option is enabled.
	      // NOTE(amullings): This depends heavily on the fact that the re-renders
	      // triggered by setState and core.setQuery happen synchronously; if this
	      // stops being the case at some point, we'll need an alternative solution


	      _this4.focusInputElement();
	    });
	    DOM.on(this.queryEl, 'input', function (e) {
	      var input = e.target.value;
	      _this4.query = input;

	      _this4._updateClearButtonVisibility(input);
	    });
	  }
	  /**
	   * Registers the different event handlers that can issue a search. Note that
	   * different handlers are used depending on whether or not a form is used as
	   * context.
	   *
	   * @param {string} formSelector CSS selector to bind our form submit handling to
	   */
	  ;

	  _proto.initSearch = function initSearch(formSelector) {
	    var _this5 = this;

	    this._formEl = formSelector;

	    this._container.classList.add('yxt-SearchBar-wrapper');

	    if (this._useForm) {
	      var form = DOM.query(this._container, formSelector);

	      if (!form) {
	        throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._formEl, '`.');
	      }

	      DOM.on(form, 'submit', function (e) {
	        e.preventDefault(); // TODO(oshi) we should not use the same css selector (this._inputEl)
	        // For both the autocomplete AND the search bar input
	        // This is incredibly confusing, and also makes the first DOM.query
	        // Rely on the order of the input el and autocomplete in the template

	        var inputEl = form.querySelector(_this5._inputEl);

	        _this5.onQuerySubmit(inputEl);
	      });
	    } else {
	      var inputEl = DOM.query(this._container, this._inputEl);

	      if (!inputEl) {
	        throw new Error('Could not initialize SearchBar; Can not find {HTMLElement} `', this._inputEl, '`.');
	      }

	      DOM.on(inputEl, 'keydown', function (e) {
	        if (e.key === 'Enter') {
	          e.preventDefault();

	          _this5.onQuerySubmit(inputEl);
	        }
	      });
	      var submitButton = DOM.query(this._container, '.js-yext-submit');
	      DOM.on(submitButton, 'click', function (e) {
	        e.preventDefault();

	        _this5.onQuerySubmit(inputEl);
	      });
	    }
	  }
	  /**
	   * The handler for a query submission. This method first sets the new query in
	   * persistent and global storage, than performs a debounced search.
	   *
	   * @param {Node} inputEl The input element containing the query.
	   */
	  ;

	  _proto.onQuerySubmit = function onQuerySubmit(inputEl) {
	    var query = inputEl.value;
	    this.query = query;
	    var params = new SearchParams(window.location.search.substring(1));
	    params.set('query', query);
	    var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

	    if (context) {
	      params.set(StorageKeys.API_CONTEXT, context);
	    } // If we have a redirectUrl, we want the form to be
	    // serialized and submitted.


	    if (typeof this.redirectUrl === 'string') {
	      if (this._allowEmptySearch || query) {
	        var newUrl = this.redirectUrl + '?' + params.toString();
	        window.open(newUrl, this.redirectUrlTarget) || (window.location.href = newUrl);
	        return false;
	      }
	    }

	    inputEl.blur();
	    DOM.query(this._container, '.js-yext-submit').blur(); // TODO: move this into initClearButton

	    if (this.clearButton) {
	      var button = DOM.query(this._container, '.js-yxt-SearchBar-clear');

	      if (this.query) {
	        this._showClearButton = true;
	        button.classList.remove('yxt-SearchBar--hidden');
	      } else {
	        this._showClearButton = false;
	        button.classList.add('yxt-SearchBar--hidden');
	      }
	    }

	    if (this.isUsingYextAnimatedIcon) {
	      this.animateIconToYext();
	    }

	    this.core.persistentStorage.set(StorageKeys.QUERY, query);
	    this.core.persistentStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.globalStorage["delete"](StorageKeys.SEARCH_OFFSET);
	    this.core.setQuery(query);
	    this.debouncedSearch(query, this._defaultSearchOptions);
	    return false;
	  }
	  /**
	   * A helper method to wire up our auto complete on an input selector
	   * @param {string} inputSelector CSS selector to bind our auto complete component to
	   */
	  ;

	  _proto.initAutoComplete = function initAutoComplete(inputSelector) {
	    var _this6 = this;

	    this._inputEl = inputSelector;

	    if (this._autocomplete) {
	      this._autocomplete.remove();
	    }

	    this._autocomplete = this.componentManager.create('AutoComplete', objectSpread({
	      parentContainer: this._container,
	      name: this._autoCompleteName,
	      container: '.yxt-SearchBar-autocomplete',
	      autoFocus: this.autoFocus && !this.autocompleteOnLoad,
	      verticalKey: this._verticalKey,
	      promptHeader: this.promptHeader,
	      originalQuery: this.query,
	      inputEl: inputSelector,
	      listLabelIdName: this.inputLabelIdName
	    }, this._autocompleteConfig, {
	      onSubmit: function onSubmit() {
	        if (_this6._useForm) {
	          DOM.trigger(DOM.query(_this6._container, _this6._formEl), 'submit');
	        } else {
	          var inputEl = DOM.query(_this6._container, inputSelector);

	          _this6.onQuerySubmit(inputEl);
	        }
	      },
	      onChange: function onChange() {
	        DOM.trigger(DOM.query(_this6._container, inputSelector), 'input');
	      }
	    }));

	    this._autocomplete.mount();
	  }
	  /**
	   * Performs a debounced query using the provided string input. Specifically, a new search is not
	   * performed if we recently searched, if there's no query for universal search, or if this
	   * is a twin searchbar.
	   * @param {string} query The string to query against.
	   * @param {Object} searchOptions The options to pass for core search
	   * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
	   */
	  ;

	  _proto.debouncedSearch = function debouncedSearch(query, searchOptions) {
	    var _this7 = this;

	    if (this._throttled || !query && !this._verticalKey || !query && this._verticalKey && !this._allowEmptySearch || this._isTwin) {
	      return;
	    }

	    this._throttled = true;

	    setTimeout$2(function () {
	      _this7._throttled = false;
	    }, this._searchCooldown); // If _promptForLocation is enabled, we will compute the query's intent and, from there,
	    // determine if it's necessary to prompt the user for their location information. It will
	    // be unnecessary if the query does not have near me intent or we already have their location
	    // stored.


	    if (this._promptForLocation) {
	      this.fetchQueryIntents(query).then(function (queryIntents) {
	        return includes$4(queryIntents).call(queryIntents, 'NEAR_ME');
	      }).then(function (queryHasNearMeIntent) {
	        if (queryHasNearMeIntent && !_this7.core.globalStorage.getState(StorageKeys.GEOLOCATION)) {
	          return new promise$3(function (resolve, reject) {
	            return navigator.geolocation.getCurrentPosition(function (position) {
	              _this7.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	                lat: position.coords.latitude,
	                lng: position.coords.longitude,
	                radius: position.coords.accuracy
	              });

	              resolve(_this7.search(query, searchOptions));
	            }, function () {
	              resolve(_this7.search(query, searchOptions));
	              var _this7$_geolocationTi = _this7._geolocationTimeoutAlert,
	                  enabled = _this7$_geolocationTi.enabled,
	                  message = _this7$_geolocationTi.message;

	              if (enabled) {
	                window.alert(message);
	              }
	            }, _this7._geolocationOptions);
	          });
	        } else {
	          return _this7.search(query, searchOptions);
	        }
	      });
	    } else {
	      return this.search(query, searchOptions);
	    }
	  }
	  /**
	   * Performs a query using the provided string input.
	   * @param {string} query The string to query against.
	   * @param {Object} searchOptions The options to pass for core search
	   * @returns {Promise} A promise that will perform the query and update globalStorage accordingly.
	   */
	  ;

	  _proto.search = function search(query, searchOptions) {
	    this.customHooks.onConductSearch(query);

	    if (this._verticalKey) {
	      this.core.verticalSearch(this._config.verticalKey, searchOptions, {
	        input: query
	      });
	    } else {
	      // NOTE(billy) Temporary hack for DEMO
	      // Remove me after the demo
	      var nav = this.componentManager.getActiveComponent('Navigation');

	      if (nav) {
	        var tabs = nav.getState('tabs');
	        var urls = {};

	        if (tabs && isArray$3(tabs)) {
	          for (var i = 0; i < tabs.length; i++) {
	            var params = new SearchParams(tabs[i].url.split('?')[1]);
	            params.set('query', query);
	            var url = tabs[i].baseUrl;

	            if (params.toString().length > 0) {
	              url += '?' + params.toString();
	            }

	            urls[tabs[i].configId] = url;
	          }
	        }

	        return this.core.search(query, urls, searchOptions);
	      }

	      return this.core.search(query, undefined, searchOptions);
	    }
	  }
	  /**
	   * A helper method that computes the intents of the provided query. If the query was entered
	   * manually into the search bar or selected via autocomplete, its intents will have been stored
	   * already in globalStorage. Otherwise, a new API call will have to be issued to determine
	   * intent.
	   * @param {string} query The query whose intent is needed.
	   * @returns {Promise} A promise containing the intents of the query.
	   */
	  ;

	  _proto.fetchQueryIntents = function fetchQueryIntents(query) {
	    var autocompleteData = this.core.globalStorage.getState(StorageKeys.AUTOCOMPLETE + "." + this._autoCompleteName);

	    if (!autocompleteData) {
	      var autocompleteRequest = this._verticalKey ? this.core.autoCompleteVertical(query, this._autoCompleteName, this._verticalKey) : this.core.autoCompleteUniversal(query, this._autoCompleteName);
	      return autocompleteRequest.then(function (data) {
	        return data.inputIntents;
	      });
	    } else {
	      var _context;

	      // There are two alternatives to consider here. The user could have selected the query
	      // as an autocomplete option or manually input it themselves. If the former, use the intents
	      // of the corresponding autocomplete option. If the latter, use the inputIntents of the
	      // autocompleteData.
	      var results = flatMap$2(_context = autocompleteData.sections).call(_context, function (section) {
	        return section.results;
	      });

	      var matchingResult = find$3(results).call(results, function (result) {
	        return result.value === query;
	      });

	      var queryIntents = matchingResult ? matchingResult.intents : autocompleteData.inputIntents;
	      return promise$3.resolve(queryIntents);
	    }
	  }
	  /**
	   * A helper method that constructs the meta information needed by the SEARCH_CLEAR_BUTTON
	   * analytics event.
	   */
	  ;

	  _proto.eventOptions = function eventOptions() {
	    var queryId = this.core.globalStorage.getState(StorageKeys.QUERY_ID);

	    var options = _extends_1({}, queryId && {
	      queryId: queryId
	    }, this._verticalKey && {
	      verticalKey: this._verticalKey
	    });

	    return stringify$2(options);
	  };

	  _proto.setState = function setState(data) {
	    var forwardIconOpts = {
	      iconName: 'yext_animated_forward',
	      classNames: 'Icon--lg',
	      complexContentsParams: {
	        iconPrefix: this.name
	      }
	    };
	    var reverseIconOpts = {
	      iconName: 'yext_animated_reverse',
	      classNames: 'Icon--lg',
	      complexContentsParams: {
	        iconPrefix: this.name
	      }
	    };
	    return _Component.prototype.setState.call(this, _extends_1({
	      title: this.title,
	      inputIdName: this.inputIdName,
	      labelText: this.labelText,
	      inputLabelIdName: this.inputLabelIdName,
	      submitIcon: this.submitIcon,
	      submitText: this.submitText,
	      clearText: this.clearText,
	      showClearButton: this._showClearButton,
	      query: this.query || '',
	      eventOptions: this.eventOptions(),
	      iconId: this.name,
	      forwardIconOpts: forwardIconOpts,
	      reverseIconOpts: reverseIconOpts,
	      autoFocus: this.autoFocus && !this.query,
	      useForm: this._useForm,
	      autocompleteContainerIdName: this.autocompleteContainerIdName
	    }, data));
	  };

	  _proto.focusInputElement = function focusInputElement() {
	    DOM.query(this._container, this._inputEl).focus();
	  }
	  /**
	   * Returns the clear button element, if exists
	   *
	   * @returns {Element}
	   */
	  ;

	  _proto._getClearButton = function _getClearButton() {
	    return DOM.query(this._container, '.js-yxt-SearchBar-clear');
	  }
	  /**
	   * Updates the Search inputs clear button based on the current input value
	   *
	   * @param {string} input
	   */
	  ;

	  _proto._updateClearButtonVisibility = function _updateClearButtonVisibility(input) {
	    var clearButton = this._getClearButton();

	    if (!this._showClearButton && input.length > 0) {
	      this._showClearButton = true;
	      clearButton.classList.remove('yxt-SearchBar--hidden');
	    } else if (this._showClearButton && input.length === 0) {
	      this._showClearButton = false;
	      clearButton.classList.add('yxt-SearchBar--hidden');
	    }
	  };

	  createClass(SearchComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'SearchBar';
	    }
	  }]);

	  return SearchComponent;
	}(Component);

	/** @module SearchParamsParser */
	function buildSearchParameters(searchParameterConfigs) {
	  var searchParameters = {
	    sectioned: false,
	    fields: []
	  };

	  if (searchParameterConfigs === undefined) {
	    return searchParameters;
	  }

	  if (searchParameterConfigs.sectioned) {
	    searchParameters.sectioned = searchParameterConfigs.sectioned;
	  }

	  searchParameters.fields = buildFields(searchParameterConfigs.fields);
	  return searchParameters;
	}

	function buildFields(fieldConfigs) {
	  if (fieldConfigs === undefined) {
	    return [];
	  }

	  return map$2(fieldConfigs).call(fieldConfigs, function (fc) {
	    return objectSpread({
	      fetchEntities: false
	    }, fc);
	  });
	}

	/**
	 * FilterSearchComponent is used for autocomplete using the FilterSearch backend.
	 * It'll allow you to pick pre-set filters that are setup on the backend within
	 * a vertical search context.
	 *
	 * @extends Component
	 */

	var FilterSearchComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FilterSearchComponent, _Component);

	  function FilterSearchComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The vertical key for vertical search configuration
	     * @type {string}
	     */

	    _this._verticalKey = config.verticalKey || null;
	    /**
	     * If true, store the filter value but do not search on change
	     * @type {boolean}
	     * @private
	     */

	    _this._storeOnChange = config.storeOnChange || false;
	    /**
	     * Query submission is based on a form as context.
	     * Optionally provided, otherwise defaults to native form node within container
	     * @type {string} CSS selector
	     */

	    _this._formEl = config.formSelector || 'form';
	    /**
	     * The input element used for searching and wires up the keyboard interaction
	     * Optionally provided.
	     * @type {string} CSS selector
	     */

	    _this._inputEl = config.inputEl || '.js-yext-query';
	    /**
	     * The title used, provided to the template as a data point
	     * Optionally provided.
	     * @type {string}
	     */

	    _this.title = config.title;
	    /**
	     * The search text used for labeling the input box, also provided to template.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.searchText = config.searchText || "What are you interested in?";
	    /**
	     * The query text to show as the first item for auto complete.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.promptHeader = config.promptHeader || null;
	    /**
	     * Auto focuses the input box if set to true.
	     * Optionally provided, defaults to false.
	     * @type {boolean}
	     */

	    _this.autoFocus = config.autoFocus === true;
	    /**
	     * submitURL will force the search query submission to get
	     * redirected to the URL provided.
	     * Optional, defaults to null.
	     *
	     * If no redirectUrl provided, we keep the page as a single page app.
	     *
	     * @type {boolean}
	     */

	    _this.redirectUrl = config.redirectUrl || null;
	    /**
	     * The query string to use for the input box, provided to template for rendering.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.query = config.query || _this.core.globalStorage.getState(StorageKeys.QUERY + "." + _this.name) || '';

	    _this.core.globalStorage.on('update', StorageKeys.QUERY + "." + _this.name, function (q) {
	      _this.query = q;

	      _this.search();
	    });
	    /**
	     * The filter string to use for the provided query
	     * Optionally provided
	     * @type {string}
	     */


	    _this.filter = filter$4(config) || _this.core.globalStorage.getState(StorageKeys.FILTER + "." + _this.name);

	    if (typeof filter$4(_this) === 'string') {
	      try {
	        _this.filter = JSON.parse(filter$4(_this));
	      } catch (e) {}
	    }

	    if (_this.query && filter$4(_this)) {
	      var filterNode = _this._buildFilterNode(_this.query, filter$4(_this));

	      _this.core.setStaticFilterNodes(_this.name, filterNode);
	    }

	    _this.searchParameters = buildSearchParameters(config.searchParameters);
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  FilterSearchComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/filtersearch';
	  } // TODO(oshi): SPR-1925 check that it is safe to remove this, it runs an extra search
	  // For no obvious reasons
	  ;

	  var _proto = FilterSearchComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    if (this.query && filter$4(this)) {
	      this.search();
	    }
	  };

	  _proto.onMount = function onMount() {
	    if (this.autoCompleteComponent) {
	      this.autoCompleteComponent.remove();
	    } // Wire up our search handling and auto complete


	    this.initAutoComplete(this._inputEl);

	    if (this.autoFocus === true && this.query.length === 0) {
	      DOM.query(this._container, this._inputEl).focus();
	    }
	  };

	  _proto._removeFilterNode = function _removeFilterNode() {
	    this.query = '';
	    this.core.persistentStorage.set(StorageKeys.QUERY + "." + this.name, this.query);
	    this.core.clearStaticFilterNode(this.name);
	    this.setState();
	  };

	  _proto._buildFilterNode = function _buildFilterNode(query, filter) {
	    var _this2 = this;

	    return FilterNodeFactory.from({
	      filter: filter,
	      metadata: {
	        fieldName: this.title,
	        displayValue: "" + query
	      },
	      remove: function remove() {
	        return _this2._removeFilterNode();
	      }
	    });
	  }
	  /**
	   * A helper method to wire up our auto complete on an input selector
	   * @param {string} inputSelector CSS selector to bind our auto complete component to
	   */
	  ;

	  _proto.initAutoComplete = function initAutoComplete(inputSelector) {
	    var _this3 = this;

	    this._inputEl = inputSelector;
	    this.autoCompleteComponent = this.componentManager.create('AutoComplete', {
	      parentContainer: this._container,
	      name: this.name + ".autocomplete",
	      isFilterSearch: true,
	      container: '.yxt-SearchBar-autocomplete',
	      promptHeader: this.promptHeader,
	      originalQuery: this.query,
	      inputEl: inputSelector,
	      verticalKey: this._verticalKey,
	      searchParameters: this.searchParameters,
	      onSubmit: function onSubmit(query, filter) {
	        _this3.filter = Filter.fromResponse(filter);

	        var filterNode = _this3._buildFilterNode(query, filter$4(_this3));

	        var params = new SearchParams(window.location.search.substring(1));
	        params.set(_this3.name + ".query", query);
	        params.set(_this3.name + ".filter", filter); // If we have a redirectUrl, we want the params to be
	        // serialized and submitted.

	        if (typeof _this3.redirectUrl === 'string') {
	          window.location.href = _this3.redirectUrl + '?' + params.toString();
	          return false;
	        } // save the filter to storage for the next search


	        _this3.query = query;

	        _this3.core.persistentStorage.set(StorageKeys.QUERY + "." + _this3.name, _this3.query);

	        _this3.core.persistentStorage.set(StorageKeys.FILTER + "." + _this3.name, filterNode.getFilter());

	        _this3.core.setStaticFilterNodes(_this3.name, filterNode);

	        _this3.search();
	      }
	    });
	  }
	  /**
	   * Perform the vertical search with all saved filters and query,
	   * optionally redirecting based on config. Uses window.setTimeout to allow
	   * other filters to finish rendering before searching.
	   */
	  ;

	  _proto.search = function search() {
	    var _this4 = this;

	    if (this._storeOnChange) {
	      return;
	    }

	    window.setTimeout(function () {
	      _this4.core.verticalSearch(_this4._config.verticalKey, {
	        setQueryParams: true,
	        resetPagination: true,
	        useFacets: true
	      });
	    });
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, _extends_1({
	      title: this.title,
	      searchText: this.searchText,
	      query: this.query
	    }, data));
	  };

	  createClass(FilterSearchComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.FILTER_SEARCH;
	    }
	  }]);

	  return FilterSearchComponent;
	}(Component);

	var Keys = {
	  BACKSPACE: 8,
	  TAB: 9,
	  ENTER: 13,
	  SHIFT: 16,
	  CTRL: 17,
	  ALT: 18,
	  ESCAPE: 27,
	  LEFT: 37,
	  RIGHT: 39,
	  UP: 38,
	  DELETE: 46,
	  DOWN: 40,
	  LEFT_OS_KEY: 91,
	  RIGHT_OS_KEY: 92,
	  SELECT_KEY: 93
	};

	var AutoCompleteComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(AutoCompleteComponent, _Component);

	  function AutoCompleteComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    /**
	     * Whether autocomplete is simple or filter
	     * @type {boolean}
	     */

	    _this.isFilterSearch = opts.isFilterSearch || false;
	    /**
	     * The `verticalKey` of the vertical search to use for auto-complete
	     * @type {string}
	     */

	    _this._verticalKey = opts.verticalKey || null;
	    /**
	     * A reference to the input el selector for auto complete
	     * @type {string}
	     */

	    _this._inputEl = opts.inputEl || '.js-yext-query';
	    /**
	     * A selector for the autocomplete elementes
	     * @type {string}
	     */

	    _this._autocompleteEls = opts.autoCompleteEls || '.js-yext-autocomplete-option';
	    /**
	     * An internal reference for the data-storage to listen for updates from the server
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.AUTOCOMPLETE + "." + _this.name;
	    /**
	     * An internal reference to the input value when typing.
	     * We use this for resetting the state of the input value when other interactions (e.g. result navigation)
	     * change based on interactions. For instance, hitting escape should reset the value to the original typed query.
	     * @type {string}
	     */

	    _this._originalQuery = opts.originalQuery || '';
	    /**
	     * Used for keyboard navigation through results.
	     * An internal reference to the current section we're navigating in.
	     * @type {number}
	     */

	    _this._sectionIndex = 0;
	    /**
	     * Used for keyboard navigation through results.
	     * An internal reference to the current result index we're navigating on.
	     * @type {number}
	     */

	    _this._resultIndex = -1;
	    /**
	     * The query text to show as the first item for auto complete.
	     * Optionally provided
	     * @type {string}
	     */

	    _this.promptHeader = opts.promptHeader || null;
	    /**
	     * Whether the input is autocomatically focused or not
	     * @type {boolean}
	     */

	    _this._autoFocus = opts.autoFocus || false;
	    /**
	     * Callback invoked when the `Enter` key is pressed on auto complete.
	     */

	    _this._onSubmit = opts.onSubmit || function () {};
	    /**
	     * Callback invoked when keys are used to navigate through the auto complete. Note that this is
	     * not called when either the `Enter` key is pressed or the mouse is used to select an
	     * autocomplete option.
	     */


	    _this._onChange = opts.onChange || function () {};

	    _this._searchParameters = opts.searchParameters || null;
	    /**
	     * HTML id for the aria-labelledby in the autocomplete list
	     * @type {string}
	     */

	    _this.listLabelIdName = opts.listLabelIdName || 'yxt-SearchBar-listLabel--SearchBar';
	    /**
	     * Whether to hide the autocomplete when the search input is empty
	     * @type {boolean}
	     */

	    _this._shouldHideOnEmptySearch = opts.shouldHideOnEmptySearch || false;
	    /**
	     * Callback invoked when the autocomplete component changes from closed to open.
	     * @type {function}
	     */

	    _this._onOpen = opts.onOpen || function () {};
	    /**
	     * Callback invoked when the autocomplete component changes from open to closed.
	     * @type {function}
	     */


	    _this._onClose = opts.onClose || function () {};
	    /**
	     * Indicates the initial open/closed status of this component
	     * @type {boolean}
	     */


	    _this._isOpen = false;
	    return _this;
	  }
	  /**
	   * The aliased used by the component manager for creation.
	   */


	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  AutoCompleteComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'search/autocomplete';
	  }
	  /**
	   * setState is overridden so that we can provide additional meta data
	   * to the template (e.g. the sectionIndex and resultIndex), since
	   * those are client-interaction specific values and aren't returned from the server.
	   */
	  ;

	  var _proto = AutoCompleteComponent.prototype;

	  _proto.setState = function setState(data) {
	    var queryInputEl = DOM.query(this._parentContainer, this._inputEl);
	    var shouldHideAutocomplete = this._shouldHideOnEmptySearch && !queryInputEl.value;
	    var wasOpen = this._isOpen;

	    if (!this.isQueryInputFocused() || shouldHideAutocomplete) {
	      this._isOpen = false;
	      this._sectionIndex = 0;
	      this._resultIndex = -1;
	      data = {};
	    } else {
	      this._isOpen = true;
	    }

	    if (wasOpen && !this._isOpen) {
	      this._onClose();
	    } else if (!wasOpen && this._isOpen) {
	      this._onOpen();
	    }

	    _Component.prototype.setState.call(this, _extends_1({}, data, {
	      hasResults: this.hasResults(data),
	      sectionIndex: this._sectionIndex,
	      resultIndex: this._resultIndex,
	      promptHeader: this._originalQuery.length === 0 ? this.promptHeader : null,
	      listLabelIdName: this.listLabelIdName
	    }));
	  };

	  _proto.isQueryInputFocused = function isQueryInputFocused() {
	    var _context;

	    return document.activeElement && includes$4(_context = document.activeElement.className).call(_context, this._inputEl.substring(1));
	  }
	  /**
	   * updateState is a helper to apply the current state with new client-state.
	   */
	  ;

	  _proto.updateState = function updateState() {
	    this.setState(this._state.get());
	  }
	  /**
	   * onCreate is triggered when the component is constructed from the framework.
	   * Once we're initalized, we wire up all of our user interactions
	   */
	  ;

	  _proto.onCreate = function onCreate() {
	    var _this2 = this;

	    // Use the context of the parent component to find the input node.
	    var queryInput = DOM.query(this._parentContainer, this._inputEl);

	    if (!queryInput) {
	      throw new Error('Could not initialize AutoComplete. Can not find {HTMLElement} `', this._inputEl, '`.');
	    } // Disable the native autocomplete, autocorrect & spellcheck


	    DOM.attributes(queryInput, {
	      autocomplete: 'off',
	      autocorrect: 'off',
	      spellcheck: 'false'
	    }); // The user exits the input, so we want to reset the state and close
	    // the auto complete
	    // TODO(jdelerme): Close logic to be moved to parent

	    DOM.on(document, 'click', function (e) {
	      if (DOM.matches(e.target, '.js-yxt-AutoComplete-wrapper *') || DOM.matches(e.target, _this2._inputEl)) {
	        return;
	      }

	      _this2.close();
	    }); // When a user focuses the input, we should populate the autocomplete based
	    // on the current value

	    DOM.on(queryInput, 'focus', function () {
	      _this2.reset();

	      _this2.autoComplete(queryInput.value);
	    }); // Allow the user to navigate between the results using the keyboard

	    DOM.on(queryInput, 'keydown', function (e) {
	      _this2.handleNavigateResults(e.keyCode, e);

	      _this2.handleSubmitResult(e.keyCode, queryInput.value, e);
	    });

	    if (this._autoFocus) {
	      DOM.once(queryInput, 'click', function () {
	        _this2.autoComplete(queryInput.value);
	      });
	    } // Allow the user to select a result with the mouse


	    DOM.delegate(this._container, '.js-yext-autocomplete-option', 'click', function (evt, target) {
	      var data = target.dataset;
	      var val = data["short"];

	      _this2.updateQuery(val);

	      _this2._onSubmit(val, filter$4(data));

	      _this2.close();
	    }); // When the user is typing in the input, process the auto complete.

	    DOM.on(queryInput, 'keyup', function (e) {
	      _this2.handleTyping(e.keyCode, queryInput.value, e);
	    });
	  }
	  /**
	   * close will hide the auto complete results and reset the state.
	   */
	  ;

	  _proto.close = function close() {
	    this.setState({});
	    this.reset();
	  }
	  /**
	   * resets the client state to their original values and triggers
	   * a template-rerender via updateState
	   */
	  ;

	  _proto.reset = function reset() {
	    this._sectionIndex = 0;
	    this._resultIndex = -1;
	    this.updateState();
	  }
	  /**
	   * Helper method to update the input text
	   * @param {string} optValue Option value provided.
	   * If no value provided, we'll try to find it based on the selection indexes.
	   */
	  ;

	  _proto.updateQuery = function updateQuery(optValue) {
	    // Only want to update the query string if theres a value.
	    // If one is provided, great.
	    // Otherwise, lets try to find it from the current selection in the results.
	    if (optValue === undefined) {
	      var sections = this._state.get('sections');

	      var results = sections[this._sectionIndex].results;
	      optValue = results[this._resultIndex].shortValue;
	    }

	    var queryEl = DOM.query(this._parentContainer, this._inputEl);
	    queryEl.value = optValue;
	  };

	  _proto.handleTyping = function handleTyping(key, value, e) {
	    var ignoredKeys = [Keys.DOWN, Keys.UP, Keys.CTRL, Keys.ALT, Keys.SHIFT, Keys.LEFT, Keys.RIGHT, Keys.LEFT_OS_KEY, Keys.RIGHT_OS_KEY, Keys.ENTER, Keys.TAB, Keys.SELECT_KEY];

	    if (indexOf$5(ignoredKeys).call(ignoredKeys, key) > -1) {
	      return;
	    } // User escapes out of auto complete, so we reset it to the original input


	    if (key === Keys.ESCAPE) {
	      this.updateQuery(this._originalQuery);
	      this.close();
	      return;
	    } // Update the original value based on the user input


	    this._originalQuery = value;
	    this.reset();
	    this.autoComplete(value);
	  };

	  _proto.autoComplete = function autoComplete(input) {
	    if (this.isFilterSearch) {
	      this.core.autoCompleteFilter(input, {
	        namespace: this.name,
	        verticalKey: this._verticalKey,
	        searchParameters: this._searchParameters
	      });
	    } else if (this._verticalKey) {
	      this.core.autoCompleteVertical(input, this.name, this._verticalKey);
	    } else {
	      this.core.autoCompleteUniversal(input, this.name);
	    }
	  }
	  /**
	   * returns true if we have results in any section
	   * @returns boolean
	   */
	  ;

	  _proto.hasResults = function hasResults(data) {
	    if (!data) {
	      return false;
	    }

	    var sections = data['sections'];

	    if (!sections) {
	      return false;
	    }

	    for (var i = 0; i < sections.length; i++) {
	      var _data = sections[i];

	      if (!_data) {
	        continue;
	      }

	      var results = _data.results;

	      if (!results) {
	        continue;
	      }

	      if (results.length > 0) {
	        return true;
	      }
	    }

	    return false;
	  };

	  _proto.handleNavigateResults = function handleNavigateResults(key, e) {
	    var sections = this._state.get('sections');

	    if (sections === undefined || sections.length <= 0) {
	      return;
	    } // Tabbing out or enter should close the auto complete.


	    if (key === Keys.TAB) {
	      this.close();
	      return;
	    }

	    var results = sections[this._sectionIndex].results;

	    if (key === Keys.UP) {
	      e.preventDefault();

	      if (this._resultIndex <= 0) {
	        if (this._sectionIndex > 0) {
	          this._sectionIndex--;
	          this._resultIndex = sections[this._sectionIndex].results.length - 1;
	        } else {
	          this.updateQuery(this._originalQuery);
	          this.reset();
	          return;
	        }

	        this.updateQuery();
	        this.updateState();
	        return;
	      }

	      this._resultIndex--;
	      this.updateState();
	      this.updateQuery();
	      return;
	    }

	    if (key === Keys.DOWN) {
	      e.preventDefault();

	      if (this._resultIndex >= results.length - 1) {
	        if (this._sectionIndex < sections.length - 1) {
	          this._sectionIndex++;
	          this._resultIndex = 0;
	        }

	        this.updateQuery();
	        this.updateState();
	        return;
	      }

	      this._resultIndex++;
	      this.updateQuery();
	      this.updateState();
	    }
	  };

	  _proto.handleSubmitResult = function handleSubmitResult(key, value, e) {
	    var sections = this._state.get('sections');

	    if (sections === undefined || sections.length <= 0) {
	      if (this.isFilterSearch) {
	        this.autoComplete(value);
	      }

	      return;
	    } // submit the search on enter


	    if (key === Keys.ENTER) {
	      e.preventDefault();

	      if (this.isFilterSearch && this._resultIndex === -1) {
	        return;
	      }

	      var filter = '';

	      if (this._sectionIndex >= 0 && this._resultIndex >= 0) {
	        filter = stringify$2(filter$4(sections[this._sectionIndex].results[this._resultIndex]));
	      }

	      this.updateQuery(value);
	      this._originalQuery = value;

	      this._onSubmit(value, filter);

	      this.close();
	    } else {
	      this._onChange();
	    }
	  };

	  createClass(AutoCompleteComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'AutoComplete';
	    }
	  }]);

	  return AutoCompleteComponent;
	}(Component);

	var DEFAULT_CONFIG = {
	  suggestionHelpText: "Did you mean:"
	};
	/**
	 * SpellCheckComponent will support displaying suggestion, autocorrect and combined(maybe in the future)
	 * provided from spelling correction.
	 *
	 * @extends Component
	 */

	var SpellCheckComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(SpellCheckComponent, _Component);

	  function SpellCheckComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG, {}, config), systemConfig) || this;
	    _this.moduleId = StorageKeys.SPELL_CHECK;
	    return _this;
	  }

	  SpellCheckComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/spellcheck';
	  };

	  var _proto = SpellCheckComponent.prototype;

	  _proto.onCreate = function onCreate() {
	    this.core.persistentStorage["delete"]('skipSpellCheck', true);
	    this.core.persistentStorage["delete"](StorageKeys.QUERY_TRIGGER, true);
	  };

	  _proto.setState = function setState(data, val) {
	    return _Component.prototype.setState.call(this, _extends_1({}, data, {
	      shouldShow: data.correctedQuery !== undefined,
	      correctedQueryUrl: this._buildRedirectQueryUrl(data.correctedQuery, data.type),
	      helpText: this._getHelpText(data.type)
	    }, val));
	  };

	  _proto._buildRedirectQueryUrl = function _buildRedirectQueryUrl(query, type) {
	    if (query === undefined) {
	      return '';
	    }

	    var params = new SearchParams(window.location.search.substring(1));
	    params.set('query', query.value);
	    params.set('skipSpellCheck', true);
	    params.set(StorageKeys.QUERY_TRIGGER, type.toLowerCase());
	    return '?' + params.toString();
	  };

	  _proto._getHelpText = function _getHelpText(type) {
	    switch (type) {
	      case 'SUGGEST':
	        return this._config.suggestionHelpText;

	      default:
	        return '';
	    }
	  };

	  createClass(SpellCheckComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'SpellCheck';
	    }
	  }]);

	  return SpellCheckComponent;
	}(Component);

	var DEFAULT_CONFIG$1 = {
	  ipAccuracyHelpText: "based on your internet address",
	  deviceAccuracyHelpText: "based on your device",
	  updateLocationButtonText: "Update your location"
	};
	/**
	 * LocationBiasComponent will show the user where is used for location bias and allow user to
	 * improve accuracy with HTML5 geolocation.
	 *
	 * @extends Component
	 */

	var LocationBiasComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(LocationBiasComponent, _Component);

	  function LocationBiasComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG$1, {}, config), systemConfig) || this;
	    /**
	     * Recieve updates from storage based on this index
	     * @type {StorageKey}
	     */

	    _this.moduleId = StorageKeys.LOCATION_BIAS;
	    /**
	     * The optional vertical key for vertical search configuration
	     * If not provided, when location updated,
	     * a universal search will be triggered.
	     * @type {string}
	     */
	    // TODO: Remove config.verticalKey

	    _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey || null;
	    /**
	     * The element used for updating location
	     * Optionally provided.
	     * @type {string} CSS selector
	     */

	    _this._updateLocationEl = config.updateLocationEl || '.js-locationBias-update-location';
	    _this._locationDisplayName = '';
	    _this._accuracy = '';
	    _this._allowUpdate = true;
	    /**
	     * Options to pass to the geolocation api.
	     * @type {Object}
	     */

	    _this._geolocationOptions = objectSpread({
	      enableHighAccuracy: false,
	      timeout: 6000,
	      maximumAge: 300000
	    }, config.geolocationOptions);
	    /**
	     * Options for the geolocation timeout alert.
	     * @type {Object}
	     */

	    _this._geolocationTimeoutAlert = objectSpread({
	      enabled: false,
	      message: "We are unable to determine your location"
	    }, config.geolocationTimeoutAlert);
	    return _this;
	  }

	  LocationBiasComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'search/locationbias';
	  };

	  var _proto = LocationBiasComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    if (!this._allowUpdate) {
	      return;
	    }

	    this._disableLocationUpdateIfGeolocationDenied();

	    DOM.on(this._updateLocationEl, 'click', function (e) {
	      if ('geolocation' in navigator) {
	        navigator.geolocation.getCurrentPosition(function (position) {
	          _this2.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	            lat: position.coords.latitude,
	            lng: position.coords.longitude,
	            radius: position.coords.accuracy
	          });

	          _this2._doSearch();
	        }, function (err) {
	          return _this2._handleGeolocationError(err);
	        }, _this2._geolocationOptions);
	      } // TODO: Should we throw error or warning here if no geolocation?

	    });
	  };

	  _proto._handleGeolocationError = function _handleGeolocationError(err) {
	    if (err.code === 1) {
	      this._disableLocationUpdate();
	    }

	    var _this$_geolocationTim = this._geolocationTimeoutAlert,
	        enabled = _this$_geolocationTim.enabled,
	        message = _this$_geolocationTim.message;

	    if (enabled) {
	      window.alert(message);
	    }
	  };

	  _proto.setState = function setState(data, val) {
	    this._locationDisplayName = data.locationDisplayName;
	    this._accuracy = data.accuracy;
	    return _Component.prototype.setState.call(this, _extends_1({}, data, {
	      locationDisplayName: this._getLocationDisplayName(data),
	      accuracyText: this._getAccuracyHelpText(data.accuracy),
	      isPreciseLocation: data.accuracy === 'DEVICE' && this._allowUpdate,
	      isUnknownLocation: data.accuracy === 'UNKNOWN',
	      shouldShow: data.accuracy !== undefined && data.accuracy !== null,
	      allowUpdate: this._allowUpdate
	    }, val));
	  };

	  _proto._getLocationDisplayName = function _getLocationDisplayName(data) {
	    if (data.accuracy === 'UNKNOWN') {
	      return "Unknown Location";
	    }

	    return data.locationDisplayName;
	  };

	  _proto._getAccuracyHelpText = function _getAccuracyHelpText(accuracy) {
	    switch (accuracy) {
	      case 'IP':
	        return this._config.ipAccuracyHelpText;

	      case 'DEVICE':
	        return this._config.deviceAccuracyHelpText;

	      default:
	        return '';
	    }
	  };

	  _proto._doSearch = function _doSearch() {
	    if (this._verticalKey) {
	      this.core.verticalSearch(this._config.verticalKey, {
	        setQueryParams: true,
	        useFacets: true
	      });
	    } else {
	      var query = this.core.globalStorage.getState(StorageKeys.QUERY);
	      this.core.search(query);
	    }
	  };

	  _proto._disableLocationUpdateIfGeolocationDenied = function _disableLocationUpdateIfGeolocationDenied() {
	    var _this3 = this;

	    if ('permissions' in navigator) {
	      navigator.permissions.query({
	        name: 'geolocation'
	      }).then(function (result) {
	        if (result.state === 'denied') {
	          _this3._disableLocationUpdate();
	        }
	      });
	    }
	  };

	  _proto._disableLocationUpdate = function _disableLocationUpdate() {
	    this.core.globalStorage["delete"](StorageKeys.GEOLOCATION);
	    this._allowUpdate = false;
	    this.setState({
	      locationDisplayName: this._locationDisplayName,
	      accuracy: this._accuracy
	    });
	  };

	  createClass(LocationBiasComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'LocationBias';
	    }
	  }]);

	  return LocationBiasComponent;
	}(Component);

	var FilterBoxConfig =
	/*#__PURE__*/
	function () {
	  function FilterBoxConfig(config) {
	    var _context;

	    /**
	     * The title to display above the controls
	     * @type {string}
	     */
	    this.title = config.title || "Filters";
	    /**
	     * If true, display the number of results next to each facet
	     * @type {boolean}
	     */

	    this.showCount = config.showCount === undefined ? true : config.showCount;
	    /**
	     * If true, trigger a search on each change to a filter
	     * @type {boolean}
	     */

	    this.searchOnChange = config.searchOnChange || false;
	    /**
	     * If true, show a button to reset for each facet group
	     * @type {boolean}
	     */

	    this.resetFilter = config.resetFilter || false;
	    /**
	     * The label to show for the reset button
	     * @type {string}
	     */

	    this.resetFilterLabel = config.resetFilterLabel || "reset";
	    /**
	     * If true, show a "reset all" button to reset all facets
	     * @type {boolean}
	     */

	    this.resetFilters = config.resetFilters === undefined ? !config.searchOnChange : config.resetFilters;
	    /**
	     * The label to show for the "reset all" button
	     * @type {string}
	     */

	    this.resetFiltersLabel = config.resetFiltersLabel || "reset all";
	    /**
	     * The max number of facets to show before displaying "show more"/"show less"
	     * @type {number}
	     */

	    this.showMoreLimit = config.showMoreLimit || 5;
	    /**
	     * The label to show for displaying more facets
	     * @type {string}
	     */

	    this.showMoreLabel = config.showMoreLabel || "show more";
	    /**
	     * The label to show for displaying less facets
	     * @type {string}
	     */

	    this.showLessLabel = config.showLessLabel || "show less";
	    /**
	     * If true, enable hiding excess facets in each group with a "show more"/"show less" button
	     * @type {boolean}
	     */

	    this.showMore = config.showMore === undefined ? true : config.showMore;
	    /**
	     * If true, allow expanding and collapsing each group of facets
	     * @type {boolean}
	     */

	    this.expand = config.expand === undefined ? true : config.expand;
	    /**
	     * If true, display the number of currently applied filters when collapsed
	     * @type {boolean}
	     */

	    this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
	    /**
	     * Text to display on the apply button
	     * @type {string}
	     */

	    this.applyLabel = config.applyLabel || "apply";
	    /**
	     * The selector of the apply button
	     * @type {string}
	     */

	    this.applyButtonSelector = config.applyButtonSelector || '.js-yext-filterbox-apply';
	    /**
	     * The list of filters to display and control, ignoring empty sections
	     * @type {object[]}
	     */

	    this.filterConfigs = filter$4(_context = config.filters).call(_context, function (f) {
	      return f.options.length;
	    });
	    /**
	     * Whether or not this filterbox contains facets. This affects the
	     * the way the filters are used in the search
	     * @type {boolean}
	     */

	    this.isDynamic = config.isDynamic || false;
	    this.validate();
	  }

	  var _proto = FilterBoxConfig.prototype;

	  _proto.validate = function validate() {};

	  return FilterBoxConfig;
	}();
	/**
	 * Renders a set of filters, and searches with them when applied.
	 * Multiple FilterBox components will AND together but will not share state.
	 * @extends Component
	 */


	var FilterBoxComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FilterBoxComponent, _Component);

	  function FilterBoxComponent(config, systemConfig) {
	    var _context2;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    _this.config = new FilterBoxConfig(config);

	    if (!config.filters || !(config.filters instanceof Array)) {
	      throw new AnswersComponentError('FilterBox requires filters to be provided as an array', 'FilterBox');
	    }
	    /**
	     * The vertical key for the search
	     * @type {string}
	     * @private
	     */


	    _this._verticalKey = config.verticalKey || null;
	    /**
	     * The components created for each filter config
	     * @type {Component[]}
	     * @private
	     */

	    _this._filterComponents = [];
	    /**
	     * The current state of the filter components in the box
	     * @type {Array<FilterNode>}
	     * @private
	     */

	    _this._filterNodes = [];

	    forEach$4(_context2 = _this.config.filterConfigs).call(_context2, function (config) {
	      var hideCount = config.showCount === undefined ? !_this.config.showCount : !config.showCount;

	      if (hideCount) {
	        var _context3;

	        forEach$4(_context3 = config.options).call(_context3, function (option) {
	          option.countLabel = null;
	        });
	      }
	    });

	    return _this;
	  }

	  FilterBoxComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'filters/filterbox';
	  };

	  var _proto2 = FilterBoxComponent.prototype;

	  _proto2.setState = function setState(data) {
	    _Component.prototype.setState.call(this, _extends_1({}, data, this.config, {
	      showReset: this.config.resetFilters,
	      resetLabel: this.config.resetFiltersLabel,
	      showApplyButton: !this.config.searchOnChange
	    }));
	  };

	  _proto2.onMount = function onMount() {
	    var _this2 = this;

	    if (this._filterComponents.length) {
	      var _context4;

	      forEach$4(_context4 = this._filterComponents).call(_context4, function (c) {
	        return c.remove();
	      });

	      this._filterComponents = [];
	      this._filterNodes = [];
	    } // Initialize filters from configs


	    var _loop = function _loop(i) {
	      var config = _this2.config.filterConfigs[i];

	      var component = _this2.componentManager.create(config.type, objectSpread({}, _this2.config, {
	        parentContainer: _this2._container,
	        name: _this2.name + ".filter" + i,
	        storeOnChange: false,
	        container: ".js-yext-filterbox-filter" + i,
	        showReset: _this2.config.resetFilter,
	        resetLabel: _this2.config.resetFilterLabel,
	        isDynamic: _this2.config.isDynamic
	      }, config, {
	        showExpand: config.showExpand === undefined ? _this2.config.expand : config.showExpand,
	        onChange: function onChange(filterNode, alwaysSaveFilterNodes, blockSearchOnChange) {
	          var _saveFilterNodes = _this2.config.searchOnChange || alwaysSaveFilterNodes;

	          var _searchOnChange = _this2.config.searchOnChange && !blockSearchOnChange;

	          _this2.onFilterNodeChange(i, filterNode, _saveFilterNodes, _searchOnChange);

	          config.onChange && config.onChange();
	        }
	      }));

	      if (_this2.config.isDynamic && typeof component.floatSelected === 'function') {
	        component.floatSelected();
	      }

	      component.mount();

	      _this2._filterComponents.push(component);

	      _this2._filterNodes[i] = component.getFilterNode();
	    };

	    for (var i = 0; i < this.config.filterConfigs.length; i++) {
	      _loop(i);
	    }

	    this._saveFilterNodesToStorage(this.config.isDynamic); // Initialize apply button


	    if (!this.config.searchOnChange) {
	      var button = DOM.query(this._container, this.config.applyButtonSelector);

	      if (button) {
	        DOM.on(button, 'click', function () {
	          _this2._saveFilterNodesToStorage(false);

	          _this2._search();
	        });
	      }
	    } // Initialize reset button


	    var resetEl = DOM.query(this._container, '.js-yxt-FilterBox-reset');

	    if (resetEl) {
	      var _context5;

	      DOM.on(resetEl, 'click', bind$5(_context5 = this.resetFilters).call(_context5, this));
	    }
	  };

	  _proto2._getValidFilterNodes = function _getValidFilterNodes() {
	    var _context6;

	    return filter$4(_context6 = this._filterNodes).call(_context6, function (fn) {
	      return fn.getFilter().getFilterKey();
	    });
	  };

	  _proto2.resetFilters = function resetFilters() {
	    var _context7;

	    forEach$4(_context7 = this._filterComponents).call(_context7, function (filter) {
	      return filter.clearOptions();
	    });
	  }
	  /**
	   * Handle changes to child filter components
	   * @param {number} index The index of the changed filter
	   * @param {FilterNode} filterNode The new filter node
	   * @param {boolean} saveFilterNodes Whether to save filternodes to storage
	   * @param {boolean} searchOnChange Whether to conduct a search
	   */
	  ;

	  _proto2.onFilterNodeChange = function onFilterNodeChange(index, filterNode, saveFilterNodes, searchOnChange) {
	    this._filterNodes[index] = filterNode;

	    if (saveFilterNodes || searchOnChange) {
	      this._saveFilterNodesToStorage(false);
	    }

	    if (searchOnChange) {
	      this._search();
	    }
	  }
	  /**
	   * Remove all filter components along with this component
	   */
	  ;

	  _proto2.remove = function remove() {
	    var _context8;

	    forEach$4(_context8 = this._filterComponents).call(_context8, function (c) {
	      return c.remove();
	    });

	    _Component.prototype.remove.call(this);
	  }
	  /**
	   * Save current filters to storage to be used in the next search
	   * @private
	   * @param {boolean} replaceHistory Whether we replace or push a new history
	   *                                 state for the associated changes
	   */
	  ;

	  _proto2._saveFilterNodesToStorage = function _saveFilterNodesToStorage(replaceHistory) {
	    if (this.config.isDynamic) {
	      var _context9, _context10;

	      var availableFieldIds = map$2(_context9 = this.config.filterConfigs).call(_context9, function (config) {
	        return config.fieldId;
	      });

	      this.core.setFacetFilterNodes(availableFieldIds, this._getValidFilterNodes());

	      forEach$4(_context10 = this._filterComponents).call(_context10, function (fc) {
	        return fc.saveSelectedToPersistentStorage(replaceHistory);
	      });
	    } else {
	      var _context11;

	      forEach$4(_context11 = this._filterComponents).call(_context11, function (fc) {
	        return fc.apply(replaceHistory);
	      });
	    }
	  }
	  /**
	   * Trigger a search with all filters in storage
	   */
	  ;

	  _proto2._search = function _search() {
	    this.core.verticalSearch(this._config.verticalKey, {
	      setQueryParams: true,
	      resetPagination: true,
	      useFacets: true
	    });
	  };

	  createClass(FilterBoxComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.FILTER_BOX;
	    }
	  }]);

	  return FilterBoxComponent;
	}(Component);

	var $values = objectToArray.values;

	// `Object.values` method
	// https://tc39.github.io/ecma262/#sec-object.values
	_export({ target: 'Object', stat: true }, {
	  values: function values(O) {
	    return $values(O);
	  }
	});

	var values = path.Object.values;

	var values$1 = values;

	var values$2 = values$1;

	var jsLevenshtein = (function()
	{
	  function _min(d0, d1, d2, bx, ay)
	  {
	    return d0 < d1 || d2 < d1
	        ? d0 > d2
	            ? d2 + 1
	            : d0 + 1
	        : bx === ay
	            ? d1
	            : d1 + 1;
	  }

	  return function(a, b)
	  {
	    if (a === b) {
	      return 0;
	    }

	    if (a.length > b.length) {
	      var tmp = a;
	      a = b;
	      b = tmp;
	    }

	    var la = a.length;
	    var lb = b.length;

	    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {
	      la--;
	      lb--;
	    }

	    var offset = 0;

	    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {
	      offset++;
	    }

	    la -= offset;
	    lb -= offset;

	    if (la === 0 || lb < 3) {
	      return lb;
	    }

	    var x = 0;
	    var y;
	    var d0;
	    var d1;
	    var d2;
	    var d3;
	    var dd;
	    var dy;
	    var ay;
	    var bx0;
	    var bx1;
	    var bx2;
	    var bx3;

	    var vector = [];

	    for (y = 0; y < la; y++) {
	      vector.push(y + 1);
	      vector.push(a.charCodeAt(offset + y));
	    }

	    var len = vector.length - 1;

	    for (; x < lb - 3;) {
	      bx0 = b.charCodeAt(offset + (d0 = x));
	      bx1 = b.charCodeAt(offset + (d1 = x + 1));
	      bx2 = b.charCodeAt(offset + (d2 = x + 2));
	      bx3 = b.charCodeAt(offset + (d3 = x + 3));
	      dd = (x += 4);
	      for (y = 0; y < len; y += 2) {
	        dy = vector[y];
	        ay = vector[y + 1];
	        d0 = _min(dy, d0, d1, bx0, ay);
	        d1 = _min(d0, d1, d2, bx1, ay);
	        d2 = _min(d1, d2, d3, bx2, ay);
	        dd = _min(d2, d3, dd, bx3, ay);
	        vector[y] = dd;
	        d3 = d2;
	        d2 = d1;
	        d1 = d0;
	        d0 = dy;
	      }
	    }

	    for (; x < lb;) {
	      bx0 = b.charCodeAt(offset + (d0 = x));
	      dd = ++x;
	      for (y = 0; y < len; y += 2) {
	        dy = vector[y];
	        vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
	        d0 = dy;
	      }
	    }

	    return dd;
	  };
	})();

	/**
	 * Groups an array into an object using a given key and value function, and an initial object
	 * to add to. By default the key and value functions will not perform any transformations
	 * on the array elements.
	 * @param {Array<any>} arr array to be grouped
	 * @param {Function} keyFunc function that evaluates what key to give an array element.
	 * @param {Function} valueFunc function that evaluates what value to give an array element.
	 * @param {Object} intitial the initial object to add to, defaulting to {}
	 * @returns {Object}
	 */
	function groupArray(arr, keyFunc, valueFunc, initial) {
	  keyFunc = keyFunc || function (key) {
	    return key;
	  };

	  valueFunc = valueFunc || function (value) {
	    return value;
	  };

	  return reduce$2(arr).call(arr, function (groups, element, idx) {
	    var key = keyFunc(element, idx);
	    var value = valueFunc(element, idx);

	    if (!groups[key]) {
	      groups[key] = [value];
	    } else {
	      groups[key].push(value);
	    }

	    return groups;
	  }, initial || {});
	}

	/**
	 * The currently supported controls
	 * @type {string[]}
	 */

	var SUPPORTED_CONTROLS = ['singleoption', 'multioption'];
	/**
	 * The currently supported option types.
	 */

	var OptionTypes = {
	  RADIUS_FILTER: 'RADIUS_FILTER',
	  STATIC_FILTER: 'STATIC_FILTER'
	};

	var FilterOptionsConfig =
	/*#__PURE__*/
	function () {
	  function FilterOptionsConfig(config) {
	    var _context, _context2;

	    /**
	     * The type of control to display
	     * @type {string}
	     */
	    this.control = config.control;
	    /**
	     * The type of filtering to apply to the options.
	     * @type {string}
	     */

	    this.optionType = config.optionType || OptionTypes.STATIC_FILTER;
	    /**
	     * The list of filter options to display with checked status as
	     * initially specified in the user configuration
	     * @type {object[]}
	     */

	    this.initialOptions = map$2(_context = config.options).call(_context, function (o) {
	      return objectSpread({}, o);
	    });
	    /**
	     * The list of filter options to display.
	     * @type {object[]}
	     */

	    this.options = map$2(_context2 = config.options).call(_context2, function (o) {
	      return objectSpread({}, o);
	    });
	    /**
	     * The label to be used in the legend
	     * @type {string}
	     */

	    this.label = config.label || "Filters";
	    /**
	     * The callback function to call when changed
	     * @type {function}
	     */

	    this.onChange = config.onChange || function () {};
	    /**
	     * If true, stores the filter to global and persistent storage on each change
	     * @type {boolean}
	     */


	    this.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
	    /**
	     * If true, show a button to reset the current filter selection
	     * @type {boolean}
	     */

	    this.showReset = config.showReset && this.options.length > 0;
	    /**
	     * Whether this FilterOptions is part of a dynamic FilterBox component (i.e. is
	     * part of a FacetsComponent). Used to correctly set the {@link FilterType} of
	     * the created {@link FilterNode}.
	     * @type {boolean}
	     */

	    this.isDynamic = config.isDynamic;
	    /**
	     * The label to show for the reset button
	     * @type {string}
	     */

	    this.resetLabel = config.resetLabel || "reset";
	    /**
	     * The max number of facets to show before displaying "show more"/"show less"
	     * @type {number}
	     */

	    this.showMoreLimit = config.showMoreLimit || 5;
	    /**
	     * The label to show for displaying more facets
	     * @type {string}
	     */

	    this.showMoreLabel = config.showMoreLabel || "show more";
	    /**
	     * The label to show for displaying less facets
	     * @type {string}
	     */

	    this.showLessLabel = config.showLessLabel || "show less";
	    /**
	     * If true, enable hiding excess facets with a "show more"/"show less" button
	     * @type {boolean}
	     */

	    this.showMore = config.showMore === undefined ? true : config.showMore;
	    this.showMore = this.showMore && this.options.length > this.showMoreLimit;
	    /**
	     * If true, allow expanding and collapsing the group of facets
	     * @type {boolean}
	     */

	    this.showExpand = config.showExpand === undefined ? true : config.showExpand;
	    /**
	     * If true, display the number of currently applied filters when collapsed
	     * @type {boolean}
	     */

	    this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
	    /**
	     * The selector used for options in the template
	     * @type {string}
	     */

	    this.optionSelector = config.optionSelector || '.js-yext-filter-option';
	    /**
	     * The placeholder text used for the filter option search input
	     * @type {string}
	     */

	    this.placeholderText = config.placeholderText || "Search here...";
	    /**
	     * If true, display the filter option search input
	     * @type {boolean}
	     */

	    this.searchable = config.searchable || false;
	    /**
	     * The form label text for the search input
	     * @type {boolean}
	     */

	    this.searchLabelText = config.searchLabelText || "Search for a filter option";
	    this.validate();

	    if (typeof config.previousOptions === 'string') {
	      try {
	        config.previousOptions = JSON.parse(config.previousOptions);
	      } catch (e) {
	        config.previousOptions = [];
	      }
	    } // previousOptions will be null if there were no previousOptions in persistentStorage


	    var previousOptions = config.previousOptions;
	    this.options = this.getSelectedOptions(this.options, previousOptions);
	  }
	  /**
	   * Returns a list of options with `selected` determined by initialOptions and
	   * optionsOverrides. optionsOverrides take precedence over initialOptions. If the
	   * control is singleoption and `selected` appears more than once in either
	   * initialOptions or optionsOverrides then the first instance is used.
	   * @param {Array<Object>} initialOptions Options from the component configuration
	   * @param {Array<string>} optionsOverrides Options as they are formatted for persistentStorage
	   * @returns {Array<Object>} The options in the same format as initialOptions with updated
	   *                          selected values
	   */


	  var _proto = FilterOptionsConfig.prototype;

	  _proto.getSelectedOptions = function getSelectedOptions(initialOptions, optionsOverrides) {
	    var options = map$2(initialOptions).call(initialOptions, function (o) {
	      return objectSpread({}, o);
	    });

	    if (optionsOverrides && this.control === 'singleoption') {
	      var hasSeenSelectedOption = false;
	      return map$2(options).call(options, function (o) {
	        if (includes$4(optionsOverrides).call(optionsOverrides, o.label) && !hasSeenSelectedOption) {
	          hasSeenSelectedOption = true;
	          return objectSpread({}, o, {
	            selected: true
	          });
	        }

	        return objectSpread({}, o, {
	          selected: false
	        });
	      });
	    } else if (optionsOverrides && this.control === 'multioption') {
	      return map$2(options).call(options, function (o) {
	        return objectSpread({}, o, {
	          selected: includes$4(optionsOverrides).call(optionsOverrides, o.label)
	        });
	      });
	    } else if (this.control === 'singleoption') {
	      var _hasSeenSelectedOption = false;
	      return map$2(options).call(options, function (o) {
	        if (_hasSeenSelectedOption) {
	          return objectSpread({}, o, {
	            selected: false
	          });
	        } else if (o.selected) {
	          _hasSeenSelectedOption = true;
	        }

	        return objectSpread({}, o);
	      });
	    }

	    return options;
	  };

	  _proto.getInitialSelectedCount = function getInitialSelectedCount() {
	    var _context3;

	    return reduce$2(_context3 = this.options).call(_context3, function (numSelected, option) {
	      return option.selected ? numSelected + 1 : numSelected;
	    }, 0);
	  };

	  _proto.validate = function validate() {
	    if (!this.control || !includes$4(SUPPORTED_CONTROLS).call(SUPPORTED_CONTROLS, this.control)) {
	      throw new AnswersComponentError('FilterOptions requires a valid "control" to be provided', 'FilterOptions');
	    }

	    if (!(this.optionType in OptionTypes)) {
	      var possibleTypes = values$2(OptionTypes).join(', ');

	      throw new AnswersComponentError("Invalid optionType " + this.optionType + " passed to FilterOptions. Expected one of " + possibleTypes, 'FilterOptions');
	    }

	    if (this.optionType === OptionTypes.RADIUS_FILTER && this.control !== 'singleoption') {
	      throw new AnswersComponentError("FilterOptions of optionType " + OptionTypes.RADIUS_FILTER + " requires control \"singleoption\"", 'FilterOptions');
	    }

	    if (!this.options) {
	      throw new AnswersComponentError('FilterOptions component requires options to be provided', 'FilterOptions');
	    }
	  };

	  return FilterOptionsConfig;
	}();
	/**
	 * Renders a set of options, each one representing a filter in a search.
	 */


	var FilterOptionsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FilterOptionsComponent, _Component);

	  function FilterOptionsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;

	    var previousOptions = _this.core.globalStorage.getState(_this.name);

	    _this.core.globalStorage["delete"](_this.name);
	    /**
	     * The component config
	     * @type {FilterOptionsConfig}
	     */


	    _this.config = new FilterOptionsConfig(objectSpread({
	      previousOptions: previousOptions
	    }, config));

	    var selectedCount = _this.config.getInitialSelectedCount();
	    /**
	     * True if the option list is expanded and visible
	     * @type {boolean}
	     */


	    _this.expanded = _this.config.showExpand ? selectedCount > 0 : true;
	    /**
	     * Whether the current is currently showing more or less. If true, is currently "show more".
	     * Only used if config.showMore is true.
	     * @type {boolean}
	     */

	    _this.showMoreState = _this.config.showMore;

	    if (_this.config.storeOnChange) {
	      _this.apply(_this.config.isDynamic);
	    }

	    if (!_this.config.isDynamic) {
	      // Update listener for when navigating backwards in history. When we back nav, the
	      // globalStorage is updated with the previous URL filter values. We should not update
	      // this.name otherwise, instead opt for this.core.setStaticFilterNodes()
	      _this.core.globalStorage.on('update', _this.name, function (data) {
	        try {
	          var newOptions = JSON.parse(data);
	          _this.config.options = _this.config.getSelectedOptions(_this.config.initialOptions, newOptions);

	          _this.updateListeners();

	          _this.setState();
	        } catch (e) {
	          console.warn("Filter option " + data + " could not be parsed");
	        }
	      });
	    }

	    return _this;
	  }

	  /**
	   * The template to render, based on the control
	   * @returns {string}
	   * @override
	   */
	  FilterOptionsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return "controls/filteroptions";
	  };

	  var _proto2 = FilterOptionsComponent.prototype;

	  _proto2.setState = function setState(data) {
	    var selectedCount = this._getSelectedCount();

	    _Component.prototype.setState.call(this, _extends_1({}, data, objectSpread({
	      name: this.name.toLowerCase()
	    }, this.config, {
	      showMoreState: this.showMoreState,
	      displayReset: this.config.showReset && selectedCount > 0,
	      expanded: this.expanded,
	      selectedCount: selectedCount,
	      isSingleOption: this.config.control === 'singleoption'
	    })));
	  };

	  _proto2.onMount = function onMount() {
	    var _this2 = this;

	    DOM.delegate(DOM.query(this._container, ".yxt-FilterOptions-options"), this.config.optionSelector, 'click', function (event) {
	      var selectedCountEl = DOM.query(_this2._container, '.js-yxt-FilterOptions-selectedCount');

	      if (selectedCountEl) {
	        selectedCountEl.innerText = _this2._getSelectedCount();
	      }

	      _this2._updateOption(_parseInt$2(event.target.dataset.index), event.target.checked);
	    }); // Initialize reset element if present

	    var resetEl = DOM.query(this._container, '.js-yxt-FilterOptions-reset');

	    if (resetEl) {
	      var _context4;

	      DOM.on(resetEl, 'click', bind$5(_context4 = this.clearOptions).call(_context4, this));
	    } // show more/less button


	    if (this.config.showMore) {
	      var showLessEl = DOM.query(this._container, '.js-yxt-FilterOptions-showLess');
	      var showMoreEl = DOM.query(this._container, '.js-yxt-FilterOptions-showMore');
	      var optionsOverLimitEls = DOM.queryAll(this._container, '.js-yxt-FilterOptions-aboveShowMoreLimit');
	      DOM.on(showLessEl, 'click', function () {
	        _this2.showMoreState = true;
	        showLessEl.classList.add('hidden');
	        showMoreEl.classList.remove('hidden');

	        for (var _iterator = optionsOverLimitEls, _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var optionEl = _ref;
	          optionEl.classList.add('hidden');
	        }
	      });
	      DOM.on(showMoreEl, 'click', function () {
	        _this2.showMoreState = false;
	        showLessEl.classList.remove('hidden');
	        showMoreEl.classList.add('hidden');

	        for (var _iterator2 = optionsOverLimitEls, _isArray2 = isArray$3(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : getIterator$1(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var optionEl = _ref2;
	          optionEl.classList.remove('hidden');
	        }
	      });
	    } // searchable option list


	    if (this.config.searchable) {
	      var clearSearchEl = DOM.query(this._container, '.js-yxt-FilterOptions-clearSearch');
	      var searchInputEl = DOM.query(this._container, '.js-yxt-FilterOptions-filter');
	      var filterOptionEls = DOM.queryAll(this._container, '.js-yxt-FilterOptions-option');
	      var filterContainerEl = DOM.query(this._container, '.js-yxt-FilterOptions-container'); // On clearSearchEl click, clear search input

	      if (clearSearchEl && searchInputEl) {
	        DOM.on(clearSearchEl, 'click', function (event) {
	          searchInputEl.value = '';
	          DOM.trigger(searchInputEl, 'input');
	          searchInputEl.focus();
	        });
	      }

	      DOM.on(searchInputEl, 'input', function (event) {
	        var filter = event.target.value;

	        if (!filter) {
	          filterContainerEl.classList.remove('yxt-FilterOptions-container--searching');
	          clearSearchEl.classList.add('js-hidden');
	        } else {
	          filterContainerEl.classList.add('yxt-FilterOptions-container--searching');
	          clearSearchEl.classList.remove('js-hidden');
	        }

	        for (var _iterator3 = filterOptionEls, _isArray3 = isArray$3(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : getIterator$1(_iterator3);;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var filterOption = _ref3;
	          var labelEl = DOM.query(filterOption, '.js-yxt-FilterOptions-optionLabel--name');
	          var labelText = labelEl.textContent || labelEl.innerText || '';
	          labelText = trim$3(labelText).call(labelText);

	          if (!filter) {
	            filterOption.classList.remove('hiddenSearch');
	            filterOption.classList.remove('displaySearch');
	            labelEl.innerHTML = labelText;
	          } else {
	            var matchedSubstring = _this2._getMatchedSubstring(labelText.toLowerCase(), filter.toLowerCase());

	            if (matchedSubstring) {
	              filterOption.classList.add('displaySearch');
	              filterOption.classList.remove('hiddenSearch');
	              labelEl.innerHTML = new HighlightedValue({
	                value: labelText,
	                matchedSubstrings: [matchedSubstring]
	              }).get();
	            } else {
	              filterOption.classList.add('hiddenSearch');
	              filterOption.classList.remove('displaySearch');
	              labelEl.innerHTML = labelText;
	            }
	          }
	        }
	      });
	    } // expand button


	    if (this.config.showExpand) {
	      var legend = DOM.query(this._container, '.yxt-FilterOptions-clickableLegend');
	      DOM.on(legend, 'mousedown', function (click) {
	        if (click.button === 0) {
	          _this2.expanded = !_this2.expanded;

	          _this2.setState();
	        }
	      });
	      DOM.on(legend, 'keydown', function (key) {
	        if (key.key === ' ' || key.key === 'Enter') {
	          key.preventDefault();
	          _this2.expanded = !_this2.expanded;

	          _this2.setState();
	        }
	      });
	    }
	  }
	  /**
	   * Returns the count of currently selected options
	   * @returns {number}
	   * @private
	   */
	  ;

	  _proto2._getSelectedCount = function _getSelectedCount() {
	    var _context5;

	    return filter$4(_context5 = this.config.options).call(_context5, function (o) {
	      return o.selected;
	    }).length;
	  }
	  /**
	   * Toggles the display of the reset element based on the selected count. If there are selected
	   * options, show the reset element, if not, hide it.
	   *
	   * Note: this will not have any effect if the reset element isn't in the DOM.
	   *
	   * @returns {number}
	   * @private
	   */
	  ;

	  _proto2._toggleReset = function _toggleReset() {
	    var resetEl = DOM.query(this._container, '.js-yxt-FilterOptions-reset');

	    var selectedCount = this._getSelectedCount();

	    if (selectedCount > 0) {
	      resetEl.classList.remove('js-hidden');
	    } else if (!resetEl.classList.contains('js-hidden')) {
	      resetEl.classList.add('js-hidden');
	    }
	  }
	  /**
	   * Finds the length and offset of the substring where (string) option and
	   * (string) filter "match".
	   *
	   * "Match" is defined as an exact text match, or -- if the length of filter
	   * is greater than the `minFilterSizeForLevenshtein` -- a "match" can occur if
	   * any "n length" substring of option (where "n length" is the length of filter)
	   * is within the `maxLevenshteinDistance` levenshtein distance of the filter.
	   *
	   * Note: this is case sensitive.
	   *
	   * @returns {Object}
	   * @private
	   */
	  ;

	  _proto2._getMatchedSubstring = function _getMatchedSubstring(option, filter) {
	    var offset = this._getOffset(option, filter);

	    if (offset > -1) {
	      return {
	        length: filter.length,
	        offset: offset
	      };
	    }

	    var minFilterSizeForLevenshtein = 3;
	    var maxLevenshteinDistance = 1;

	    if (filter.length > minFilterSizeForLevenshtein) {
	      // Break option into X filter.length size substrings
	      var substrings = [];

	      for (var start = 0; start <= option.length - filter.length; start++) {
	        substrings.push(option.substr(start, filter.length));
	      } // Find the substring that is the closest in levenshtein distance to filter


	      var minLevDist = filter.length;
	      var minLevSubstring = filter;

	      for (var _i4 = 0, _substrings = substrings; _i4 < _substrings.length; _i4++) {
	        var substring = _substrings[_i4];

	        var levDist = this._calcLevenshteinDistance(substring, filter);

	        if (levDist < minLevDist) {
	          minLevDist = levDist;
	          minLevSubstring = substring;
	        }
	      } // If the min levenshtein distance is below the max, count it as a match


	      if (minLevDist <= maxLevenshteinDistance) {
	        offset = this._getOffset(option, minLevSubstring);

	        if (offset > -1) {
	          return {
	            length: filter.length,
	            offset: offset
	          };
	        }
	      }
	    }
	  }
	  /**
	   * Calculate the levenshtein distance for two strings
	   * @returns {number}
	   * @private
	   */
	  ;

	  _proto2._calcLevenshteinDistance = function _calcLevenshteinDistance(a, b) {
	    return jsLevenshtein(a, b);
	  }
	  /**
	   * Returns the starting index of first occurance of the (string) filter in
	   * the (string) option, or -1 if not present
	   * @returns {number}
	   * @private
	   */
	  ;

	  _proto2._getOffset = function _getOffset(option, filter) {
	    return option && filter ? indexOf$5(option).call(option, filter) : -1;
	  }
	  /**
	   * Clears all selected options.
	   */
	  ;

	  _proto2.clearOptions = function clearOptions() {
	    var _context6;

	    this.config.options = map$2(_context6 = this.config.options).call(_context6, function (o) {
	      return _extends_1({}, o, {
	        selected: false
	      });
	    });
	    this.updateListeners();
	    this.setState();
	  }
	  /**
	   * Call the config.onChange callback with the FilterNode corresponding to the
	   * component state.
	   * @param {boolean} alwaysSaveFilterNodes
	   * @param {boolean} blockSearchOnChange
	   */
	  ;

	  _proto2.updateListeners = function updateListeners(alwaysSaveFilterNodes, blockSearchOnChange) {
	    var filterNode = this.getFilterNode();

	    if (this.config.storeOnChange) {
	      this.apply(false);
	    }

	    this.config.onChange(filterNode, alwaysSaveFilterNodes, blockSearchOnChange);
	  };

	  _proto2._updateOption = function _updateOption(index, selected) {
	    if (this.config.control === 'singleoption') {
	      var _context7;

	      this.config.options = map$2(_context7 = this.config.options).call(_context7, function (o) {
	        return _extends_1({}, o, {
	          selected: false
	        });
	      });
	    }

	    this.config.options[index] = _extends_1({}, this.config.options[index], {
	      selected: selected
	    });

	    if (this.config.showReset) {
	      this._toggleReset();
	    }

	    this.updateListeners();
	  }
	  /**
	   * Apply filter changes
	   * @param {boolean} replaceHistory Whether we replace or push a new history
	   *                                 state for the associated changes
	   */
	  ;

	  _proto2.apply = function apply(replaceHistory) {
	    switch (this.config.optionType) {
	      case OptionTypes.RADIUS_FILTER:
	        this.core.setLocationRadiusFilterNode(this.getLocationRadiusFilterNode());
	        break;

	      case OptionTypes.STATIC_FILTER:
	        this.core.setStaticFilterNodes(this.name, this.getFilterNode());
	        break;

	      default:
	        throw new AnswersComponentError("Unknown optionType " + this.config.optionType, 'FilterOptions');
	    }

	    this.saveSelectedToPersistentStorage(replaceHistory);
	  };

	  _proto2.floatSelected = function floatSelected() {
	    var _context8;

	    this.config.options = sort$2(_context8 = this.config.options).call(_context8, function (a, b) {
	      return b.selected - a.selected;
	    });
	  };

	  _proto2._buildFilter = function _buildFilter(option) {
	    return filter$4(option) ? filter$4(option) : Filter.equal(option.field, option.value);
	  };

	  _proto2._getFilterType = function _getFilterType() {
	    if (this.config.isDynamic) {
	      return FilterType.FACET;
	    }

	    return this.config.optionType === 'RADIUS_FILTER' ? FilterType.RADIUS : FilterType.STATIC;
	  };

	  _proto2._buildFilterMetadata = function _buildFilterMetadata(option) {
	    return new FilterMetadata({
	      fieldName: this.config.label,
	      displayValue: option.label,
	      filterType: this._getFilterType()
	    });
	  }
	  /**
	   * Return the FilterNode when this is a RADIUS_FILTER.
	   * @type {FilterNode}
	   */
	  ;

	  _proto2.getLocationRadiusFilterNode = function getLocationRadiusFilterNode() {
	    var _context9,
	        _this3 = this;

	    var selectedOption = find$3(_context9 = this.config.options).call(_context9, function (o) {
	      return o.selected;
	    });

	    if (!selectedOption) {
	      return FilterNodeFactory.from();
	    }

	    var filterNode = {
	      metadata: this._buildFilterMetadata(selectedOption),
	      filter: {
	        value: selectedOption.value
	      },
	      remove: function remove() {
	        return _this3._clearSingleOption(selectedOption);
	      }
	    };

	    if (selectedOption.value === 0) {
	      return FilterNodeFactory.from(objectSpread({}, filterNode, {
	        filter: Filter.empty()
	      }));
	    } else {
	      return FilterNodeFactory.from(filterNode);
	    }
	  };

	  _proto2._clearSingleOption = function _clearSingleOption(option) {
	    option.selected = false;
	    this.updateListeners(true, true);
	    this.setState();
	  }
	  /**
	   * Saves selected options to persistent storage
	   * @param {boolean} replaceHistory Whether we replace or push a new history
	   *                                 state for the associated changes
	   */
	  ;

	  _proto2.saveSelectedToPersistentStorage = function saveSelectedToPersistentStorage(replaceHistory) {
	    var _context10, _context11;

	    this.core.persistentStorage.set(this.name, map$2(_context10 = filter$4(_context11 = this.config.options).call(_context11, function (o) {
	      return o.selected;
	    })).call(_context10, function (o) {
	      return o.label;
	    }), replaceHistory || this.core.persistentStorage.get(this.name) === null);
	  }
	  /**
	   * Returns this component's filter node when it is a STATIC_FILTER.
	   * This method is exposed so that components like {@link FilterBoxComponent}
	   * can access them.
	   * @returns {FilterNode}
	   */
	  ;

	  _proto2.getFilterNode = function getFilterNode() {
	    var _context12,
	        _context13,
	        _this4 = this;

	    var filterNodes = map$2(_context12 = filter$4(_context13 = this.config.options).call(_context13, function (o) {
	      return o.selected;
	    })).call(_context12, function (o) {
	      return FilterNodeFactory.from({
	        filter: _this4._buildFilter(o),
	        metadata: _this4._buildFilterMetadata(o),
	        remove: function remove() {
	          return _this4._clearSingleOption(o);
	        }
	      });
	    });

	    var fieldIdToFilterNodes = groupArray(filterNodes, function (fn) {
	      return fn.getFilter().getFilterKey();
	    }); // OR together filter nodes for the same field id.

	    var totalFilterNodes = [];

	    for (var _i5 = 0, _Object$values2 = values$2(fieldIdToFilterNodes); _i5 < _Object$values2.length; _i5++) {
	      var sameIdNodes = _Object$values2[_i5];
	      totalFilterNodes.push(FilterNodeFactory.or.apply(FilterNodeFactory, sameIdNodes));
	    } // AND all of the ORed together nodes.


	    return FilterNodeFactory.and.apply(FilterNodeFactory, totalFilterNodes);
	  };

	  createClass(FilterOptionsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.FILTER_OPTIONS;
	    }
	  }]);

	  return FilterOptionsComponent;
	}(Component);

	// `Number.parseInt` method
	// https://tc39.github.io/ecma262/#sec-number.parseint
	_export({ target: 'Number', stat: true, forced: Number.parseInt != numberParseInt }, {
	  parseInt: numberParseInt
	});

	var _parseInt$3 = path.Number.parseInt;

	var _parseInt$4 = _parseInt$3;

	var _parseInt$5 = _parseInt$4;

	var DEFAULT_CONFIG$2 = {
	  minPlaceholderText: "Min",
	  maxPlaceholderText: "Max"
	};

	var RangeFilterComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(RangeFilterComponent, _Component);

	  function RangeFilterComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG$2, {}, config), systemConfig) || this;
	    /**
	     * The field to filter on
	     * @type {string}
	     * @private
	     */

	    _this._field = config.field;
	    /**
	     * The callback function to call when the filter value changes
	     * @type {function}
	     * @private
	     */

	    _this._onChange = config.onChange || function () {};
	    /**
	     * If true, stores the filter to storage on each change
	     * @type {boolean}
	     * @private
	     */


	    _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;

	    var minVal = _this.core.globalStorage.getState(_this.name + ".min");

	    if (typeof minVal === 'string') {
	      try {
	        minVal = _parseInt$5(minVal);
	      } catch (e) {}
	    }

	    var maxVal = _this.core.globalStorage.getState(_this.name + ".max");

	    if (typeof minVal === 'string') {
	      try {
	        maxVal = _parseInt$5(maxVal);
	      } catch (e) {}
	    }
	    /**
	     * The current range represented
	     * @type {object}
	     * @private
	     */


	    _this._range = {
	      min: _this.getFirstValidValue(minVal, config.initialMin, 0),
	      max: _this.getFirstValidValue(maxVal, config.initialMax, 10)
	    };
	    /**
	     * The title to display for the range control
	     * @type {string}
	     * @private
	     */

	    _this._title = config.title;
	    /**
	     * The optional label to display for the min input
	     * @type {string}
	     * @private
	     */

	    _this._minLabel = config.minLabel || null;
	    /**
	     * The optional label to display for the max input
	     * @type {string}
	     * @private
	     */

	    _this._maxLabel = config.maxLabel || null;
	    return _this;
	  }

	  var _proto = RangeFilterComponent.prototype;

	  _proto.getFirstValidValue = function getFirstValidValue() {
	    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
	      values[_key] = arguments[_key];
	    }

	    for (var _i = 0, _values = values; _i < _values.length; _i++) {
	      var value = _values[_i];

	      if (value || value === 0) {
	        return value;
	      }
	    }
	  };

	  RangeFilterComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'controls/range';
	  };

	  _proto.setState = function setState(data) {
	    _Component.prototype.setState.call(this, _extends_1({}, data, {
	      name: this.name,
	      title: this._title,
	      minLabel: this._minLabel,
	      maxLabel: this._maxLabel,
	      minValue: this._range.min,
	      maxValue: this._range.max
	    }));
	  };

	  _proto.onCreate = function onCreate() {
	    var _this2 = this;

	    DOM.delegate(this._container, '.js-yext-range', 'change', function (event) {
	      _this2._updateRange(event.target.dataset.key, _parseInt$5(event.target.value));
	    });
	  };

	  _proto.setMin = function setMin(value) {
	    this._updateRange('min', value);
	  };

	  _proto.setMax = function setMax(value) {
	    this._updateRange('max', value);
	  };

	  _proto._removeFilterNode = function _removeFilterNode() {
	    this._range = {
	      min: null,
	      max: null
	    };
	    this.setState();

	    this._onChange(FilterNodeFactory.from());

	    this.core.clearStaticFilterNode(this.name);
	    this.core.persistentStorage["delete"](this.name + ".min");
	    this.core.persistentStorage["delete"](this.name + ".max");
	  }
	  /**
	   * Returns this component's filter node.
	   * This method is exposed so that components like {@link FilterBoxComponent}
	   * can access them.
	   * @returns {FilterNode}
	   */
	  ;

	  _proto.getFilterNode = function getFilterNode() {
	    var _this3 = this;

	    return FilterNodeFactory.from({
	      filter: this._buildFilter(),
	      metadata: this._buildFilterMetadata(),
	      remove: function remove() {
	        return _this3._removeFilterNode();
	      }
	    });
	  }
	  /**
	   * Update the current range state
	   * @param {string} key The range key to update
	   * @param {number} value The new value for the key
	   */
	  ;

	  _proto._updateRange = function _updateRange(key, value) {
	    var _extends2;

	    this._range = _extends_1({}, this._range, (_extends2 = {}, _extends2[key] = value, _extends2));
	    this.setState();
	    var filterNode = this.getFilterNode();

	    if (this._storeOnChange) {
	      this.core.setStaticFilterNodes(this.name, filterNode);
	    }

	    this.core.persistentStorage.set(this.name + ".min", this._range.min);
	    this.core.persistentStorage.set(this.name + ".max", this._range.max);

	    this._onChange(filterNode);
	  }
	  /**
	   * Build the filter representation of the current state
	   * @returns {Filter}
	   */
	  ;

	  _proto._buildFilter = function _buildFilter() {
	    var _this$_range = this._range,
	        min = _this$_range.min,
	        max = _this$_range.max;
	    var falsyMin = !min && min !== 0;
	    var falsyMax = !max && max !== 0;

	    var _min = falsyMin ? null : _parseInt$2(min);

	    var _max = falsyMax ? null : _parseInt$2(max);

	    return Filter.range(this._field, _min, _max, false);
	  }
	  /**
	   * Helper method for creating range filter metadata
	   * @returns {FilterMetadata}
	   */
	  ;

	  _proto._buildFilterMetadata = function _buildFilterMetadata() {
	    var _this$_range2 = this._range,
	        min = _this$_range2.min,
	        max = _this$_range2.max;
	    var falsyMin = !min && min !== 0;
	    var falsyMax = !max && max !== 0;

	    if (falsyMin && falsyMax) {
	      return new FilterMetadata({
	        fieldName: this._title
	      });
	    } // TODO add config option to range filter component for exclusive ranges.
	    var displayValue;

	    if (falsyMax) {
	      displayValue = "\u2265 " + min;
	    } else if (falsyMin) {
	      displayValue = "\u2264 " + max;
	    } else if (min === max) {
	      displayValue = min;
	    } else {
	      displayValue = min + " - " + max;
	    }

	    return new FilterMetadata({
	      fieldName: this._title,
	      displayValue: displayValue
	    });
	  };

	  createClass(RangeFilterComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.RANGE_FILTER;
	    }
	  }]);

	  return RangeFilterComponent;
	}(Component);

	// `String.prototype.repeat` method implementation
	// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
	var stringRepeat = ''.repeat || function repeat(count) {
	  var str = String(requireObjectCoercible(this));
	  var result = '';
	  var n = toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
	  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
	  return result;
	};

	// https://github.com/tc39/proposal-string-pad-start-end




	var ceil$1 = Math.ceil;

	// `String.prototype.{ padStart, padEnd }` methods implementation
	var createMethod$6 = function (IS_END) {
	  return function ($this, maxLength, fillString) {
	    var S = String(requireObjectCoercible($this));
	    var stringLength = S.length;
	    var fillStr = fillString === undefined ? ' ' : String(fillString);
	    var intMaxLength = toLength(maxLength);
	    var fillLen, stringFiller;
	    if (intMaxLength <= stringLength || fillStr == '') return S;
	    fillLen = intMaxLength - stringLength;
	    stringFiller = stringRepeat.call(fillStr, ceil$1(fillLen / fillStr.length));
	    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
	    return IS_END ? S + stringFiller : stringFiller + S;
	  };
	};

	var stringPad = {
	  // `String.prototype.padStart` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	  start: createMethod$6(false),
	  // `String.prototype.padEnd` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.padend
	  end: createMethod$6(true)
	};

	// https://github.com/zloirock/core-js/issues/280


	// eslint-disable-next-line unicorn/no-unsafe-regex
	var stringPadWebkitBug = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(engineUserAgent);

	var $padStart = stringPad.start;


	// `String.prototype.padStart` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.padstart
	_export({ target: 'String', proto: true, forced: stringPadWebkitBug }, {
	  padStart: function padStart(maxLength /* , fillString = ' ' */) {
	    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var padStart = entryVirtual('String').padStart;

	var StringPrototype$3 = String.prototype;

	var padStart_1 = function (it) {
	  var own = it.padStart;
	  return typeof it === 'string' || it === StringPrototype$3
	    || (it instanceof String && own === StringPrototype$3.padStart) ? padStart : own;
	};

	var padStart$1 = padStart_1;

	var padStart$2 = padStart$1;

	/**
	 * A filter for a range of dates
	 */

	var DateRangeFilterComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(DateRangeFilterComponent, _Component);

	  function DateRangeFilterComponent(config, systemConfig) {
	    var _context, _context2;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The api field this filter controls
	     * @type {string}
	     * @private
	     */

	    _this._field = config.field;
	    /**
	     * The title to display for the date range
	     * @type {string}
	     * @private
	     */

	    _this._title = config.title;
	    /**
	     * The optional label to show for the min date input
	     * @type {string}
	     * @private
	     */

	    _this._minLabel = config.minLabel || null;
	    /**
	     * The optional label to show for the max date input
	     * @type {string}
	     * @private
	     */

	    _this._maxLabel = config.maxLabel || null;
	    /**
	     * The callback used when a date is changed
	     * @type {function}
	     * @private
	     */

	    _this._onChange = config.onChange || function () {};
	    /**
	     * If true, stores the filter to storage on each change
	     * @type {boolean}
	     * @private
	     */


	    _this._storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
	    /**
	     * If true, this filter represents an exclusive range, rather than an inclusive one
	     * @type {boolean}
	     * @private
	     */

	    _this._isExclusive = config.isExclusive;
	    var today = new Date();

	    var todayString = today.getFullYear() + "-" + padStart$2(_context = "" + (today.getMonth() + 1)).call(_context, 2, '0') + "-" + padStart$2(_context2 = "" + today.getDate()).call(_context2, 2, '0');

	    var minDate = _this.core.globalStorage.getState(_this.name + ".min");

	    var maxDate = _this.core.globalStorage.getState(_this.name + ".max");
	    /**
	     * The current date range
	     * @private
	     */


	    _this._date = {
	      min: minDate || config.initialMin || todayString,
	      max: maxDate || config.initialMax || todayString
	    };
	    return _this;
	  }

	  DateRangeFilterComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'controls/date';
	  };

	  var _proto = DateRangeFilterComponent.prototype;

	  _proto.setState = function setState(data) {
	    _Component.prototype.setState.call(this, _extends_1({}, data, {
	      name: this.name,
	      title: this._title,
	      minLabel: this._minLabel,
	      maxLabel: this._maxLabel,
	      dateMin: this._date.min,
	      dateMax: this._date.max
	    }));
	  };

	  _proto.onCreate = function onCreate() {
	    var _this2 = this;

	    DOM.delegate(this._container, '.js-yext-date', 'change', function (event) {
	      _this2._updateRange(event.target.dataset.key, event.target.value);
	    });
	  }
	  /**
	   * Set the min date to the one provided
	   * @param {string} date Date to set in yyyy-mm-dd string format
	   */
	  ;

	  _proto.setMin = function setMin(date) {
	    this._updateRange('min', date);
	  }
	  /**
	   * Set the max date to the one provided
	   * @param {string} date Date to set in yyyy-mm-dd string format
	   */
	  ;

	  _proto.setMax = function setMax(date) {
	    this._updateRange('max', date);
	  };

	  _proto._removeFilterNode = function _removeFilterNode() {
	    this._date = {
	      min: null,
	      max: null
	    };
	    this.setState();

	    this._onChange(FilterNodeFactory.from());

	    this.core.clearStaticFilterNode(this.name);
	    this.core.persistentStorage["delete"](this.name + ".min");
	    this.core.persistentStorage["delete"](this.name + ".max");
	  }
	  /**
	   * Returns this component's filter node.
	   * This method is exposed so that components like {@link FilterBoxComponent}
	   * can access them.
	   * @returns {FilterNode}
	   */
	  ;

	  _proto.getFilterNode = function getFilterNode() {
	    var _this3 = this;

	    return FilterNodeFactory.from({
	      filter: this._buildFilter(),
	      metadata: this._buildFilterMetadata(),
	      remove: function remove() {
	        return _this3._removeFilterNode();
	      }
	    });
	  }
	  /**
	   * Updates the current state of the date range
	   * @param {string} key The key for the date value
	   * @param {string} value The string date value
	   * @private
	   */
	  ;

	  _proto._updateRange = function _updateRange(key, value) {
	    var _extends2;

	    this._date = _extends_1({}, this._date, (_extends2 = {}, _extends2[key] = value, _extends2));
	    this.setState();
	    var filterNode = this.getFilterNode();

	    if (this._storeOnChange) {
	      this.core.setStaticFilterNodes(this.name, filterNode);
	    }

	    this.core.persistentStorage.set(this.name + ".min", this._date.min);
	    this.core.persistentStorage.set(this.name + ".max", this._date.max);

	    this._onChange(filterNode);
	  }
	  /**
	   * Construct an api filter with the current date state
	   * @private
	   */
	  ;

	  _proto._buildFilter = function _buildFilter() {
	    return Filter.range(this._field, this._date.min, this._date.max, this._isExclusive);
	  }
	  /**
	   * Helper method for creating a date range filter metadata
	   * @returns {FilterMetadata}
	   */
	  ;

	  _proto._buildFilterMetadata = function _buildFilterMetadata() {
	    var _this$_date = this._date,
	        min = _this$_date.min,
	        max = _this$_date.max;

	    if (!min && !max) {
	      return new FilterMetadata({
	        fieldName: this._title
	      });
	    }

	    var displayValue;

	    if (!max) {
	      displayValue = this._isExclusive ? ANSWERS.processTranslation('After [[date]]', {date:min}) : ANSWERS.processTranslation('[[date]] or later', {date:min});
	    } else if (!min) {
	      displayValue = this._isExclusive ? ANSWERS.processTranslation('Before [[date]]', {date:max}) : ANSWERS.processTranslation('[[date]] and earlier', {date:max});
	    } else if (min === max) {
	      displayValue = this._isExclusive ? '' : min;
	    } else {
	      displayValue = ANSWERS.processTranslation('[[start]] - [[end]]', {start:min,end:max});
	    }

	    return new FilterMetadata({
	      fieldName: this._title,
	      displayValue: displayValue
	    });
	  };

	  createClass(DateRangeFilterComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.DATE_RANGE_FILTER;
	    }
	  }]);

	  return DateRangeFilterComponent;
	}(Component);

	var FacetsConfig =
	/*#__PURE__*/
	function () {
	  function FacetsConfig(config) {
	    /**
	     * The title to display above the controls
	     * @type {string}
	     */
	    this.title = config.title || "Filters";
	    /**
	     * If true, display the number of results next to each facet
	     * @type {boolean}
	     */

	    this.showCount = config.showCount === undefined ? true : config.showCount;
	    /**
	     * If true, trigger a search on each change to a filter
	     * @type {boolean}
	     */

	    this.searchOnChange = config.searchOnChange || false;
	    /**
	     * If true, show a button to reset for each facet group
	     * @type {boolean}
	     */

	    this.resetFacet = config.resetFacet || false;
	    /**
	     * The label to show for the reset button
	     * @type {string}
	     */

	    this.resetFacetLabel = config.resetFacetLabel || "reset";
	    /**
	     * If true, show a "reset all" button to reset all facets
	     * @type {boolean}
	     */

	    this.resetFacets = config.resetFacets;
	    /**
	     * The label to show for the "reset all" button
	     * @type {string}
	     */

	    this.resetFacetsLabel = config.resetFacetsLabel || "reset all";
	    /**
	     * The max number of facets to show before displaying "show more"/"show less"
	     * @type {number}
	     */

	    this.showMoreLimit = config.showMoreLimit || 5;
	    /**
	     * The label to show for displaying more facets
	     * @type {string}
	     */

	    this.showMoreLabel = config.showMoreLabel || "show more";
	    /**
	     * The label to show for displaying less facets
	     * @type {string}
	     */

	    this.showLessLabel = config.showLessLabel || "show less";
	    /**
	     * If true, enable hiding excess facets in each group with a "show more"/"show less" button
	     * @type {boolean}
	     */

	    this.showMore = config.showMore === undefined ? true : config.showMore;
	    /**
	     * If true, allow expanding and collapsing each group of facets
	     * @type {boolean}
	     */

	    this.expand = config.expand === undefined ? true : config.expand;
	    /**
	     * If true, display the number of currently applied filters when collapsed
	     * @type {boolean}
	     */

	    this.showNumberApplied = config.showNumberApplied === undefined ? true : config.showNumberApplied;
	    /**
	     * Text to display on the apply button
	     * @type {string}
	     */

	    this.applyLabel = config.applyLabel || "apply";
	    /**
	     * The controls to use for each field. Each type of filter has a default
	     * $eq : multioption (checkbox)
	     *
	     * DEPRECATED: prefer putting this in config.fields
	     *
	     * @type {Object}
	     */

	    this.fieldControls = config.fieldControls || {};
	    /**
	     * The placeholder text used for the filter option search input
	     * @type {string}
	     */

	    this.placeholderText = config.placeholderText || "Search here...";
	    /**
	     * If true, display the filter option search input
	     * @type {boolean}
	     */

	    this.searchable = config.searchable || false;
	    /**
	     * The form label text for the search input
	     * @type {boolean}
	     */

	    this.searchLabelText = config.searchLabelText || "Search for a filter option";
	    /**
	     * An object that maps field API names to their filter options overrides,
	     * which have the same keys as the config options in FilterOptions component.
	     * @type {Object}
	     */

	    this.fields = config.fields || {};
	    /**
	     * The selector of the apply button
	     * @type {string}
	     * @private
	     */

	    this.applyButtonSelector = config.applyButtonSelector || null;
	    this.validate();
	  }

	  var _proto = FacetsConfig.prototype;

	  _proto.validate = function validate() {};

	  return FacetsConfig;
	}();
	/**
	 * Displays a set of dynamic filters returned from the backend
	 * @extends Component
	 */


	var FacetsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(FacetsComponent, _Component);

	  function FacetsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    _this.config = new FacetsConfig(config);
	    /**
	     * The vertical key for the search
	     * @type {string}
	     * @private
	     */

	    _this._verticalKey = config.verticalKey;
	    /**
	     * The selector of the apply button
	     * @type {string}
	     * @private
	     */

	    _this._applyButtonSelector = config.applyButtonSelector || null;
	    /**
	     * An internal reference for the data storage to listen for updates from the server
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.DYNAMIC_FILTERS;
	    /**
	     * The filter box that displays the dynamic filters
	     * @type {FilterBoxComponent}
	     * @private
	     */

	    _this._filterbox = null;
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  FacetsComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'filters/facets';
	  };

	  var _proto2 = FacetsComponent.prototype;

	  _proto2.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      isNoResults: data.resultsContext === ResultsContext.NO_RESULTS
	    }));
	  };

	  _proto2.remove = function remove() {
	    if (this._filterbox) {
	      this._filterbox.remove();
	    }

	    _Component.prototype.remove.call(this);
	  };

	  _proto2.onMount = function onMount() {
	    var _this2 = this;

	    this.core.enableDynamicFilters();

	    if (this._filterbox) {
	      this._filterbox.remove();
	    }

	    var _this$_state$get = this._state.get(),
	        filters = _this$_state$get.filters,
	        resultsContext = _this$_state$get.resultsContext;

	    if (!filters || resultsContext === ResultsContext.NO_RESULTS) {
	      return;
	    }

	    filters = map$2(filters).call(filters, function (f) {
	      var fieldOverrides = _this2.config.fields[f.fieldId] || {};
	      return _extends_1({}, f, objectSpread({
	        type: 'FilterOptions',
	        control: _this2.config.fieldControls[f.fieldId] || 'multioption',
	        searchable: _this2.config.searchable,
	        searchLabelText: _this2.config.searchLabelText,
	        placeholderText: _this2.config.placeholderText,
	        showExpand: fieldOverrides.expand === undefined ? _this2.config.expand : fieldOverrides.expand
	      }, fieldOverrides));
	    }); // TODO: pass an apply() method to FilterBox, that will override its default behavior,
	    // and remove the isDynamic config option.

	    this._filterbox = this.componentManager.create('FilterBox', _extends_1({}, this.config, {
	      parentContainer: this._container,
	      name: this.name + ".filterbox",
	      container: '.js-yxt-Facets',
	      verticalKey: this._verticalKey,
	      resetFilter: this.config.resetFacet,
	      resetFilters: this.config.resetFacets,
	      resetFilterLabel: this.config.resetFacetLabel,
	      resetFiltersLabel: this.config.resetFacetsLabel,
	      isDynamic: true,
	      filters: filters
	    }));

	    this._filterbox.mount();

	    this.core.globalStorage.set(StorageKeys.FACETS_LOADED, true);
	  };

	  createClass(FacetsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.FACETS;
	    }
	  }]);

	  return FacetsComponent;
	}(Component);

	var METERS_PER_MILE = 1609.344;
	var DEFAULT_CONFIG$3 = {
	  /**
	   * The radius, in miles, around the user's location to find results.
	   * If location accuracy is low, a larger radius may be used automatically
	   * @type {number}
	   */
	  radius: 50,

	  /**
	   * The vertical key to use
	   * @type {string}
	   */
	  verticalKey: null,

	  /**
	   * If true, submits a search when the value is changed
	   * @type {boolean}
	   */
	  searchOnChange: false,

	  /**
	   * The title to display
	   * @type {string}
	   */
	  title: "Location",

	  /**
	   * The label to display
	   * @type {string}
	   */
	  label: "Location",

	  /**
	   * The icon url to show in the geo button
	   * @type {string}
	   */
	  geoButtonIcon: '',

	  /**
	   * The alt text to include with the geo button icon
	   * @type {string}
	   */
	  geoButtonIconAltText: "Use My Location",

	  /**
	   * The text to show in the geo button
	   * @type {string}
	   */
	  geoButtonText: "Use My Location",

	  /**
	   * The text to show when geolocation is enabled
	   * @type {string}
	   */
	  enabledText: "Current Location",

	  /**
	   * The text to show when loading the user's location
	   * @type {string}
	   */
	  loadingText: "Finding Your Location...",

	  /**
	   * The text to show if the user's location cannot be found
	   * @type {string}
	   */
	  errorText: "Could Not Find Your Location",

	  /**
	   * The CSS selector of the toggle button
	   * @type {string}
	   */
	  buttonSelector: '.js-yxt-GeoLocationFilter-button',

	  /**
	   * The CSS selector of the query input
	   * @type {string}
	   */
	  inputSelector: '.js-yxt-GeoLocationFilter-input'
	};
	/**
	 * Renders a button that when clicked adds a static filter representing the user's location
	 * @extends Component
	 */

	var GeoLocationComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(GeoLocationComponent, _Component);

	  function GeoLocationComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG$3, {}, config), systemConfig) || this;
	    /**
	     * The query string to use for the input box, provided to template for rendering.
	     * @type {string}
	     */

	    _this.query = _this.core.globalStorage.getState(StorageKeys.QUERY + "." + _this.name) || '';

	    _this.core.globalStorage.on('update', StorageKeys.QUERY + "." + _this.name, function (q) {
	      _this.query = q;

	      _this.setState();
	    });

	    _this.searchParameters = buildSearchParameters(config.searchParameters);
	    /**
	     * Options to pass to the geolocation api.
	     * @type {Object}
	     */

	    _this._geolocationOptions = objectSpread({
	      enableHighAccuracy: false,
	      timeout: 6000,
	      maximumAge: 300000
	    }, config.geolocationOptions);
	    /**
	     * Options for the geolocation timeout alert.
	     * @type {Object}
	     */

	    _this._geolocationTimeoutAlert = objectSpread({
	      enabled: false,
	      message: "We are unable to determine your location"
	    }, config.geolocationTimeoutAlert);
	    return _this;
	  }

	  GeoLocationComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'controls/geolocation';
	  };

	  var _proto = GeoLocationComponent.prototype;

	  _proto.setState = function setState(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    var placeholder = '';

	    if (this._enabled) {
	      placeholder = this._config.enabledText;
	    }

	    if (data.geoLoading) {
	      placeholder = this._config.loadingText;
	    }

	    if (data.geoError) {
	      placeholder = this._config.errorText;
	    }

	    _Component.prototype.setState.call(this, objectSpread({}, data, {
	      title: this._config.title,
	      geoEnabled: this._enabled,
	      query: this.query,
	      labelText: this._config.label,
	      enabledText: this._config.enabledText,
	      loadingText: this._config.loadingText,
	      errorText: this._config.errorText,
	      geoButtonIcon: this._config.geoButtonIcon,
	      geoValue: this._enabled || data.geoLoading || data.geoError ? '' : this.query,
	      geoPlaceholder: placeholder,
	      geoButtonText: this._config.geoButtonText
	    }));
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    if (this._autocomplete) {
	      this._autocomplete.remove();
	    }

	    this._initAutoComplete(this._config.inputSelector);

	    DOM.on(DOM.query(this._container, this._config.buttonSelector), 'click', function () {
	      return _this2._toggleGeoFilter();
	    });
	  }
	  /**
	   * A helper method to wire up our auto complete on an input selector
	   * @param {string} inputSelector CSS selector to bind our auto complete component to
	   * @private
	   */
	  ;

	  _proto._initAutoComplete = function _initAutoComplete(inputSelector) {
	    var _this3 = this;

	    if (this._autocomplete) {
	      this._autocomplete.remove();
	    }

	    this._autocomplete = this.componentManager.create('AutoComplete', {
	      parentContainer: this._container,
	      name: this.name + ".autocomplete",
	      isFilterSearch: true,
	      container: '.js-yxt-GeoLocationFilter-autocomplete',
	      originalQuery: this.query,
	      inputEl: inputSelector,
	      verticalKey: this._config.verticalKey,
	      searchParameters: this.searchParameters,
	      onSubmit: function onSubmit(query, filter) {
	        return _this3._handleSubmit(query, filter);
	      }
	    });
	  };

	  _proto._handleSubmit = function _handleSubmit(query, filter) {
	    this.query = query;

	    this._saveDataToStorage(query, Filter.fromResponse(filter), "" + query);

	    this._enabled = false;
	  }
	  /**
	   * Toggles the static filter representing the user's location
	   * @private
	   */
	  ;

	  _proto._toggleGeoFilter = function _toggleGeoFilter() {
	    var _this4 = this;

	    if (!navigator.geolocation) {
	      this.setState({
	        geoError: true
	      });
	      return;
	    }

	    if (!this._enabled) {
	      this.setState({
	        geoLoading: true
	      });
	      navigator.geolocation.getCurrentPosition(function (position) {
	        var filter = _this4._buildFilter(position);

	        _this4._saveDataToStorage('', filter, 'Current Location', position);

	        _this4._enabled = true;

	        _this4.setState({});

	        _this4.core.persistentStorage["delete"](StorageKeys.QUERY + "." + _this4.name);

	        _this4.core.persistentStorage["delete"](StorageKeys.FILTER + "." + _this4.name);
	      }, function () {
	        return _this4._handleGeolocationError();
	      }, this._geolocationOptions);
	    }
	  };

	  _proto._handleGeolocationError = function _handleGeolocationError() {
	    this.setState({
	      geoError: true
	    });
	    var _this$_geolocationTim = this._geolocationTimeoutAlert,
	        enabled = _this$_geolocationTim.enabled,
	        message = _this$_geolocationTim.message;

	    if (enabled) {
	      window.alert(message);
	    }
	  };

	  _proto._removeFilterNode = function _removeFilterNode() {
	    this.core.persistentStorage["delete"](StorageKeys.QUERY + "." + this.name);
	    this.core.persistentStorage["delete"](StorageKeys.FILTER + "." + this.name);
	    this._enabled = false;
	    this.query = '';
	    this.core.clearStaticFilterNode(this.name);
	    this.setState();
	  };

	  _proto._buildFilterNode = function _buildFilterNode(filter, displayValue) {
	    var _this5 = this;

	    return FilterNodeFactory.from({
	      filter: filter,
	      metadata: {
	        displayValue: displayValue,
	        fieldName: this._config.title || this._config.label || "Location"
	      },
	      remove: function remove() {
	        return _this5._removeFilterNode();
	      }
	    });
	  }
	  /**
	   * Saves the provided filter under this component's name
	   * @param {string} query The query to save
	   * @param {Filter} filter The filter to save
	   * @param {string} displayValue The display value for the filter
	   * @param {Object} position The position to save
	   * @private
	   */
	  ;

	  _proto._saveDataToStorage = function _saveDataToStorage(query, filter, displayValue, position) {
	    this.core.persistentStorage.set(StorageKeys.QUERY + "." + this.name, query);
	    this.core.persistentStorage.set(StorageKeys.FILTER + "." + this.name, filter);

	    var filterNode = this._buildFilterNode(filter, displayValue);

	    this.core.setStaticFilterNodes(this.name, filterNode);

	    if (position) {
	      this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	        lat: position.coords.latitude,
	        lng: position.coords.longitude,
	        radius: position.coords.accuracy
	      });
	    }

	    if (this._config.searchOnChange) {
	      this.core.verticalSearch(this._config.verticalKey, {
	        setQueryParams: true,
	        resetPagination: true,
	        useFacets: true
	      });
	    }
	  }
	  /**
	   * Given a position, construct a Filter object
	   * @param {Postition} position The position
	   * @returns {Filter}
	   * @private
	   */
	  ;

	  _proto._buildFilter = function _buildFilter(position) {
	    var _position$coords = position.coords,
	        latitude = _position$coords.latitude,
	        longitude = _position$coords.longitude,
	        accuracy = _position$coords.accuracy;
	    var radius = Math.max(accuracy, this._config.radius * METERS_PER_MILE);
	    return Filter.position(latitude, longitude, radius);
	  };

	  createClass(GeoLocationComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.GEOLOCATION_FILTER;
	    }
	  }]);

	  return GeoLocationComponent;
	}(Component);

	/**
	 * Renders configuration options for sorting Vertical Results.
	 * TODO: how to deal with multiple instances of this component (and filters in general),
	 * ideally "identical" filters/sorts would be synced up.
	 */

	var SortOptionsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(SortOptionsComponent, _Component);

	  function SortOptionsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, assignDefaults(config), systemConfig) || this; // TODO SPR-1929 centralize this logic

	    _this._config.verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;
	    _this.options = _this._config.options;
	    _this.selectedOptionIndex = _parseInt$2(_this.core.globalStorage.getState(_this.name)) || 0;
	    _this.options[_this.selectedOptionIndex].isSelected = true;
	    _this.hideExcessOptions = _this._config.showMore && _this.selectedOptionIndex < _this._config.showMoreLimit;
	    _this.searchOnChangeIsEnabled = _this._config.searchOnChange;
	    _this.showResetIsEnabled = _this._config.showReset;
	    _this.showReset = _this.showResetIsEnabled && _this.selectedOptionIndex !== 0;
	    _this.isNoResults = false;
	    /**
	     * This component should only render if there are search results, so it should listen
	     * to updates to vertical results and handle them accordingly.
	     */

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (verticalResults) {
	      var isSearchComplete = verticalResults.searchState === SearchStates.SEARCH_COMPLETE;

	      if (isSearchComplete) {
	        var isNoResults = verticalResults.resultsContext === ResultsContext.NO_RESULTS;

	        _this.handleVerticalResultsUpdate(isNoResults);
	      }
	    });

	    return _this;
	  }
	  /**
	   * Handle updates to vertical results and trigger a re-render if necessary
	   *
	   * @param {boolean} isNoResults
	   */


	  var _proto = SortOptionsComponent.prototype;

	  _proto.handleVerticalResultsUpdate = function handleVerticalResultsUpdate(isNoResults) {
	    var wasNoResults = this.isNoResults;
	    this.isNoResults = isNoResults; // Call setState (and therefore trigger a re-render) if the presence of search
	    // results has changed. By not always re-rendering, we maintain focus on the selected
	    // selected sort option

	    if (isNoResults !== wasNoResults) {
	      this.setState();
	    }
	  };

	  _proto.setState = function setState(data) {
	    if (data === void 0) {
	      data = {};
	    }

	    var options = this.options;

	    if (this.hideExcessOptions) {
	      var _context;

	      options = slice$3(_context = this.options).call(_context, 0, this._config.showMoreLimit);
	    }

	    _Component.prototype.setState.call(this, _extends_1({}, data, {
	      options: options,
	      hideExcessOptions: this.hideExcessOptions,
	      name: this.name,
	      showReset: this.showReset,
	      isNoResults: this.isNoResults
	    }));
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    // Handle radio button selections
	    var containerEl = DOM.query(this._container, '.yxt-SortOptions-fieldSet');
	    containerEl && DOM.on(containerEl, 'change', function (evt) {
	      return _this2.handleOptionSelection(_parseInt$2(evt.target.value));
	    }); // Register more/less button

	    if (this._config.showMore) {
	      var toggleEl = DOM.query(this._container, '.yxt-SortOptions-showToggle');
	      toggleEl && DOM.on(toggleEl, 'click', function () {
	        _this2.hideExcessOptions = !_this2.hideExcessOptions;

	        _this2.setState();
	      });
	    } // Register show reset button


	    if (this.showResetIsEnabled) {
	      var resetEl = DOM.query(this._container, '.yxt-SortOptions-reset');
	      resetEl && DOM.on(resetEl, 'click', function () {
	        _this2.handleOptionSelection(0);

	        _this2.setState();
	      });
	    } // Register apply button


	    if (!this.searchOnChangeIsEnabled) {
	      var applyEl = DOM.query(this._container, '.yxt-SortOptions-apply');
	      applyEl && DOM.on(applyEl, 'click', function () {
	        return _this2._sortResults();
	      });
	    }
	  };

	  _proto.handleOptionSelection = function handleOptionSelection(selectedOptionIndex) {
	    this._updateSelectedOption(selectedOptionIndex);

	    this._updateCheckedAttributes();

	    if (this.showResetIsEnabled) {
	      this.showReset = selectedOptionIndex !== 0;

	      this._showOrHideResetButton();
	    }

	    if (this.searchOnChangeIsEnabled) {
	      this._sortResults();
	    }
	  };

	  _proto._updateSelectedOption = function _updateSelectedOption(optionIndex) {
	    this.options[this.selectedOptionIndex].isSelected = false;
	    this.options[optionIndex].isSelected = true;
	    this.selectedOptionIndex = optionIndex;
	  }
	  /**
	   * Set the 'checked' attribute for the selected option and remove it for all others
	   */
	  ;

	  _proto._updateCheckedAttributes = function _updateCheckedAttributes() {
	    var _context2,
	        _this3 = this;

	    forEach$4(_context2 = this.options).call(_context2, function (option, optionIndex) {
	      var optionId = "#yxt-SortOptions-option_SortOptions_" + optionIndex;
	      var optionEl = DOM.query(_this3._container, optionId);

	      if (_this3.selectedOptionIndex === optionIndex) {
	        optionEl && optionEl.setAttribute('checked', '');
	      } else {
	        optionEl && optionEl.removeAttribute('checked', '');
	      }
	    });
	  }
	  /**
	   * Show or hide the reset button based on this.showReset
	   */
	  ;

	  _proto._showOrHideResetButton = function _showOrHideResetButton() {
	    var resetEl = DOM.query(this._container, '.yxt-SortOptions-reset');

	    if (this.showReset) {
	      resetEl.classList.remove('js-hidden');
	    } else if (!resetEl.classList.contains('js-hidden')) {
	      resetEl.classList.add('js-hidden');
	    }
	  };

	  _proto._sortResults = function _sortResults() {
	    var optionIndex = this.selectedOptionIndex;
	    var option = this.options[optionIndex]; // searchOnChange really means sort on change here, just that the sort is done through a search,
	    // This was done to have a consistent option name between filters.

	    this.core.persistentStorage.set(this.name, optionIndex);

	    if (this._config.storeOnChange && optionIndex === 0) {
	      this.core.clearSortBys();
	    } else if (this._config.storeOnChange) {
	      this.core.setSortBys(option);
	    }

	    this._search();

	    this._config.onChange(option);
	  }
	  /**
	   * Trigger a search with all filters in storage
	   */
	  ;

	  _proto._search = function _search() {
	    this.core.verticalSearch(this._config.verticalKey, {
	      setQueryParams: true,
	      resetPagination: true,
	      useFacets: true
	    });
	  };

	  SortOptionsComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'controls/sortoptions';
	  };

	  createClass(SortOptionsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return ComponentTypes.SORT_OPTIONS;
	    }
	  }]);

	  return SortOptionsComponent;
	}(Component);

	function assignDefaults(config) {
	  var _context3;

	  var updatedConfig = _extends_1({}, config); // Optional, The label used for the “default” sort (aka the sort specified by the experience config").


	  updatedConfig.defaultSortLabel = config.defaultSortLabel || "Best Match"; // Array of search options, where an option has type, label, and if is type FIELD also a label and direction

	  if (!config.options) {
	    throw new AnswersBasicError('config.options are required', 'SortOptions');
	  }

	  var OPTION_TYPES = ['FIELD', 'RELEVANCE', 'ENTITY_DISTANCE'];

	  if (!isArray$3(config.options)) {
	    throw new AnswersBasicError('options must be an array of objects', 'SortOptions');
	  }

	  updatedConfig.options = map$2(_context3 = config.options).call(_context3, function (option) {
	    if (!option.label || !option.type) {
	      throw new AnswersBasicError("option.label and option.type are required option " + option, 'SortOptions');
	    }

	    var newOption = {
	      isSelected: false
	    };
	    newOption.label = option.label;
	    newOption.type = option.type;
	    var isField = indexOf$5(OPTION_TYPES).call(OPTION_TYPES, newOption.type) === 0;

	    if (isField && option.field && option.direction) {
	      newOption.field = option.field;
	      newOption.direction = option.direction;
	    } else if (isField) {
	      throw new AnswersBasicError("option.field and option.direction are required for option: " + option, 'SortOptions');
	    }

	    return newOption;
	  }); // Add default option to the front of the options array

	  updatedConfig.options.unshift({
	    label: updatedConfig.defaultSortLabel,
	    isSelected: false
	  }); // Optional, the selector used for options in the template

	  updatedConfig.optionSelector = config.optionSelector || 'yxt-SortOptions-optionSelector'; // Optional, if true, triggers a search on each change to a filter,
	  // if false the component also renders an apply button, defaults to false

	  updatedConfig.searchOnChange = config.searchOnChange === undefined ? true : config.searchOnChange; // Optional, show a reset button. Clicking it will always return the user to the default sorting option.

	  updatedConfig.showReset = config.showReset || false; // Optional, the label to use for the reset button

	  updatedConfig.resetLabel = config.resetLabel || "reset"; // Optional, the max number of filter options to show before collapsing extras

	  updatedConfig.showMoreLimit = config.showMoreLimit || 5; // Optional, allow collapsing excess sort options after a limit

	  updatedConfig.showMore = config.showMore === undefined ? true : config.showMore;
	  updatedConfig.showMore = updatedConfig.showMore && updatedConfig.options.length > updatedConfig.showMoreLimit; // Optional, the label to show for displaying more options

	  updatedConfig.showMoreLabel = config.showMoreLabel || "Show more"; // Optional, the label to show for displaying less options

	  updatedConfig.showLessLabel = config.showLessLabel || "Show less"; // Optional, the callback function to call when changed

	  updatedConfig.onChange = config.onChange || function () {}; // Optional, Top title for the sorting component


	  updatedConfig.label = config.label || "Sorting"; // Optional, when true component does not update globalStorage
	  // possibly delegating that to a higher-order/composite component

	  updatedConfig.storeOnChange = config.storeOnChange === undefined ? true : config.storeOnChange;
	  updatedConfig.applyLabel = config.applyLabel || "Apply";
	  updatedConfig.verticalKey = config.verticalKey;

	  if (!updatedConfig.verticalKey) {
	    throw new AnswersBasicError('vertical key is required', 'SortOptions');
	  } // note: showExpand and showNumberApplied explicitly not included, on the grounds that
	  // sorting should always be exposed to the user if added.


	  return updatedConfig;
	}

	/**
	 * EventTypes are explicit strings defined
	 * for what the server expects for analytics.
	 *
	 * @enum
	 */

	var EventTypes = {
	  THUMBS_UP: 'THUMBS_UP',
	  THUMBS_DOWN: 'THUMBS_DOWN'
	};
	var DEFAULT_CONFIG$4 = {
	  positiveFeedbackSrText: "This answered my question",
	  negativeFeedbackSrText: "This did not answer my question",
	  footerTextOnSubmission: "Thank you for your feedback!"
	};

	var DirectAnswerComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(DirectAnswerComponent, _Component);

	  function DirectAnswerComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG$4, {}, config), systemConfig) || this;
	    /**
	     * The user given config, without any defaults applied.
	     * @type {Object}
	     */

	    _this._userConfig = objectSpread({}, config);
	    /**
	     * Recieve updates from storage based on this index
	     * @type {StorageKey}
	     */

	    _this.moduleId = StorageKeys.DIRECT_ANSWER;
	    /**
	     * The form used for submitting the feedback
	     * @type {string}
	     */

	    _this._formEl = config.formEl || '.js-directAnswer-feedback-form';
	    /**
	     * The `thumbs up` css selector to bind ui interaction to for reporting
	     * @type {string}
	     */

	    _this._thumbsUpSelector = config.thumbsUpSelector || '.js-directAnswer-thumbUp';
	    /**
	     * The `thumbs down` css selector to bind ui interaction to for reporting
	     * @type {string}
	     */

	    _this._thumbsDownSelector = config.thumbsDownSelector || '.js-directAnswer-thumbDown';
	    /**
	     * The display text for the View Details click to action link
	     * @type {string}
	     */

	    _this._viewDetailsText = config.viewDetailsText || "View Details";
	    /**
	     * The default custom direct answer card to use, when there are no matching card overrides.
	     * @type {string}
	     */

	    _this._defaultCard = config.defaultCard;
	    /**
	     * Card overrides, which choose a custom direct answer card based on fieldName, fieldType, and entityType.
	     * @type {Array<Object>}
	     */

	    _this._cardOverrides = config.cardOverrides || [];
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  DirectAnswerComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/directanswer';
	  }
	  /**
	   * beforeMount, only display the direct answer component if it has data
	   */
	  ;

	  var _proto = DirectAnswerComponent.prototype;

	  _proto.beforeMount = function beforeMount() {
	    if (!this.hasState('answer')) {
	      return false;
	    }

	    return true;
	  }
	  /**
	   * Check whether a given cardOverride matches a given directAnswer.
	   * @param {Object} directAnswer
	   * @param {Object} override
	   */
	  ;

	  _proto._overrideMatchesAnswer = function _overrideMatchesAnswer(directAnswer, override) {
	    if (!keys$5(directAnswer).length) {
	      return true;
	    }

	    var directAnswerPropeties = {
	      entityType: directAnswer.relatedItem.data.type,
	      fieldName: directAnswer.answer.fieldName,
	      fieldType: directAnswer.answer.fieldType
	    };

	    for (var _i = 0, _Object$entries = entries$2(override); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _Object$entries[_i],
	          propertyToMatch = _Object$entries$_i[0],
	          propertyValue = _Object$entries$_i[1];

	      if (propertyToMatch === 'cardType') {
	        continue;
	      }

	      if (directAnswerPropeties[propertyToMatch] !== propertyValue) {
	        return false;
	      }
	    }

	    return true;
	  }
	  /**
	   * Returns the custom card that should be used for the given direct answer.
	   * First, checks user given cardOverrides for a matching override, if there are none
	   * then returns the default card.
	   * @returns {string}
	   */
	  ;

	  _proto._getCustomCard = function _getCustomCard(directAnswer) {
	    var _context,
	        _this2 = this;

	    var cardOverride = find$3(_context = this._cardOverrides).call(_context, function (override) {
	      return _this2._overrideMatchesAnswer(directAnswer, override);
	    });

	    return cardOverride ? cardOverride.cardType : this._defaultCard;
	  }
	  /**
	   * When the DOM is constructed,
	   * we want to wire up the behavior for interacting with the quality feedback reporting (thumbsup/down)
	   */
	  ;

	  _proto.onMount = function onMount() {
	    var _this3 = this;

	    var customCard = this.getState('customCard');
	    var feedbackSubmitted = this.getState('feedbackSubmitted') === true; // Avoid bindings if the feedback has previously been submitted or is using a custom card.

	    if (customCard || feedbackSubmitted) {
	      return this;
	    } // For WCAG compliance, the feedback should be a submittable form


	    DOM.on(this._formEl, 'submit', function (e) {
	      var formEl = e.target;
	      var checkedValue = DOM.query(formEl, 'input:checked').value === 'true';

	      _this3.reportQuality(checkedValue);

	      _this3.updateState({
	        'feedbackSubmitted': true
	      });
	    }); // Is this actually necessary? I guess it's only necessary if the
	    // submit button is hidden.

	    DOM.on(this._thumbsUpSelector, 'click', function () {
	      DOM.trigger(_this3._formEl, 'submit');
	    });
	    DOM.on(this._thumbsDownSelector, 'click', function () {
	      DOM.trigger(_this3._formEl, 'submit');
	    });
	    var rtfElement = DOM.query(this._container, '.js-yxt-rtfValue');
	    rtfElement && DOM.on(rtfElement, 'click', function (e) {
	      return _this3._handleRtfClickAnalytics(e);
	    });
	  }
	  /**
	   * A click handler for links in a Rich Text Direct Answer. When such a link
	   * is clicked, an {@link AnalyticsEvent} needs to be fired.
	   *
	   * @param {MouseEvent} event The click event.
	   */
	  ;

	  _proto._handleRtfClickAnalytics = function _handleRtfClickAnalytics(event) {
	    if (!event.target.dataset.ctaType) {
	      return;
	    }

	    var ctaType = event.target.dataset.ctaType;
	    var relatedItem = this.getState('relatedItem');
	    var analyticsOptions = {
	      verticalKey: relatedItem.verticalConfigId,
	      directAnswer: true,
	      fieldName: this.getState('answer').fieldApiName,
	      searcher: 'UNIVERSAL',
	      entityId: relatedItem.data.id,
	      url: event.target.href
	    };
	    var analyticsEvent = new AnalyticsEvent(ctaType);
	    analyticsEvent.addOptions(analyticsOptions);
	    this.analyticsReporter.report(analyticsEvent);
	  }
	  /**
	   * updateState enables for partial updates (the delta between the old and new)
	   * @type {object} The new state to apply to the old
	   */
	  ;

	  _proto.updateState = function updateState(state) {
	    if (state === void 0) {
	      state = {};
	    }

	    var newState = _extends_1({}, this.getState(), state);

	    this.setState(newState);
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, _extends_1({}, data, {
	      eventOptions: this.eventOptions(data),
	      viewDetailsText: this._viewDetailsText,
	      directAnswer: data,
	      customCard: this._getCustomCard(data)
	    }));
	  };

	  _proto.eventOptions = function eventOptions(data) {
	    if (!data || keys$5(data).length === 0) {
	      return data;
	    }

	    return stringify$2({
	      verticalConfigId: data.relatedItem.verticalConfigId,
	      searcher: 'UNIVERSAL',
	      entityId: data.relatedItem.data.id,
	      ctaLabel: this._viewDetailsText.toUpperCase().replace(' ', '_')
	    });
	  }
	  /**
	   * reportQuality will send the quality feedback to analytics
	   * @param {boolean} isGood true if the answer is what you were looking for
	   */
	  ;

	  _proto.reportQuality = function reportQuality(isGood) {
	    var eventType = isGood === true ? EventTypes.THUMBS_UP : EventTypes.THUMBS_DOWN;
	    var event = new AnalyticsEvent(eventType).addOptions({
	      'directAnswer': true
	    });
	    this.analyticsReporter.report(event);
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    if (type === this.getState('customCard')) {
	      return _Component.prototype.addChild.call(this, this.getState('directAnswer'), type, objectSpread({}, this._userConfig, {}, opts));
	    }

	    return _Component.prototype.addChild.call(this, data, type, opts);
	  };

	  createClass(DirectAnswerComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'DirectAnswer';
	    }
	  }]);

	  return DirectAnswerComponent;
	}(Component);

	/**
	 * The AlternativeVertical is a model that is used to power the search
	 * suggestions info box. It's initialized through the configuration provided
	 * to the component.
	 */

	var AlternativeVertical = function AlternativeVertical(config) {
	  /**
	   * The name of the vertical that is exposed for the link
	   * @type {string}
	   */
	  this.label = config.label;

	  if (typeof this.label !== 'string') {
	    throw new AnswersConfigError('label is a required configuration option for verticalPage.', 'AlternativeVertical');
	  }
	  /**
	   * The complete URL, including the params
	   * @type {string}
	   */


	  this.url = config.url;

	  if (typeof this.url !== 'string') {
	    throw new AnswersConfigError('url is a required configuration option for verticalPage.', 'AlternativeVertical');
	  }
	  /**
	   * name of an icon from the default icon set
	   * @type {string}
	   */


	  this.iconName = config.iconName;
	  /**
	   * URL of an icon
	   * @type {string}
	   */

	  this.iconUrl = config.iconUrl;
	  /**
	   * Whether the vertical has an icon
	   * @type {string}
	   */

	  this.hasIcon = this.iconName || this.iconUrl;
	  /**
	   * The number of results to display next to each alternative
	   * vertical
	   * @type {number}
	   */

	  this.resultsCount = config.resultsCount;
	};

	var AlternativeVerticalsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(AlternativeVerticalsComponent, _Component);

	  function AlternativeVerticalsComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    _this.moduleId = StorageKeys.ALTERNATIVE_VERTICALS;
	    /**
	     * Alternative verticals that have results for the current query
	     * This gets updated based on the server results
	     * @type {AlternativeVerticals}
	     * @private
	     */

	    _this._alternativeVerticals = opts.data && opts.data.alternativeVerticals || [];
	    /**
	     * Vertical pages config from global verticals config
	     * @type {VerticalPagesConfig}
	     * @private
	     */

	    _this._verticalsConfig = opts.verticalsConfig || [];
	    /**
	     * The name of the vertical that is exposed for the link
	     * @type {string}
	     */

	    _this._currentVerticalLabel = _this.getCurrentVerticalLabel(opts.verticalsConfig) || '';
	    /**
	     * The alternative vertical search suggestions, parsed from alternative verticals and
	     * the global verticals config.
	     * This gets updated based on the server results
	     * @type {AlternativeVertical[]}
	     */

	    _this.verticalSuggestions = _this._buildVerticalSuggestions(_this._alternativeVerticals, _this._verticalsConfig, _this.core.globalStorage.getState(StorageKeys.API_CONTEXT), _this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL));
	    /**
	     * The url to the universal page to link back to without query params
	     * @type {string|null}
	     */

	    _this._baseUniversalUrl = opts.baseUniversalUrl || '';
	    /**
	     * The url to the universal page to link back to with current query params
	     * @type {string|null}
	     */

	    _this._universalUrl = _this._getUniversalURL(_this._baseUniversalUrl, new SearchParams(window.location.search.substring(1)));
	    /**
	     * Whether or not results are displaying, used to control language in the info box
	     * @type {boolean}
	     */

	    _this._isShowingResults = opts.isShowingResults || false;

	    var reRender = function reRender() {
	      _this.verticalSuggestions = _this._buildVerticalSuggestions(_this._alternativeVerticals, _this._verticalsConfig, _this.core.globalStorage.getState(StorageKeys.API_CONTEXT), _this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL));
	      _this._universalUrl = _this._getUniversalURL(_this._baseUniversalUrl, new SearchParams(window.location.search.substring(1)));

	      _this.setState(_this.core.globalStorage.getState(StorageKeys.ALERNATIVE_VERTICALS));
	    };

	    _this.core.globalStorage.on('update', StorageKeys.API_CONTEXT, reRender);

	    _this.core.globalStorage.on('update', StorageKeys.SESSIONS_OPT_IN, reRender);

	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  AlternativeVerticalsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/alternativeverticals';
	  };

	  AlternativeVerticalsComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  var _proto = AlternativeVerticalsComponent.prototype;

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, _extends_1({
	      verticalSuggestions: []
	    }, data, {
	      universalUrl: this._universalUrl,
	      verticalSuggestions: this.verticalSuggestions,
	      currentVerticalLabel: this._currentVerticalLabel,
	      isShowingResults: this._isShowingResults,
	      query: this.core.globalStorage.getState(StorageKeys.QUERY)
	    }));
	  };

	  _proto.getCurrentVerticalLabel = function getCurrentVerticalLabel(verticalsConfig) {
	    var thisVertical = find$3(verticalsConfig).call(verticalsConfig, function (config) {
	      return config.isActive || false;
	    });

	    return thisVertical ? thisVertical.label : '';
	  }
	  /**
	   * _buildVerticalSuggestions will construct an array of {AlternativeVertical}
	   * from alternative verticals and verticalPages configuration
	   * @param {object} alternativeVerticals alternativeVerticals server response
	   * @param {object} verticalsConfig the configuration to use
	   */
	  ;

	  _proto._buildVerticalSuggestions = function _buildVerticalSuggestions(alternativeVerticals, verticalsConfig, context, referrerPageUrl) {
	    var _this2 = this;

	    var verticals = [];
	    var params = new SearchParams(window.location.search.substring(1));

	    if (context) {
	      params.set(StorageKeys.API_CONTEXT, context);
	    }

	    if (typeof referrerPageUrl === 'string') {
	      params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
	    }

	    var sessionsOptIn = this.core.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN);

	    if (sessionsOptIn && sessionsOptIn.setDynamically) {
	      params[StorageKeys.SESSIONS_OPT_IN] = sessionsOptIn.value;
	    }

	    var filteredParams = filterParamsForExperienceLink(params, function (types) {
	      return _this2.componentManager.getComponentNamesForComponentTypes(types);
	    });

	    var _loop2 = function _loop2() {
	      if (_isArray) {
	        if (_i >= _iterator.length) return "break";
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) return "break";
	        _ref = _i.value;
	      }

	      var alternativeVertical = _ref;
	      var verticalKey = alternativeVertical.verticalConfigId;

	      var matchingVerticalConfig = find$3(verticalsConfig).call(verticalsConfig, function (config) {
	        return config.verticalKey === verticalKey;
	      });

	      if (!matchingVerticalConfig || alternativeVertical.resultsCount < 1) {
	        return "continue";
	      }

	      verticals.push(new AlternativeVertical({
	        label: matchingVerticalConfig.label,
	        url: replaceUrlParams(matchingVerticalConfig.url, filteredParams),
	        iconName: matchingVerticalConfig.icon,
	        iconUrl: matchingVerticalConfig.iconUrl,
	        resultsCount: alternativeVertical.resultsCount
	      }));
	    };

	    _loop: for (var _iterator = alternativeVerticals, _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	      var _ref;

	      var _ret = _loop2();

	      switch (_ret) {
	        case "break":
	          break _loop;

	        case "continue":
	          continue;
	      }
	    }

	    return verticals;
	  }
	  /**
	   * Adds parameters that are dynamically set. Removes parameters for facets,
	   * filters, and pagination, which should not persist across the experience.
	   * @param {string} baseUrl The url append the appropriate params to. Note:
	   *                         params already on the baseUrl will be stripped
	   * @param {SearchParams} params The parameters to include in the experience URL
	   * @return {string} The formatted experience URL with appropriate query params
	   */
	  ;

	  _proto._getUniversalURL = function _getUniversalURL(baseUrl, params) {
	    var _this3 = this;

	    if (!baseUrl) {
	      return '';
	    }

	    params.set(StorageKeys.QUERY, this.core.globalStorage.getState(StorageKeys.QUERY));
	    var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

	    if (context) {
	      params.set(StorageKeys.API_CONTEXT, context);
	    }

	    var referrerPageUrl = this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

	    if (referrerPageUrl !== null) {
	      params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
	    }

	    var filteredParams = filterParamsForExperienceLink(params, function (types) {
	      return _this3.componentManager.getComponentNamesForComponentTypes(types);
	    });
	    return replaceUrlParams(baseUrl, filteredParams);
	  };

	  createClass(AlternativeVerticalsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'AlternativeVerticals';
	    }
	  }]);

	  return AlternativeVerticalsComponent;
	}(Component);

	/**
	 * A MapProvider is an interface that represents that should be implemented
	 * in order to integrate with a Third Party Map provider for
	 * interactive maps. MapProviders are used by the MapComponent.
	 *
	 * Implementations should extend this interface.
	 */

	var MapProvider =
	/*#__PURE__*/
	function () {
	  function MapProvider(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The API Key used for interacting with the map provider
	     * @type {string}
	     */
	    this._apiKey = config.apiKey;
	    /**
	     * The zoom level of the map, defaults to 14
	     * @type {number}
	     */

	    this._zoom = config.zoom || 14;
	    /**
	     * The default coordinates to display if there are no results returned
	     * Only used if showEmptyMap is set to true
	     * @type {Object}
	     */

	    this._defaultPosition = config.defaultPosition || {
	      lat: 37.0902,
	      lng: -95.7129
	    };
	    /**
	     * Configuration for the behavior when there are no vertical results.
	     * @type {Object}
	     */

	    this._noResults = config.noResults || {};
	    /**
	     * Determines if an empty map should be shown when there are no results
	     * @type {boolean}
	     */

	    this._showEmptyMap = config.showEmptyMap || false;
	    /**
	     * A reference to the underlying map instance, created by the external lib.
	     * @type {number}
	     */

	    this._map = null;
	    /**
	     * Temporary boolean tracking whether or not the external JS library is loaded (see TODO below)
	     * @type {boolean}
	     */

	    this._isLoaded = false;
	    /**
	     * Callback to invoke when a pin is clicked. The clicked item(s) are passed to the callback
	     * @type {function}
	     */

	    this._onPinClick = config.onPinClick || null;
	    /**
	     * Callback to invoke when a pin is hovered. The hovered item is passed to the callback
	     * @type {function}
	     */

	    this._onPinMouseOver = config.onPinMouseOver || null;
	    /**
	     * Callback to invoke when a pin is no longer hovered after being hovered.
	     * The hovered item is passed to the callback
	     * @type {function}
	     */

	    this._onPinMouseOut = config.onPinMouseOut || null;
	    /**
	     * Callback to invoke once the Javascript is loaded
	     * @type {function}
	     */

	    this._onLoaded = config.onLoaded || function () {};
	    /**
	     * The custom configuration override to use for the map markers
	     * @type {Object|Function}
	     */


	    this._pinConfig = typeof config.pin === 'function' ? config.pin : _extends_1(MapProvider.DEFAULT_PIN_CONFIG, config.pin);
	    /**
	     * Determines whether or not to collapse pins at the same lat/lng
	     * @type {boolean}
	     */

	    this._collapsePins = config.collapsePins || false;
	    /**
	     * Locale of the map. MapComponent supplies the locale specifed by
	     * ANSWERS.init() by default
	     * @type {string}
	     */

	    this._locale = this._getValidatedLocale(config.locale);
	  }
	  /**
	   * Returns the locale if it passes validation, otherwise returns 'en'
	   * @param {string} locale
	   */


	  var _proto = MapProvider.prototype;

	  _proto._getValidatedLocale = function _getValidatedLocale(locale) {
	    if (locale.length < 2) {
	      console.error("Locale '" + locale + "' must include at least two characters. Falling back to 'en'");
	      return 'en';
	    }

	    return locale;
	  }
	  /**
	   * The default configuration to use for the map markers
	   * @type {Object}
	   * TODO(billy) Create a configuration model
	   */
	  ;

	  MapProvider.shouldHideMap = function shouldHideMap(mapData, resultsContext, showEmptyMap, visibleForNoResults) {
	    if (resultsContext === ResultsContext.NO_RESULTS && visibleForNoResults !== undefined) {
	      return !visibleForNoResults;
	    }

	    var hasEmptyMap = !mapData || mapData.mapMarkers.length <= 0;
	    return hasEmptyMap && !showEmptyMap;
	  };

	  _proto.onLoaded = function onLoaded(cb) {
	    if (typeof cb !== 'function') {
	      return;
	    }

	    this._onLoaded = cb;

	    if (this.isLoaded()) {
	      this._onLoaded();
	    }
	  };

	  _proto.isLoaded = function isLoaded() {
	    return this._isLoaded;
	  };

	  _proto.loadJS = function loadJS() {
	    throw new Error('Unimplemented Method: loadJS');
	  };

	  _proto.init = function init(mapData) {
	    // TODO(billy) This should be based off a promise that gets created from loadJS
	    throw new Error('Unimplemented Method: init');
	  }
	  /**
	   * Given a list of markers, combine markers with the same lat/lng into a single marker
	   * @param {object[]} markers The markers to collapse
	   */
	  ;

	  _proto._collapseMarkers = function _collapseMarkers(markers) {
	    var locationToItem = {};

	    forEach$4(markers).call(markers, function (m) {
	      locationToItem["" + m.latitude + m.longitude] ? locationToItem["" + m.latitude + m.longitude].push(m) : locationToItem["" + m.latitude + m.longitude] = [m];
	    });

	    var collapsedMarkers = [];

	    for (var _i = 0, _Object$entries = entries$2(locationToItem); _i < _Object$entries.length; _i++) {
	      var _Object$entries$_i = _Object$entries[_i],
	          _markers = _Object$entries$_i[1];

	      if (_markers.length > 1) {
	        var collapsedMarker = {
	          item: map$2(_markers).call(_markers, function (m) {
	            return m.item;
	          }),
	          label: _markers.length,
	          latitude: _markers[0].latitude,
	          longitude: _markers[0].longitude
	        };
	        collapsedMarkers.push(collapsedMarker);
	      } else {
	        collapsedMarkers.push(_markers[0]);
	      }
	    }

	    return collapsedMarkers;
	  };

	  createClass(MapProvider, null, [{
	    key: "DEFAULT_PIN_CONFIG",
	    get: function get() {
	      return {
	        icon: {
	          anchor: null,
	          // e.g. { x: 1, y: 1 }
	          svg: null,
	          url: null,
	          scaledSize: null // e.g. { w: 20, h: 20 }

	        },
	        labelType: 'numeric'
	      };
	    }
	  }]);

	  return MapProvider;
	}();

	/* global google */

	/**
	 * GoogleMapProvider is an implementation of a MapProvider
	 * that handles the integration with the third party API to expose maps.
	 * @extends MapProvider
	 */

	var GoogleMapProvider =
	/*#__PURE__*/
	function (_MapProvider) {
	  inheritsLoose(GoogleMapProvider, _MapProvider);

	  function GoogleMapProvider(opts) {
	    var _this;

	    _this = _MapProvider.call(this, opts) || this; // normalize because google's zoom is effectively 1 unit of difference away from mapbox zoom

	    _this._zoomOffset = 1;
	    _this._zoom += _this._zoomOffset;
	    _this._clientId = opts.clientId;
	    _this._signature = opts.signature;

	    if (!_this.hasValidClientCredentials() && !_this._apiKey) {
	      throw new Error('GoogleMapsProvider: Missing `apiKey` or {`clientId`, `signature`}');
	    }
	    /**
	     * Language of the map.
	     * @type {string}
	     */


	    _this._language = _this.getLanguage(_this._locale);
	    return _this;
	  }
	  /**
	   * Google Maps supports some language codes that are longer than two characters. If the
	   * locale matches one of these edge cases, use it. Otherwise, fallback on the first two
	   * characters of the locale.
	   * @param {string} localeStr Unicode locale
	   */


	  var _proto = GoogleMapProvider.prototype;

	  _proto.getLanguage = function getLanguage(localeStr) {
	    var googleMapsCustomLanguages = ['zh-CN', 'zn-HK', 'zh-TW', 'en-AU', 'en-GB', 'fr-CA', 'pt-BR', 'pt-PT', 'es-419'];
	    var locale = localeStr.replace('_', '-');

	    if (includes$4(googleMapsCustomLanguages).call(googleMapsCustomLanguages, locale)) {
	      return locale;
	    }

	    var language = locale.substring(0, 2);
	    return language;
	  };

	  _proto.loadJS = function loadJS() {
	    var self = this;

	    var onLoad = function onLoad() {
	      if (typeof self._onLoaded === 'function') {
	        self._onLoaded();
	      }
	    };

	    if (typeof google !== 'undefined') {
	      self._isLoaded = true;
	      onLoad();
	      return;
	    }

	    var script = DOM.query('#yext-map-js');

	    if (script) {
	      var onLoadFunc = script.onload;

	      script.onload = function () {
	        onLoadFunc();
	        onLoad();
	      };

	      return;
	    }

	    script = DOM.createEl('script', {
	      id: 'yext-map-js',
	      onload: function onload() {
	        self._isLoaded = true;
	        onLoad();
	      },
	      async: true,
	      src: "https://maps.googleapis.com/maps/api/js?" + self.generateCredentials() + "&language=" + self._language
	    });
	    DOM.append('body', script);
	  };

	  _proto.generateCredentials = function generateCredentials() {
	    if (this.hasValidClientCredentials()) {
	      return "client=" + this._clientId;
	    } else {
	      return "key=" + this._apiKey;
	    }
	  };

	  _proto.hasValidClientCredentials = function hasValidClientCredentials() {
	    return this._clientId;
	  };

	  _proto.init = function init(el, mapData, resultsContext) {
	    var _this2 = this;

	    if (MapProvider.shouldHideMap(mapData, resultsContext, this._showEmptyMap, this._noResults.visible)) {
	      this._map = null;
	      return this;
	    } // NOTE(billy) This timeout is a hack for dealing with async nature.
	    // Only here for demo purposes, so we'll fix later.


	    setTimeout$2(function () {
	      var container = DOM.query(el);
	      _this2.map = new google.maps.Map(container, {
	        zoom: _this2._zoom,
	        center: _this2.getCenterMarker(mapData)
	      }); // Apply our search data to our GoogleMap

	      if (mapData && mapData.mapMarkers.length) {
	        (function () {
	          var collapsedMarkers = _this2._collapsePins ? _this2._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
	          var googleMapMarkerConfigs = GoogleMapMarkerConfig.from(collapsedMarkers, _this2._pinConfig, map$2(_this2));
	          var bounds = new google.maps.LatLngBounds();

	          var _loop = function _loop(i) {
	            var marker = new google.maps.Marker(googleMapMarkerConfigs[i]);

	            if (_this2._onPinClick) {
	              marker.addListener('click', function () {
	                return _this2._onPinClick(collapsedMarkers[i].item);
	              });
	            }

	            if (_this2._onPinMouseOver) {
	              marker.addListener('mouseover', function () {
	                return _this2._onPinMouseOver(collapsedMarkers[i].item);
	              });
	            }

	            if (_this2._onPinMouseOut) {
	              marker.addListener('mouseout', function () {
	                return _this2._onPinMouseOut(collapsedMarkers[i].item);
	              });
	            }

	            bounds.extend(marker.position);
	          };

	          for (var i = 0; i < googleMapMarkerConfigs.length; i++) {
	            _loop(i);
	          }

	          if (googleMapMarkerConfigs.length >= 2) {
	            map$2(_this2).fitBounds(bounds);
	          }
	        })();
	      }
	    }, 100);
	  };

	  _proto.getCenterMarker = function getCenterMarker(mapData) {
	    return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? {
	      lng: mapData.mapCenter.longitude,
	      lat: mapData.mapCenter.latitude
	    } : {
	      lng: this._defaultPosition.lng,
	      lat: this._defaultPosition.lat
	    };
	  };

	  return GoogleMapProvider;
	}(MapProvider); // TODO(billy) Move to own class
	var GoogleMapMarkerConfig =
	/*#__PURE__*/
	function () {
	  function GoogleMapMarkerConfig(opts) {
	    /**
	     * A reference to the google map, that the marker is appended to
	     * @type {GoogleMap}
	     */
	    this.map = map$2(opts) || undefined;
	    /**
	     * The coordinates of the marker (lat/lng)
	     * @type {Object}
	     */

	    this.position = opts.position || {
	      lat: undefined,
	      lng: undefined
	    };
	    /**
	     * The properties/settings of the icon used for the marker
	     * e.g. {
	     *        anchor: { x: 0, y: 0 }
	     *        url: 'path/to/url.jpg'
	     *        scaledSize: { w: 0, h: 0 }
	     *       }
	     *
	     * @type {object}
	     */

	    this.icon = opts.icon || undefined;
	    /**
	     * The label of the marker to use
	     * @type {string}
	     */

	    this.label = opts.label || undefined;
	  }
	  /**
	   * Serializes an array of marker configs
	   * @param {GoogleMapMarkerConfig[]} googleMapMarkerConfigs
	   * @returns {string[]}
	   */


	  GoogleMapMarkerConfig.serialize = function serialize(googleMapMarkerConfigs) {
	    var serializedMarkers = [];

	    forEach$4(googleMapMarkerConfigs).call(googleMapMarkerConfigs, function (marker) {
	      serializedMarkers.push("markers=label:" + marker.label + "|" + marker.position.lat + "," + marker.position.lng);
	    });

	    return serializedMarkers.join('&');
	  }
	  /**
	   * Converts the storage data model of markers into GoogleAPIMarker
	   * @param {object[]} markers The data of the marker
	   * @param {(Object|function)} pinConfig The configuration to apply to the marker
	   * @param {GoogleMap} map reference to the google map to apply the marker to
	   * @returns {GoogleMapMarkerConfig[]}
	   */
	  ;

	  GoogleMapMarkerConfig.from = function from(markers, pinConfig, map) {
	    var googleMapMarkerConfigs = [];

	    if (!isArray$3(markers)) {
	      markers = [markers];
	    }

	    forEach$4(markers).call(markers, function (marker) {
	      // Support configuration as a function
	      var pinConfigObj = pinConfig;

	      if (typeof pinConfig === 'function') {
	        pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
	      } // Transform our Configuration Object into the expected
	      // Google API format.


	      var icon = {};

	      if (pinConfigObj.anchor) {
	        icon.anchor = google.maps.Point(pinConfigObj.anchor.x, pinConfigObj.anchor.y);
	      }

	      if (pinConfigObj.scaledSize) {
	        icon.scaledSize = new google.maps.Size(pinConfigObj.scaledSize.w, pinConfigObj.scaledSize.h);
	      }

	      if (pinConfigObj.url) {
	        icon.url = pinConfigObj.url;
	      }

	      if (pinConfigObj.svg) {
	        icon.url = "data:image/svg+xml;charset=utf-8, " + encodeURIComponent(pinConfigObj.svg);
	      }

	      var label;

	      if (pinConfigObj.label) {
	        label = pinConfigObj.label;
	      } else {
	        label = marker.label.toString();
	      } // NOTE(billy) Google maps doesn't handle empty icon objects nicely
	      // Make google maps happy if no settings for icon are provided;


	      if (keys$5(icon).length === 0) {
	        icon = undefined;
	      }

	      googleMapMarkerConfigs.push(new GoogleMapMarkerConfig({
	        map: map,
	        position: {
	          lat: marker.latitude,
	          lng: marker.longitude
	        },
	        icon: icon,
	        label: label
	      }));
	    });

	    return googleMapMarkerConfigs;
	  };

	  return GoogleMapMarkerConfig;
	}();

	var mapboxGlLanguage = createCommonjsModule(function (module) {
	/**
	 * Create a new [Mapbox GL JS plugin](https://www.mapbox.com/blog/build-mapbox-gl-js-plugins/) that
	 * modifies the layers of the map style to use the 'text-field' that matches the browser language.
	 * @constructor
	 * @param {object} options - Options to configure the plugin.
	 * @param {string[]} [options.supportedLanguages] - List of supported languages
	 * @param {Function} [options.languageTransform] - Custom style transformation to apply
	 * @param {RegExp} [options.languageField=/^\{name/] - RegExp to match if a text-field is a language field
	 * @param {Function} [options.getLanguageField] - Given a language choose the field in the vector tiles
	 * @param {string} [options.languageSource] - Name of the source that contains the different languages.
	 * @param {string} [options.defaultLanguage] - Name of the default language to initialize style after loading.
	 * @param {string[]} [options.excludedLayerIds] - Name of the layers that should be excluded from translation.
	 */
	function MapboxLanguage(options) {
	  options = Object.assign({}, options);
	  if (!(this instanceof MapboxLanguage)) {
	    throw new Error('MapboxLanguage needs to be called with the new keyword');
	  }

	  this.setLanguage = this.setLanguage.bind(this);
	  this._initialStyleUpdate = this._initialStyleUpdate.bind(this);

	  this._defaultLanguage = options.defaultLanguage;
	  this._isLanguageField = options.languageField || /^\{name/;
	  this._getLanguageField = options.getLanguageField || function nameField(language) {
	    return language === 'mul' ? '{name}' : '{name_' + language + '}';
	  };
	  this._languageSource = options.languageSource || null;
	  this._languageTransform = options.languageTransform || function (style, language) {
	    if (language === 'ar') {
	      return noSpacing(style);
	    } else {
	      return standardSpacing(style);
	    }
	  };
	  this._excludedLayerIds = options.excludedLayerIds || [];
	  this.supportedLanguages = options.supportedLanguages || ['ar', 'en', 'es', 'fr', 'de', 'ja', 'ko', 'mul', 'pt', 'ru', 'zh'];
	}

	function standardSpacing(style) {
	  var changedLayers = style.layers.map(function (layer) {
	    if (!(layer.layout || {})['text-field']) return layer;
	    var spacing = 0;
	    if (layer['source-layer'] === 'state_label') {
	      spacing = 0.15;
	    }
	    if (layer['source-layer'] === 'marine_label') {
	      if (/-lg/.test(layer.id)) {
	        spacing = 0.25;
	      }
	      if (/-md/.test(layer.id)) {
	        spacing = 0.15;
	      }
	      if (/-sm/.test(layer.id)) {
	        spacing = 0.1;
	      }
	    }
	    if (layer['source-layer'] === 'place_label') {
	      if (/-suburb/.test(layer.id)) {
	        spacing = 0.15;
	      }
	      if (/-neighbour/.test(layer.id)) {
	        spacing = 0.1;
	      }
	      if (/-islet/.test(layer.id)) {
	        spacing = 0.01;
	      }
	    }
	    if (layer['source-layer'] === 'airport_label') {
	      spacing = 0.01;
	    }
	    if (layer['source-layer'] === 'rail_station_label') {
	      spacing = 0.01;
	    }
	    if (layer['source-layer'] === 'poi_label') {
	      if (/-scalerank/.test(layer.id)) {
	        spacing = 0.01;
	      }
	    }
	    if (layer['source-layer'] === 'road_label') {
	      if (/-label-/.test(layer.id)) {
	        spacing = 0.01;
	      }
	      if (/-shields/.test(layer.id)) {
	        spacing = 0.05;
	      }
	    }
	    return Object.assign({}, layer, {
	      layout: Object.assign({}, layer.layout, {
	        'text-letter-spacing': spacing
	      })
	    });
	  });

	  return Object.assign({}, style, {
	    layers: changedLayers
	  });
	}

	function noSpacing(style) {
	  var changedLayers = style.layers.map(function (layer) {
	    if (!(layer.layout || {})['text-field']) return layer;
	    var spacing = 0;
	    return Object.assign({}, layer, {
	      layout: Object.assign({}, layer.layout, {
	        'text-letter-spacing': spacing
	      })
	    });
	  });

	  return Object.assign({}, style, {
	    layers: changedLayers
	  });
	}

	function isNameStringField(isLangField, property) {
	  return typeof property === 'string' && isLangField.test(property);
	}

	function isNameFunctionField(isLangField, property) {
	  return property.stops && property.stops.filter(function (stop) {
	    return isLangField.test(stop[1]);
	  }).length > 0;
	}

	function adaptPropertyLanguage(isLangField, property, languageFieldName) {
	  if (isNameStringField(isLangField, property)) return languageFieldName;
	  if (isNameFunctionField(isLangField, property)) {
	    var newStops = property.stops.map(function (stop) {
	      if (isLangField.test(stop[1])) {
	        return [stop[0], languageFieldName];
	      }
	      return stop;
	    });
	    return Object.assign({}, property, {
	      stops: newStops
	    });
	  }
	  return property;
	}

	function changeLayerTextProperty(isLangField, layer, languageFieldName, excludedLayerIds) {
	  if (layer.layout && layer.layout['text-field'] && excludedLayerIds.indexOf(layer.id) === -1) {
	    return Object.assign({}, layer, {
	      layout: Object.assign({}, layer.layout, {
	        'text-field': adaptPropertyLanguage(isLangField, layer.layout['text-field'], languageFieldName)
	      })
	    });
	  }
	  return layer;
	}

	function findStreetsSource(style) {
	  var sources = Object.keys(style.sources).filter(function (sourceName) {
	    var source = style.sources[sourceName];
	    return /mapbox-streets-v\d/.test(source.url);
	  });
	  return sources[0];
	}

	/**
	 * Explicitly change the language for a style.
	 * @param {object} style - Mapbox GL style to modify
	 * @param {string} language - The language iso code
	 * @returns {object} the modified style
	 */
	MapboxLanguage.prototype.setLanguage = function (style, language) {
	  if (this.supportedLanguages.indexOf(language) < 0) throw new Error('Language ' + language + ' is not supported');
	  var streetsSource = this._languageSource || findStreetsSource(style);
	  if (!streetsSource) return style;

	  var field = this._getLanguageField(language);
	  var isLangField = this._isLanguageField;
	  var excludedLayerIds = this._excludedLayerIds;
	  var changedLayers = style.layers.map(function (layer) {
	    if (layer.source === streetsSource) return changeLayerTextProperty(isLangField, layer, field, excludedLayerIds);
	    return layer;
	  });

	  var languageStyle = Object.assign({}, style, {
	    layers: changedLayers
	  });

	  return this._languageTransform(languageStyle, language);
	};

	MapboxLanguage.prototype._initialStyleUpdate = function () {
	  var style = this._map.getStyle();
	  var language = this._defaultLanguage || browserLanguage(this.supportedLanguages);

	  // We only update the style once
	  this._map.off('styledata', this._initialStyleUpdate);
	  this._map.setStyle(this.setLanguage(style, language));
	};

	function browserLanguage(supportedLanguages) {
	  var language = navigator.languages ? navigator.languages[0] : (navigator.language || navigator.userLanguage);
	  var parts = language.split('-');
	  var languageCode = language;
	  if (parts.length > 1) {
	    languageCode = parts[0];
	  }
	  if (supportedLanguages.indexOf(languageCode) > -1) {
	    return languageCode;
	  }
	  return null;
	}

	MapboxLanguage.prototype.onAdd = function (map) {
	  this._map = map;
	  this._map.on('styledata', this._initialStyleUpdate);
	  this._container = document.createElement('div');
	  return this._container;
	};

	MapboxLanguage.prototype.onRemove = function () {
	  this._map.off('styledata', this._initialStyleUpdate);
	  this._map = undefined;
	};

	{
	  module.exports = MapboxLanguage;
	}
	});

	/* global mapboxgl */

	/**
	 * MapBoxMapProvider is an implementation of a MapProvider
	 * that handles the integration with the third party API to expose maps.
	 * @extends MapProvider
	 */

	var MapBoxMapProvider =
	/*#__PURE__*/
	function (_MapProvider) {
	  inheritsLoose(MapBoxMapProvider, _MapProvider);

	  function MapBoxMapProvider(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _MapProvider.call(this, opts, systemOpts) || this;
	    /**
	     * Language of the map.
	     * @type {string}
	     */

	    _this._language = _this._locale.substring(0, 2);
	    return _this;
	  }
	  /**
	   * Load the external JS Library
	   * @param {function} onLoad An optional callback to invoke once the JS is loaded.
	   */


	  var _proto = MapBoxMapProvider.prototype;

	  _proto.loadJS = function loadJS(onLoad) {
	    var _this2 = this;

	    var script = DOM.createEl('script', {
	      id: 'yext-map-js',
	      onload: function onload() {
	        _this2._isLoaded = true;
	        mapboxgl.accessToken = _this2._apiKey;

	        if (typeof onLoad === 'function') {
	          onLoad();
	        }

	        if (typeof _this2._onLoaded === 'function') {
	          _this2._onLoaded();
	        }
	      },
	      async: true,
	      src: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.js'
	    });
	    var css = DOM.createEl('link', {
	      id: 'yext-map-css',
	      rel: 'stylesheet',
	      href: 'https://api.mapbox.com/mapbox-gl-js/v0.44.1/mapbox-gl.css'
	    });
	    DOM.append('body', css);
	    DOM.append('body', script);
	  };

	  _proto.init = function init(el, mapData, resultsContext) {
	    var _this3 = this;

	    if (MapProvider.shouldHideMap(mapData, resultsContext, this._showEmptyMap, this._noResults.visible)) {
	      this._map = null;
	      return this;
	    }

	    var container = DOM.query(el);
	    this._map = new mapboxgl.Map({
	      container: container,
	      zoom: this._zoom,
	      style: 'mapbox://styles/mapbox/streets-v9',
	      center: this.getCenterMarker(mapData)
	    });

	    this._map.addControl(new mapboxGlLanguage({
	      defaultLanguage: this._language
	    }));

	    if (mapData && mapData.mapMarkers.length) {
	      (function () {
	        var collapsedMarkers = _this3._collapsePins ? _this3._collapseMarkers(mapData.mapMarkers) : mapData.mapMarkers;
	        var mapboxMapMarkerConfigs = MapBoxMarkerConfig.from(collapsedMarkers, _this3._pinConfig, _this3._map);
	        var bounds = new mapboxgl.LngLatBounds();

	        var _loop = function _loop(i) {
	          var wrapper = mapboxMapMarkerConfigs[i].wrapper;
	          var coords = new mapboxgl.LngLat(mapboxMapMarkerConfigs[i].position.longitude, mapboxMapMarkerConfigs[i].position.latitude);
	          var marker = new mapboxgl.Marker(wrapper).setLngLat(coords);
	          bounds.extend(marker.getLngLat());
	          marker.addTo(_this3._map);

	          if (_this3._onPinClick) {
	            marker.getElement().addEventListener('click', function () {
	              return _this3._onPinClick(collapsedMarkers[i].item);
	            });
	          }

	          if (_this3._onPinMouseOver) {
	            marker.getElement().addEventListener('mouseover', function () {
	              return _this3._onPinMouseOver(collapsedMarkers[i].item);
	            });
	          }

	          if (_this3._onPinMouseOut) {
	            marker.getElement().addEventListener('mouseout', function () {
	              return _this3._onPinMouseOut(collapsedMarkers[i].item);
	            });
	          }
	        };

	        for (var i = 0; i < mapboxMapMarkerConfigs.length; i++) {
	          _loop(i);
	        }

	        if (mapboxMapMarkerConfigs.length >= 2) {
	          _this3._map.fitBounds(bounds, {
	            padding: 50
	          });
	        }
	      })();
	    }
	  };

	  _proto.getCenterMarker = function getCenterMarker(mapData) {
	    return mapData && mapData.mapCenter && mapData.mapCenter.longitude && mapData.mapCenter.latitude ? [mapData.mapCenter.longitude, mapData.mapCenter.latitude] : {
	      lng: this._defaultPosition.lng,
	      lat: this._defaultPosition.lat
	    };
	  };

	  return MapBoxMapProvider;
	}(MapProvider);
	var MapBoxMarkerConfig =
	/*#__PURE__*/
	function () {
	  function MapBoxMarkerConfig(opts) {
	    /**
	     * A reference to the mapbox map, that the marker is appended to
	     * @type {MapBox}
	     */
	    this.map = map$2(opts) || undefined;
	    /**
	     * The coordinates of the marker (lat/lng)
	     * @type {Object}
	     */

	    this.position = opts.position || {
	      latitude: undefined,
	      longitude: undefined
	    };
	    /**
	     * The html element to be used as the map marker
	     * @type {object}
	     */

	    this.wrapper = opts.wrapper || undefined;
	    /**
	     * The label of the marker to use
	     * @type {string}
	     */

	    this.label = opts.label || undefined;
	    /**
	     * The url of the pin for the static map
	     * @type {string}
	     */

	    this.staticMapPin = opts.staticMapPin || undefined;
	  }
	  /**
	   * Serializes an array of marker configs
	   * @param {MapBoxMarkerConfig[]} mapboxMapMarkerConfigs
	   * @returns {string[]}
	   */


	  MapBoxMarkerConfig.serialize = function serialize(mapboxMapMarkerConfigs) {
	    var serializedMarkers = [];

	    forEach$4(mapboxMapMarkerConfigs).call(mapboxMapMarkerConfigs, function (marker) {
	      if (marker.staticMapPin) {
	        serializedMarkers.push("url-" + marker.staticMapPin + "(" + marker.position.longitude + "," + marker.position.latitude + ")");
	      } else {
	        serializedMarkers.push("pin-s-" + marker.label + "(" + marker.position.longitude + "," + marker.position.latitude + ")");
	      }
	    });

	    return serializedMarkers.join(',');
	  }
	  /**
	   * Converts the storage data model of markers into MapBoxMarkerConfig
	   * @param {MapBox} A reference to the mapbox map to apply the marker to
	   * @param {object[]} markers The data of the marker
	   * @param {Object} pinConfig The configuration to apply to the marker
	   * @returns {MapBoxMarkerConfig[]}
	   */
	  ;

	  MapBoxMarkerConfig.from = function from(markers, pinConfig, map) {
	    var mapboxMapMarkerConfigs = [];

	    if (!isArray$3(markers)) {
	      markers = [markers];
	    }

	    forEach$4(markers).call(markers, function (marker) {
	      // Support configuration as a function
	      var pinConfigObj = pinConfig;

	      if (typeof pinConfig === 'function') {
	        pinConfigObj = pinConfig(marker.item, MapProvider.DEFAULT_PIN_CONFIG, marker);
	      }

	      var wrapper = pinConfigObj.wrapper ? pinConfigObj.wrapper : null;
	      var staticMapPin = pinConfigObj.staticMapPin ? pinConfigObj.staticMapPin : null;
	      mapboxMapMarkerConfigs.push(new MapBoxMarkerConfig({
	        map: map,
	        position: {
	          latitude: marker.latitude,
	          longitude: marker.longitude
	        },
	        wrapper: wrapper,
	        label: marker.label,
	        staticMapPin: staticMapPin
	      }));
	    });

	    return mapboxMapMarkerConfigs;
	  };

	  return MapBoxMarkerConfig;
	}();

	var ProviderTypes = {
	  'google': GoogleMapProvider,
	  'mapbox': MapBoxMapProvider
	};

	var MapComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(MapComponent, _Component);

	  function MapComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    /**
	     * Bind this component to listen to the storage based on this key
	     */

	    _this.moduleId = StorageKeys.VERTICAL_RESULTS;
	    /**
	     * Configuration for the behavior when there are no vertical results.
	     */

	    _this._noResults = objectSpread({
	      displayAllResults: false,
	      visible: undefined,
	      template: ''
	    }, opts.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG));
	    /**
	     * An aliased used to determine the type of map provider to use
	     * @type {string}
	     */

	    _this._mapProvider = opts.mapProvider;

	    if (!_this._mapProvider || !(_this._mapProvider.toLowerCase() in ProviderTypes)) {
	      throw new Error('MapComponent: Invalid Map Provider; must be `google` or `mapBox`');
	    }
	    /**
	     * A reference to an instance of the {MapProvider} that's constructed
	     * @type {MapProvider}
	     */


	    _this._map = null;
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  MapComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/map';
	  } // TODO(billy) Make ProviderTypes a factory class
	  ;

	  var _proto = MapComponent.prototype;

	  _proto.getProviderInstance = function getProviderInstance(type) {
	    var _config = objectSpread({
	      locale: this.core.globalStorage.getState(StorageKeys.LOCALE)
	    }, this._config, {
	      noResults: this._noResults
	    });

	    return new ProviderTypes[type.toLowerCase()](_config);
	  };

	  _proto.onCreate = function onCreate() {
	    this._map = this.getProviderInstance(this._mapProvider);

	    this._map.loadJS();
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    this._map.onLoaded(function () {
	      _this2._map.init(_this2._container, _this2.getState('map'), _this2.getState('resultsContext'));
	    });
	  };

	  _proto.setState = function setState(data, val) {
	    if (keys$5(data).length === 0) {
	      return this;
	    }

	    if (data.resultsContext === ResultsContext.NO_RESULTS && !this._noResults.displayAllResults) {
	      data = {
	        resultsContext: data.resultsContext
	      };
	    }

	    return _Component.prototype.setState.call(this, data, val);
	  };

	  createClass(MapComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Map';
	    }
	  }]);

	  return MapComponent;
	}(Component);

	var cardTemplates = {
	  'Standard': 'cards/standard',
	  'Accordion': 'cards/accordion',
	  'Legacy': 'cards/legacy'
	};
	var cardTypes = {
	  'Standard': 'StandardCard',
	  'Accordion': 'AccordionCard',
	  'Legacy': 'LegacyCard'
	};

	var CardConfig = function CardConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  _extends_1(this, config);
	  /**
	   * The card type to use
	   * @type {string}
	   */


	  this.cardType = config.cardType || 'Standard';
	  /**
	   * Data mappings is a function specified in the config
	   * that returns config based on the data passed into card
	   * @type {Function}
	   */

	  this.dataMappings = config.dataMappings || function () {};
	  /**
	   * Either a function that spits out an array of CTA config objects or an array of CTA config objects
	   * or api fieldnames
	   * @type {Function|Array<Object|string>}
	   */


	  this.callsToAction = config.callsToAction || [];
	  /**
	   * The index of the card.
	   * @type {number}
	   */

	  this._index = config._index || 0;
	  /**
	   * Whether this card is part of a universal search
	   */

	  this.isUniversal = config.isUniversal || false;
	};

	var CardComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(CardComponent, _Component);

	  function CardComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, new CardConfig(config), systemConfig) || this;
	    /**
	     * config.data comes from the data-prop attribute passed in
	     * from the parent component.
	     * @type {Object}
	     */

	    var data = config.data || {};
	    /**
	     * The result data for this card.
	     * @type {Result}
	     */

	    _this.result = data.result || {};
	    /**
	     * Vertical key for the search.
	     * @type {string}
	     */

	    _this.verticalKey = data.verticalKey;
	    return _this;
	  }

	  var _proto = CardComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    var rtfElement = DOM.query(this._container, '.js-yxt-rtfValue');

	    if (rtfElement) {
	      var fieldName = rtfElement.dataset.fieldName;
	      DOM.on(rtfElement, 'click', function (e) {
	        return _this2._handleRtfClickAnalytics(e, fieldName);
	      });
	    }
	  }
	  /**
	   * A click handler for links in a Rich Text attriubte. When such a link is
	   * clicked, an {@link AnalyticsEvent} needs to be fired.
	   *
	   * @param {MouseEvent} event The click event.
	   * @param {string} fieldName The name of the Rich Text field used in the
	   *                           attriubte.
	   */
	  ;

	  _proto._handleRtfClickAnalytics = function _handleRtfClickAnalytics(event, fieldName) {
	    var ctaType = event.target.dataset.ctaType;

	    if (!ctaType) {
	      return;
	    }

	    var analyticsOptions = {
	      directAnswer: false,
	      verticalKey: this._config.data.verticalKey,
	      searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL',
	      entityId: this._config.data.result.id,
	      url: event.target.href
	    };

	    if (!fieldName) {
	      console.warn('Field name not provided for RTF click analytics');
	    } else {
	      analyticsOptions.fieldName = fieldName;
	    }

	    var analyticsEvent = new AnalyticsEvent(ctaType);
	    analyticsEvent.addOptions(analyticsOptions);
	    this.analyticsReporter.report(analyticsEvent);
	  };

	  _proto.setState = function setState(data) {
	    var cardType = this._config.cardType; // Use the cardType as component name if it is not a built-in type

	    var cardComponentName = cardTypes[cardType] || cardType;
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      result: this.result,
	      cardType: cardComponentName
	    }));
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    var updatedData = {
	      verticalKey: this.verticalKey,
	      result: data
	    };

	    var newOpts = objectSpread({
	      showOrdinal: this._config.showOrdinal,
	      dataMappings: this._config.dataMappings,
	      callsToAction: this._config.callsToAction,
	      verticalKey: this._config.verticalKey,
	      _index: this._config._index,
	      isUniversal: this._config.isUniversal,
	      modifier: this._config.modifier
	    }, opts);

	    return _Component.prototype.addChild.call(this, updatedData, type, newOpts);
	  }
	  /**
	   * Used by children card components like StandardCardComponent to
	   * apply given template mappings as config.
	   * @param {Result} result
	   * @param {Object|Function} dataMappings
	   */
	  ;

	  CardComponent.applyDataMappings = function applyDataMappings(result, dataMappings) {
	    var config = {};

	    if (typeof dataMappings === 'function') {
	      dataMappings = dataMappings(result);
	    }

	    if (typeof dataMappings === 'object') {
	      var _context;

	      forEach$4(_context = entries$2(dataMappings)).call(_context, function (_ref) {
	        var attribute = _ref[0],
	            value = _ref[1];

	        if (typeof value === 'function') {
	          config[attribute] = value(result);
	        } else {
	          config[attribute] = value;
	        }
	      });
	    }

	    return config;
	  };

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  CardComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'cards/card';
	  };

	  CardComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(CardComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Card';
	    }
	  }]);

	  return CardComponent;
	}(Component);

	/**
	 * Converts an array of {@link AppliedQueryFilter}s into equivalent {@link SimpleFilterNode}s.
	 * @param {Array<AppliedQueryFilter>} nlpFilters
	 * @returns {Array<SimpleFilterNode>}
	 */

	function convertNlpFiltersToFilterNodes(nlpFilters) {
	  return map$2(nlpFilters).call(nlpFilters, function (nlpFilter) {
	    return FilterNodeFactory.from({
	      filter: Filter.from(filter$4(nlpFilter)),
	      metadata: new FilterMetadata({
	        fieldName: nlpFilter.key,
	        displayValue: nlpFilter.value
	      })
	    });
	  });
	}
	/**
	 * Flattens an array of {@link FilterNode}s into an array
	 * of their constituent leaf {@link SimpleFilterNode}s.
	 * @param {Array<FilterNode>} filterNodes
	 * @returns {Array<SimpleFilterNode>}
	 */

	function flattenFilterNodes(filterNodes) {
	  return flatMap$2(filterNodes).call(filterNodes, function (fn) {
	    return fn.getSimpleDescendants();
	  });
	}
	/**
	 * Returns the given array of {@link FilterNode}s,
	 * removing FilterNodes that are empty or have a field id listed as a hidden.
	 * @param {Array<FilterNode>} filterNodes
	 * @param {Array<string>} hiddenFields
	 * @returns {Array<FilterNode>}
	 */

	function pruneFilterNodes(filterNodes, hiddenFields) {
	  return filter$4(filterNodes).call(filterNodes, function (fn) {
	    var _fn$getMetadata = fn.getMetadata(),
	        fieldName = _fn$getMetadata.fieldName,
	        displayValue = _fn$getMetadata.displayValue;

	    if (!fieldName || !displayValue) {
	      return false;
	    }

	    var fieldId = fn.getFilter().getFilterKey();
	    return !includes$4(hiddenFields).call(hiddenFields, fieldId);
	  });
	}

	var DEFAULT_CONFIG$5 = {
	  showResultCount: true,
	  showAppliedFilters: true,
	  showFieldNames: false,
	  resultsCountSeparator: '|',
	  verticalURL: undefined,
	  showChangeFilters: false,
	  removable: false,
	  delimiter: '|',
	  isUniversal: false,
	  labelText: "Filters applied to this search:",
	  removableLabelText: "Remove this filter",
	  resultsCountTemplate: '',
	  hiddenFields: []
	};

	var ResultsHeaderComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(ResultsHeaderComponent, _Component);

	  function ResultsHeaderComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG$5, {}, config), systemConfig) || this;
	    var data = config.data || {};
	    /**
	     * Total number of results.
	     * @type {number}
	     */

	    _this.resultsCount = data.resultsCount || 0;
	    /**
	     * Number of results displayed on the page.
	     * @type {number}
	     */

	    _this.resultsLength = data.resultsLength || 0;
	    /**
	     * The compiled custom results count template, if the user specifies one.
	     * @type {Function}
	     */

	    _this._compiledResultsCountTemplate = _this._renderer.compile(_this._config.resultsCountTemplate);
	    /**
	     * Array of nlp filters in the search response.
	     * @type {Array<AppliedQueryFilter>}
	     */

	    _this.nlpFilterNodes = convertNlpFiltersToFilterNodes(data.nlpFilters || []);
	    /**
	     * TODO (SPR-2455): Ideally, we would be able to set moduleId to DYNAMIC_FILTERS, the actual data
	     * we are listening to changes to, instead of this bespoke RESULTS_HEADER storage key.
	     * The issue is that when two components share a moduleId, if that moduleId listener is ever
	     * unregistered with the off() method, all listeners to that moduleId are unregistered.
	     * With child components, this is something that happens whenever the parent component rerenders.
	     */

	    _this.moduleId = StorageKeys.RESULTS_HEADER;
	    return _this;
	  }

	  ResultsHeaderComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  var _proto = ResultsHeaderComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    var removableFilterTags = DOM.queryAll(this._container, '.js-yxt-ResultsHeader-removableFilterTag');

	    forEach$4(removableFilterTags).call(removableFilterTags, function (tag) {
	      DOM.on(tag, 'click', function () {
	        return _this2._removeFilterTag(tag);
	      });
	    });
	  }
	  /**
	   * Call remove callback for the {@link FilterNode} corresponding to a specific
	   * removable filter tag.
	   * @param {HTMLElement} tag
	   */
	  ;

	  _proto._removeFilterTag = function _removeFilterTag(tag) {
	    var filterId = tag.dataset.filterId;
	    var filterNode = this.appliedFilterNodes[filterId];
	    filterNode.remove();
	    this.core.verticalSearch(this._config.verticalKey, {
	      setQueryParams: true,
	      resetPagination: true,
	      useFacets: true
	    });
	  }
	  /**
	   * Returns the currently applied nlp filter nodes, with nlp filter nodes that
	   * are duplicates of other filter nodes removed or filter on hiddenFields removed.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto._getPrunedNlpFilterNodes = function _getPrunedNlpFilterNodes() {
	    var _context,
	        _this3 = this;

	    var duplicatesRemoved = filter$4(_context = this.nlpFilterNodes).call(_context, function (nlpNode) {
	      var _context2;

	      var isDuplicate = find$3(_context2 = _this3.appliedFilterNodes).call(_context2, function (appliedNode) {
	        return appliedNode.hasSameFilterAs(nlpNode);
	      });

	      return !isDuplicate;
	    });

	    return pruneFilterNodes(duplicatesRemoved, this._config.hiddenFields);
	  }
	  /**
	   * Combine all of the applied filters into a format the handlebars
	   * template can work with.
	   * Keys are the fieldName of the filter. Values are an array of objects with a
	   * displayValue and dataFilterId.
	   * TODO (SPR-2350): give every node a unique id, and use that instead of index for
	   * dataFilterId.
	   * @returns {Array<Object>}
	   */
	  ;

	  _proto._groupAppliedFilters = function _groupAppliedFilters() {
	    var _this4 = this;

	    var getFieldName = function getFieldName(filterNode) {
	      return filterNode.getMetadata().fieldName;
	    };

	    var parseNlpFilterDisplay = function parseNlpFilterDisplay(filterNode) {
	      return {
	        displayValue: filterNode.getMetadata().displayValue
	      };
	    };

	    var parseRemovableFilterDisplay = function parseRemovableFilterDisplay(filterNode, index) {
	      return {
	        displayValue: filterNode.getMetadata().displayValue,
	        dataFilterId: index,
	        removable: _this4._config.removable
	      };
	    };

	    var removableNodes = groupArray(this.appliedFilterNodes, getFieldName, parseRemovableFilterDisplay);

	    var prunedNlpFilterNodes = this._getPrunedNlpFilterNodes();

	    return groupArray(prunedNlpFilterNodes, getFieldName, parseNlpFilterDisplay, removableNodes);
	  }
	  /**
	   * Returns an array of object the handlebars can understand and render
	   * the applied filters bar from. Our handlebars can only loop through arrays,
	   * not objects, so we need to reformat the grouped applied filters.
	   * @returns {Array<Object>}
	   */
	  ;

	  _proto._createAppliedFiltersArray = function _createAppliedFiltersArray() {
	    var _context3;

	    var groupedFilters = this._groupAppliedFilters();

	    return map$2(_context3 = keys$5(groupedFilters)).call(_context3, function (label) {
	      return {
	        label: label,
	        filterDataArray: groupedFilters[label]
	      };
	    });
	  }
	  /**
	   * Pulls applied filter nodes from {@link FilterRegistry}, then retrives an array of
	   * the leaf nodes, and then removes hidden or empty {@link FilterNode}s. Then appends
	   * the currently applied nlp filters.
	   */
	  ;

	  _proto._calculateAppliedFilterNodes = function _calculateAppliedFilterNodes() {
	    var filterNodes = this.core.filterRegistry.getAllFilterNodes();
	    var simpleFilterNodes = flattenFilterNodes(filterNodes);
	    return pruneFilterNodes(simpleFilterNodes, this._config.hiddenFields);
	  };

	  _proto.setState = function setState(data) {
	    var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
	    this.appliedFilterNodes = this._calculateAppliedFilterNodes();

	    var appliedFiltersArray = this._createAppliedFiltersArray();

	    var shouldShowFilters = appliedFiltersArray.length > 0 && this._config.showAppliedFilters;
	    var resultsCountData = {
	      resultsCount: this.resultsCount,
	      resultsCountStart: offset + 1,
	      resultsCountEnd: offset + this.resultsLength
	    };
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {}, resultsCountData, {
	      showResultSeparator: this._config.resultsCountSeparator && this._config.showResultCount && shouldShowFilters,
	      shouldShowFilters: shouldShowFilters,
	      appliedFiltersArray: appliedFiltersArray,
	      customResultsCount: this._compiledResultsCountTemplate(resultsCountData)
	    }));
	  };

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  ResultsHeaderComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/resultsheader';
	  };

	  createClass(ResultsHeaderComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'ResultsHeader';
	    }
	  }]);

	  return ResultsHeaderComponent;
	}(Component);

	/**
	 * Used to parse config options, defaulting to different synonyms and
	 * finally a default value. Option names with periods will be parsed
	 * as multiple child object accessors, i.e. trying to access 'first.second.option'
	 * will first look for config['first']['second']['option'].
	 *
	 * This is mostly needed for boolean config values, since boolean operators,
	 * which we commonly use for defaulting config options, do not work properly
	 * in those cases.
	 * @param {Object} config
	 * @param {Array<string>}
	 * @param {any} defaultValue
	 */
	function defaultConfigOption(config, synonyms, defaultValue) {
	  for (var _iterator = synonyms, _isArray = isArray$3(_iterator), _i = 0, _iterator = _isArray ? _iterator : getIterator$1(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var name = _ref;
	    var accessors = name.split('.');
	    var parentConfig = config;
	    var skip = false;

	    for (var _iterator2 = slice$3(accessors).call(accessors, 0, -1), _isArray2 = isArray$3(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : getIterator$1(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var childConfigAccessor = _ref2;

	      if (!(childConfigAccessor in parentConfig)) {
	        skip = true;
	        break;
	      }

	      parentConfig = parentConfig[childConfigAccessor];
	    }

	    var configName = accessors[accessors.length - 1];

	    if (!skip && configName in parentConfig) {
	      return parentConfig[configName];
	    }
	  }

	  return defaultValue;
	}

	var VerticalResultsConfig = function VerticalResultsConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  _extends_1(this, config);
	  /**
	   * isUniversal is set to true if this component is added by the UniversalResultsComponent
	   * @type {boolean}
	   * @private
	   */


	  this.isUniversal = config.isUniversal || false;
	  var parentOpts = config._parentOpts || {};
	  /**
	   * Custom render function
	   * @type {function}
	   */

	  this.renderItem = config.renderItem || parentOpts.renderItem;
	  /**
	   * Custom item template
	   * @type {string}
	   */

	  this.itemTemplate = config.itemTemplate || parentOpts.itemTemplate;
	  /**
	   * The maximum number of columns to display, supports 1, 2, 3, or 4.
	   * @type {number}
	   */

	  this.maxNumberOfColumns = config.maxNumberOfColumns || 1;
	  /**
	   * The config to pass to the card
	   * @type {Object}
	   */

	  this.card = config.card || {};
	  /**
	   * Vertical URL for view more link
	   * @type {string}
	   */

	  this.verticalURL = config.verticalURL;
	  /**
	   * Whether to display the number of results.
	   * @type {boolean}
	   */

	  this.showResultCount = config.showResultCount === undefined ? true : config.showResultCount;
	  /**
	   * A custom results count template.
	   * @type {string}
	   */

	  this.resultsCountTemplate = config.resultsCountTemplate || '';
	  /**
	   * Whether to display the results header (assuming there is something like the results count
	   * or applied filters to display).
	   * @type {boolean}
	   */

	  this.hideResultsHeader = config.hideResultsHeader;
	  /**
	   * Config for the applied filters in the results header.
	   * @type {Object}
	   */

	  this.appliedFilters = {
	    /**
	     * If present, show the filters that were ultimately applied to this query
	     * @type {boolean}
	     */
	    show: defaultConfigOption(config, ['appliedFilters.show', 'showAppliedFilters'], true),

	    /**
	     * If showResultCount and showAppliedFilters are true,
	     * display this separator between the result count and the applied query filters
	     * @type {string}
	     */
	    resultsCountSeparator: defaultConfigOption(config, ['appliedFilters.resultsCountSeparator', 'resultsCountSeparator'], '|'),

	    /**
	     * If showAppliedFilters is true, show the field name in the string followed by a colon.
	     * @type {boolean}
	     */
	    showFieldNames: defaultConfigOption(config, ['appliedFilters.showFieldNames', 'showFieldNames'], false),

	    /**
	     * Any fieldIds in hiddenFields will be hidden from the list of appied filters.
	     * @type {Array<string>}
	     */
	    hiddenFields: defaultConfigOption(config, ['appliedFilters.hiddenFields', 'hiddenFields'], ['builtin.entityType']),

	    /**
	     * The character that should separate each field (and its associated filters) within the applied filter bar
	     * @type {string}
	     */
	    delimiter: defaultConfigOption(config, ['appliedFilters.delimiter'], '|'),

	    /**
	     * If the filters are shown, whether or not they should be removable from within the applied filter bar.
	     * @type {boolean}
	     */
	    removable: defaultConfigOption(config, ['appliedFilters.removable'], false),

	    /**
	     * Whether to show the change filters link on universal results.
	     * @type {boolean}
	     **/
	    showChangeFilters: defaultConfigOption(config, ['appliedFilters.showChangeFilters', 'showChangeFilters'], false),

	    /**
	     * The text for the change filters link.
	     * @type {string}
	     */
	    changeFiltersText: defaultConfigOption(config, ['appliedFilters.changeFiltersText', 'changeFiltersText']),

	    /**
	     * The aria-label given to the applied filters bar. Defaults to 'Filters applied to this search:'.
	     * @type {string}
	     **/
	    labelText: defaultConfigOption(config, ['appliedFilters.labelText'], "Filters applied to this search:"),

	    /**
	     * The aria-label given to the removable filter buttons.
	     * @type {string}
	     */
	    removableLabelText: defaultConfigOption(config, ['appliedFilters.removableLabelText'], "Remove this filter")
	  };
	  /**
	   * Text for the view more button.
	   * @type {string}
	   */

	  this.viewMoreLabel = defaultConfigOption(config, ['viewMoreLabel', 'viewAllText'], "View More");
	};

	var VerticalResultsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(VerticalResultsComponent, _Component);

	  function VerticalResultsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, new VerticalResultsConfig(APPLY_SYNONYMS(config)), systemConfig) || this;

	    var noResultsConfig = _this._config.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG);
	    /**
	     * A parsed version of the noResults config provided to the component.
	     * Applies sensible defaults if certain values are not set.
	     * @type {Object}
	     * @private
	     */


	    _this._noResultsConfig = _extends_1({
	      displayAllResults: false,
	      template: ''
	    }, noResultsConfig);
	    /**
	     * Boolean indicating if legacy no results display should be used.
	     * @type {boolean}
	     * @private
	     */

	    _this._useLegacyNoResults = _this._config.isUniversal || !noResultsConfig;
	    /**
	     * _displayAllResults controls if all results for the vertical will display
	     * when there are no results for a query.
	     * @type {boolean}
	     * @private
	     */

	    _this._displayAllResults = _this._noResultsConfig.displayAllResults;
	    /**
	     * Specifies a custom no results template.
	     *
	     * @type {string}
	     * @private
	     */

	    _this._noResultsTemplate = _this._noResultsConfig.template;

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
	      if (results.searchState === SearchStates.SEARCH_COMPLETE) {
	        _this.setState(results);
	      }
	    });
	    /**
	     * Vertical config from config, if not present, fall back to global verticalPagesConfig
	     * @type {Array.<object>}
	     * @private
	     */


	    _this._verticalsConfig = config.verticalPages || _this.core.globalStorage.getState(StorageKeys.VERTICAL_PAGES_CONFIG).get() || [];
	    /**
	     * @type {Array<Result>}
	     */

	    _this.results = [];
	    _this.numColumns = _this._config.maxNumberOfColumns;
	    /**
	     * Config options used in the {@link ResultsHeaderComponent}
	     */

	    _this.resultsHeaderOpts = {
	      showFieldNames: _this._config.appliedFilters.showFieldNames,
	      resultsCountSeparator: _this._config.appliedFilters.resultsCountSeparator,
	      showAppliedFilters: _this._config.appliedFilters.show,
	      showChangeFilters: _this._config.appliedFilters.showChangeFilters,
	      changeFiltersText: _this._config.appliedFilters.changeFiltersText,
	      showResultCount: _this._config.showResultCount,
	      removable: _this._config.appliedFilters.removable,
	      delimiter: _this._config.appliedFilters.delimiter,
	      labelText: _this._config.appliedFilters.labelText,
	      removableLabelText: _this._config.appliedFilters.removableLabelText,
	      hiddenFields: _this._config.appliedFilters.hiddenFields,
	      resultsCountTemplate: _this._config.resultsCountTemplate
	    };
	    return _this;
	  }

	  var _proto = VerticalResultsComponent.prototype;

	  _proto.mount = function mount() {
	    if (keys$5(this.getState()).length > 0) {
	      _Component.prototype.mount.call(this);
	    }

	    return this;
	  };

	  VerticalResultsComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  _proto.getBaseUniversalUrl = function getBaseUniversalUrl() {
	    var _context;

	    var universalConfig = find$3(_context = this._verticalsConfig).call(_context, function (config) {
	      return !config.verticalKey;
	    }) || {};
	    return universalConfig.url;
	  };

	  _proto.getUniversalUrl = function getUniversalUrl() {
	    var baseUniversalUrl = this.getBaseUniversalUrl();

	    if (!baseUniversalUrl) {
	      return undefined;
	    }

	    return this._getExperienceURL(baseUniversalUrl, new SearchParams(window.location.search.substring(1)));
	  };

	  _proto.getVerticalURL = function getVerticalURL(data) {
	    var _context2,
	        _this2 = this;

	    if (data === void 0) {
	      data = {};
	    }

	    var verticalConfig = find$3(_context2 = this._verticalsConfig).call(_context2, function (config) {
	      return config.verticalKey === _this2.verticalKey;
	    }) || {};
	    var verticalURL = this._config.verticalURL || verticalConfig.url || data.verticalURL || this.verticalKey + '.html';
	    var dataTabOrder = this.core.globalStorage.getState(StorageKeys.NAVIGATION) ? this.core.globalStorage.getState(StorageKeys.NAVIGATION).tabOrder : [];
	    var tabOrder = getTabOrder(this._verticalsConfig, dataTabOrder);
	    var params = new SearchParams(window.location.search.substring(1));
	    params.set('tabOrder', tabOrder);
	    return this._getExperienceURL(verticalURL, params);
	  }
	  /**
	   * Adds parameters that are dynamically set. Removes parameters for facets,
	   * filters, and pagination, which should not persist across the experience.
	   * @param {string} baseUrl The url append the appropriate params to. Note:
	   *    params already on the baseUrl will be stripped
	   * @param {SearchParams} params The parameters to include in the experience URL
	   * @return {string} The formatted experience URL with appropriate query params
	   */
	  ;

	  _proto._getExperienceURL = function _getExperienceURL(baseUrl, params) {
	    var _this3 = this;

	    params.set(StorageKeys.QUERY, this.query);
	    var context = this.core.globalStorage.getState(StorageKeys.API_CONTEXT);

	    if (context) {
	      params.set(StorageKeys.API_CONTEXT, context);
	    }

	    var referrerPageUrl = this.core.globalStorage.getState(StorageKeys.REFERRER_PAGE_URL);

	    if (referrerPageUrl !== null) {
	      params.set(StorageKeys.REFERRER_PAGE_URL, referrerPageUrl);
	    }

	    var sessionsOptIn = this.core.globalStorage.getState(StorageKeys.SESSIONS_OPT_IN);

	    if (sessionsOptIn && sessionsOptIn.setDynamically) {
	      params.set(StorageKeys.SESSIONS_OPT_IN, sessionsOptIn.value);
	    }

	    var filteredParams = filterParamsForExperienceLink(params, function (types) {
	      return _this3.componentManager.getComponentNamesForComponentTypes(types);
	    });
	    return replaceUrlParams(baseUrl, filteredParams);
	  };

	  _proto.setState = function setState(data, val) {
	    if (data === void 0) {
	      data = {};
	    }

	    /**
	     * @type {Array<Result>}
	     */
	    this.results = data.results || [];
	    this.resultsCount = data.resultsCount;
	    this.verticalKey = data.verticalConfigId;
	    this.resultsContext = data.resultsContext;
	    var searchState = data.searchState || SearchStates.PRE_SEARCH;
	    var displayResultsIfExist = this._config.isUniversal || this._displayAllResults || data.resultsContext === ResultsContext.NORMAL;
	    this.query = this.core.globalStorage.getState(StorageKeys.QUERY);
	    return _Component.prototype.setState.call(this, _extends_1({
	      results: []
	    }, data, {
	      isPreSearch: searchState === SearchStates.PRE_SEARCH,
	      isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
	      isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
	      eventOptions: this.eventOptions(),
	      universalUrl: this.getUniversalUrl(),
	      verticalURL: this.getVerticalURL(data),
	      query: this.query,
	      currentVerticalLabel: this._currentVerticalLabel,
	      resultsPresent: displayResultsIfExist && this.results.length !== 0,
	      showNoResults: this.resultsContext === ResultsContext.NO_RESULTS,
	      placeholders: new Array(this._config.maxNumberOfColumns - 1),
	      numColumns: Math.min(this._config.maxNumberOfColumns, this.results.length),
	      useLegacyNoResults: this._useLegacyNoResults,
	      iconIsBuiltIn: Icons[this._config.icon],
	      nlpFilters: data.appliedQueryFilters || []
	    }), val);
	  }
	  /**
	   * helper to construct the eventOptions object for the view all link
	   * @returns {string}
	   */
	  ;

	  _proto.eventOptions = function eventOptions() {
	    return stringify$2({
	      verticalConfigId: this.verticalKey
	    });
	  };

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  VerticalResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/verticalresults';
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    if (type === MapComponent.type) {
	      var _opts = objectSpread({
	        noResults: this._noResultsConfig
	      }, this._config.mapConfig, {}, opts);

	      var _data = {
	        resultsContext: this.getState('resultsContext'),
	        map: data
	      };
	      return _Component.prototype.addChild.call(this, _data, type, _opts);
	    } else if (type === CardComponent.type) {
	      var updatedData = {
	        result: this.results[opts._index],
	        verticalKey: this.verticalKey
	      };

	      var newOpts = objectSpread({
	        target: this._config.target
	      }, this._config.card, {
	        isUniversal: this._config.isUniversal,
	        template: this._config.itemTemplate,
	        render: this._config.renderItem,
	        modifier: this._config.modifier
	      }, opts);

	      return _Component.prototype.addChild.call(this, updatedData, type, newOpts);
	    } else if (type === AlternativeVerticalsComponent.type) {
	      var hasResults = this.results && this.results.length > 0;
	      data = this.core.globalStorage.getState(StorageKeys.ALTERNATIVE_VERTICALS);

	      var _newOpts = objectSpread({
	        template: this._noResultsTemplate,
	        baseUniversalUrl: this.getBaseUniversalUrl(),
	        verticalsConfig: this._verticalsConfig,
	        isShowingResults: this._displayAllResults && hasResults
	      }, opts);

	      return _Component.prototype.addChild.call(this, data, type, _newOpts);
	    } else if (type === ResultsHeaderComponent.type) {
	      var resultsHeaderData = objectSpread({
	        resultsLength: this.results.length,
	        resultsCount: this.resultsCount,
	        nlpFilters: this.getState('nlpFilters')
	      }, data);

	      var _opts2 = objectSpread({}, opts);

	      if (this.resultsContext === ResultsContext.NO_RESULTS) {
	        _opts2.showAppliedFilters = false;
	      }

	      return _Component.prototype.addChild.call(this, resultsHeaderData, type, objectSpread({
	        isUniversal: this._config.isUniversal,
	        verticalURL: this.getVerticalURL(),
	        verticalKey: this.verticalKey
	      }, this.resultsHeaderOpts, {}, _opts2));
	    }

	    return _Component.prototype.addChild.call(this, data, type, opts);
	  };

	  createClass(VerticalResultsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'VerticalResults';
	    }
	  }]);

	  return VerticalResultsComponent;
	}(Component);

	var APPLY_SYNONYMS = function APPLY_SYNONYMS(config) {
	  return objectSpread({
	    icon: config.sectionTitleIconName || config.sectionTitleIconUrl,
	    title: config.sectionTitle
	  }, config);
	};

	var AccordionResultsComponent =
	/*#__PURE__*/
	function (_VerticalResultsCompo) {
	  inheritsLoose(AccordionResultsComponent, _VerticalResultsCompo);

	  function AccordionResultsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _VerticalResultsCompo.call(this, config, systemConfig) || this;
	    /**
	     * base selector to use when finding DOM targets
	     * @type {string}
	     */

	    _this._selectorBase = config.selectorBase || '.js-yxt-AccordionResult';
	    /**
	     * collapsed state class
	     * @type {string}
	     */

	    _this.collapsedClass = config.collapsedClass || 'is-collapsed';
	    /**
	     * vertical config id is required for analytics
	     * @type {string|null}
	     */

	    _this.verticalConfigId = config.verticalConfigId || config._parentOpts.verticalConfigId || null;
	    return _this;
	  }
	  /**
	   * the component type
	   * @returns {string}
	   * @override
	   */


	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  AccordionResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/resultsaccordion';
	  }
	  /**
	   * overrides onMount to add bindings to change the height on click
	   * @returns {AccordionResultsComponent}
	   * @override
	   */
	  ;

	  var _proto = AccordionResultsComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    _VerticalResultsCompo.prototype.onMount.call(this); // NOTE(amullings): This is a hack, since currently components with siblings
	    // have no way of referring to their own element. We have to grab the first
	    // element since sections get added in reverse.


	    var selfEl = this._container.firstElementChild;
	    var accordionEls = DOM.queryAll(selfEl, this._selectorBase);

	    forEach$4(accordionEls).call(accordionEls, function (accordionEl) {
	      var toggleEl = DOM.query(accordionEl, _this2.toggleSelector());
	      var contentEl = DOM.query(accordionEl, _this2.bodySelector());

	      _this2.changeHeight(contentEl, accordionEl);

	      toggleEl.addEventListener('click', function () {
	        _this2.handleClick(accordionEl, toggleEl, contentEl);
	      });
	    });

	    return this;
	  };

	  _proto.setState = function setState(data) {
	    return _VerticalResultsCompo.prototype.setState.call(this, _extends_1({}, data, {
	      modifier: this.verticalConfigId
	    }));
	  }
	  /**
	   * click handler for the accordion toggle button
	   * @param wrapperEl {HTMLElement} the toggle container
	   * @param toggleEl {HTMLElement} the button
	   * @param contentEl {HTMLElement} the toggle target
	   */
	  ;

	  _proto.handleClick = function handleClick(wrapperEl, toggleEl, contentEl) {
	    var event = new AnalyticsEvent(this.isCollapsed(wrapperEl) ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
	      verticalConfigId: this.verticalConfigId,
	      entityId: toggleEl.dataset.entityId
	    });
	    wrapperEl.classList.toggle(this.collapsedClass);
	    this.changeHeight(contentEl, wrapperEl);
	    toggleEl.setAttribute('aria-expanded', this.isCollapsed(wrapperEl) ? 'false' : 'true');
	    this.analyticsReporter.report(event);
	  }
	  /**
	   * returns true if the element is currently collapsed
	   * @param wrapperEl {HTMLElement} the toggle container
	   * @returns {boolean}
	   */
	  ;

	  _proto.isCollapsed = function isCollapsed(wrapperEl) {
	    if (!wrapperEl) {
	      return false;
	    }

	    return wrapperEl.classList.contains(this.collapsedClass);
	  }
	  /**
	   * toggles the height between 0 and the content height for smooth animation
	   * @param targetEl {HTMLElement}
	   * @param wrapperEl {HTMLElement}
	   */
	  ;

	  _proto.changeHeight = function changeHeight(targetEl, wrapperEl) {
	    targetEl.style.height = (this.isCollapsed(wrapperEl) ? 0 : targetEl.scrollHeight) + "px";
	  }
	  /**
	   * helper for composing child element selectors
	   * @param child {string}
	   * @returns {string}
	   */
	  ;

	  _proto.buildSelector = function buildSelector(child) {
	    return "" + this._selectorBase + child;
	  }
	  /**
	   * helper for the toggle button selector
	   * @returns {string}
	   */
	  ;

	  _proto.toggleSelector = function toggleSelector() {
	    return this.buildSelector('-toggle');
	  }
	  /**
	   * helper for the content element selector
	   * @returns {string}
	   */
	  ;

	  _proto.bodySelector = function bodySelector() {
	    return this.buildSelector('-body');
	  };

	  createClass(AccordionResultsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'AccordionResults';
	    }
	  }]);

	  return AccordionResultsComponent;
	}(VerticalResultsComponent);

	var UniversalResultsComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(UniversalResultsComponent, _Component);

	  function UniversalResultsComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    _this.moduleId = StorageKeys.UNIVERSAL_RESULTS;
	    _this._appliedFilters = objectSpread({
	      show: true,
	      showFieldNames: false,
	      hiddenFields: ['builtin.entityType'],
	      resultsCountSeparator: '|',
	      showChangeFilters: false,
	      delimiter: '|',
	      labelText: "Filters applied to this search:"
	    }, config.appliedFilters);

	    var reRender = function reRender() {
	      return _this.setState(_this.core.globalStorage.getState(StorageKeys.UNIVERSAL_RESULTS) || {});
	    };

	    _this.core.globalStorage.on('update', StorageKeys.API_CONTEXT, reRender);

	    _this.core.globalStorage.on('update', StorageKeys.SESSIONS_OPT_IN, reRender);

	    return _this;
	  }

	  UniversalResultsComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/universalresults';
	  };

	  UniversalResultsComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  var _proto = UniversalResultsComponent.prototype;

	  _proto.setState = function setState(data, val) {
	    var sections = data.sections || [];
	    var query = this.core.globalStorage.getState(StorageKeys.QUERY);
	    var searchState = data.searchState || SearchStates.PRE_SEARCH;
	    return _Component.prototype.setState.call(this, _extends_1(data, {
	      isPreSearch: searchState === SearchStates.PRE_SEARCH,
	      isSearchLoading: searchState === SearchStates.SEARCH_LOADING,
	      isSearchComplete: searchState === SearchStates.SEARCH_COMPLETE,
	      showNoResults: sections.length === 0 && query,
	      query: query,
	      sections: sections
	    }, val));
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    if (data === void 0) {
	      data = {};
	    }

	    var verticals = this._config.verticals || this._config.config || {};
	    var verticalKey = data.verticalConfigId;

	    var childOpts = objectSpread({}, opts, {}, UniversalResultsComponent.getChildConfig(verticalKey, verticals[verticalKey] || {}, this._appliedFilters));

	    var childType = childOpts.useAccordion ? AccordionResultsComponent.type : type;
	    return _Component.prototype.addChild.call(this, data, childType, childOpts);
	  }
	  /**
	   * Applies synonyms and default config for a vertical in universal results.
	   * @param {string} verticalKey
	   * @param {Object} config
	   * @param {Object} topLevelAppliedFilters
	   * @returns {Object}
	   */
	  ;

	  UniversalResultsComponent.getChildConfig = function getChildConfig(verticalKey, config, topLevelAppliedFilters) {
	    return objectSpread({
	      // Tells vertical results it is in a universal results page.
	      isUniversal: true,
	      // Label for the vertical in the titlebar.
	      title: config.sectionTitle || verticalKey,
	      // Icon in the titlebar
	      icon: config.sectionTitleIconName || config.sectionTitleIconUrl || 'star',
	      // Url that links to the vertical search for this vertical.
	      verticalURL: config.url,
	      // Show a view more link by default, which also links to verticalURL.
	      viewMore: true,
	      // By default, the view more link has a label of 'View More'.
	      viewMoreLabel: defaultConfigOption(config, ['viewMoreLabel', 'viewAllText'], "View More"),
	      // Whether to show a result count.
	      showResultCount: false,
	      // Whether to use AccordionResults (DEPRECATED)
	      useAccordion: false
	    }, config, {
	      // Config for the applied filters bar. Must be placed after ...config to not override defaults.
	      appliedFilters: {
	        // Whether to display applied filters.
	        show: defaultConfigOption(config, ['appliedFilters.show', 'showAppliedFilters'], topLevelAppliedFilters.show),
	        // Whether to show field names, e.g. Location in Location: Virginia.
	        showFieldNames: defaultConfigOption(config, ['appliedFilters.showFieldNames', 'showFieldNames'], topLevelAppliedFilters.showFieldNames),
	        // Hide filters with these field ids.
	        hiddenFields: defaultConfigOption(config, ['appliedFilters.hiddenFields', 'hiddenFields'], topLevelAppliedFilters.hiddenFields),
	        // Symbol placed between the result count and the applied filters.
	        resultsCountSeparator: defaultConfigOption(config, ['appliedFilters.resultsCountSeparator', 'resultsCountSeparator'], topLevelAppliedFilters.resultsCountSeparator),
	        // Whether to show a 'change filters' link, linking back to verticalURL.
	        showChangeFilters: defaultConfigOption(config, ['appliedFilters.showChangeFilters', 'showChangeFilters'], topLevelAppliedFilters.showChangeFilters),
	        // The text for the change filters link.
	        changeFiltersText: defaultConfigOption(config, ['appliedFilters.changeFiltersText', 'changeFiltersText'], topLevelAppliedFilters.changeFiltersText),
	        // The symbol placed between different filters with the same fieldName. e.g. Location: Virginia | New York | Miami.
	        delimiter: defaultConfigOption(config, ['appliedFilters.delimiter'], topLevelAppliedFilters.delimiter),
	        // The aria-label given to the applied filters bar.
	        labelText: defaultConfigOption(config, ['appliedFilters.labelText'], topLevelAppliedFilters.labelText)
	      }
	    });
	  };

	  createClass(UniversalResultsComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'UniversalResults';
	    }
	  }]);

	  return UniversalResultsComponent;
	}(Component);

	var ceil$2 = Math.ceil;
	var floor$3 = Math.floor;

	// `Math.trunc` method
	// https://tc39.github.io/ecma262/#sec-math.trunc
	_export({ target: 'Math', stat: true }, {
	  trunc: function trunc(it) {
	    return (it > 0 ? floor$3 : ceil$2)(it);
	  }
	});

	var trunc = path.Math.trunc;

	var trunc$1 = trunc;

	var trunc$2 = trunc$1;

	var PaginationComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(PaginationComponent, _Component);

	  function PaginationComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    /**
	     * The vertical key to use for searches
	     * @type {string}
	     * @private
	     */

	    _this._verticalKey = config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;

	    if (typeof _this._verticalKey !== 'string') {
	      throw new AnswersComponentError('verticalKey not provided, but necessary for pagination', 'PaginationComponent');
	    }
	    /**
	     * The number of pages visible before/after the current page on desktop.
	     * @type {number}
	     * @private
	     */


	    _this._maxVisiblePagesDesktop = config.maxVisiblePagesDesktop === undefined ? 1 : config.maxVisiblePagesDesktop;
	    /**
	     * The number of pages visible before/after the current page on mobile.
	     * @type {number}
	     * @private
	     */

	    _this._maxVisiblePagesMobile = config.maxVisiblePagesMobile === undefined ? 1 : config.maxVisiblePagesMobile;
	    /**
	     * If true, displays the first and last page buttons
	     * @type {boolean}
	     * @private
	     */

	    _this._showFirstAndLastPageButtons = config.showFirstAndLastButton === undefined ? true : config.showFirstAndLastButton;
	    /**
	     * DEPRECATED
	     * @type {boolean}
	     * @private
	     */

	    _this._firstPageButtonEnabled = config.showFirst === undefined ? _this._showFirstAndLastPageButtons : config.showFirst;
	    /**
	     * DEPRECATED
	     * @type {boolean}
	     * @private
	     */

	    _this._lastPageButtonEnabled = config.showLast === undefined ? _this._showFirstAndLastPageButtons : config.showLast;
	    /**
	     * If true, always displays the page numbers for first and last page.
	     * @type {boolean}
	     * @private
	     */

	    _this._pinFirstAndLastPage = config.pinFirstAndLastPage === undefined ? false : config.pinFirstAndLastPage;
	    /**
	     * Icons object for first, previous, next, and last page icons.
	     * @type {{
	     *  nextButtonIcon: (string | undefined),
	     *  previousButtonIcon: (string | undefined),
	     *  firstButtonIcon: (string | undefined),
	     *  lastButtonIcon: (string | undefined),
	     * }}
	     * @private
	     */

	    _this._icons = config.icons;
	    /**
	     * Options to include with all analytic events sent by this component
	     * @type {object}
	     * @private
	     */

	    _this._analyticsOptions = {
	      verticalKey: _this._verticalKey
	    };
	    /**
	     * Label for a page of results.
	     * @type {string}
	     * @private
	     */

	    _this._pageLabel = config.pageLabel !== undefined ? config.pageLabel : "Page";
	    /**
	     * Function that is invoked on pagination
	     * @type {function(): {}}
	     * @private
	     */

	    _this._onPaginate = config.onPaginate || _this.scrollToTop;
	    /**
	     * The maximum number of results per page
	     * @type {number}
	     * @private
	     */

	    _this._limit = _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
	    var offset = _this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

	    _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));

	    _this.core.globalStorage.on('update', StorageKeys.SEARCH_OFFSET, function (offset) {
	      if (typeof offset === 'number') {
	        return;
	      }

	      _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, Number(offset));
	    });

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
	      if (results.searchState === SearchStates.SEARCH_COMPLETE) {
	        _this.setState();
	      }
	    });
	    /**
	     * Configuration for the behavior when there are no vertical results.
	     */


	    _this._noResults = config.noResults || _this.core.globalStorage.getState(StorageKeys.NO_RESULTS_CONFIG) || {};
	    return _this;
	  }

	  PaginationComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'results/pagination';
	  };

	  var _proto = PaginationComponent.prototype;

	  _proto.shouldShowControls = function shouldShowControls(results, limit) {
	    var hasResults = results.searchState === 'search-complete' && results.resultsCount > limit;
	    var isNormalResults = results.resultsContext === ResultsContext.NORMAL;
	    var isVisibleForNoResults = 'visible' in this._noResults ? this._noResults.visible : this._noResults.displayAllResults;
	    return hasResults && (isNormalResults || isVisibleForNoResults);
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this,
	        _context;

	    var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
	    var limit = this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).limit;
	    var showControls = this.shouldShowControls(results, limit);
	    var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;

	    if (!showControls) {
	      return;
	    }

	    var previousPageButton = DOM.query(this._container, '.js-yxt-Pagination-previous');
	    var nextPageButton = DOM.query(this._container, '.js-yxt-Pagination-next');

	    var maxPage = trunc$2((results.resultsCount - 1) / limit);

	    DOM.on(previousPageButton, 'click', function () {
	      return _this2.updatePage(offset - limit);
	    });
	    DOM.on(nextPageButton, 'click', function () {
	      return _this2.updatePage(offset + limit);
	    });

	    if (this._firstPageButtonEnabled) {
	      var firstPageButton = DOM.query(this._container, '.js-yxt-Pagination-first');
	      DOM.on(firstPageButton, 'click', function () {
	        return _this2.updatePage(0);
	      });
	    }

	    if (this._lastPageButtonEnabled) {
	      var lastPageButton = DOM.query(this._container, '.js-yxt-Pagination-last');
	      DOM.on(lastPageButton, 'click', function () {
	        return _this2.updatePage(maxPage * limit);
	      });
	    }

	    forEach$4(_context = DOM.queryAll('.js-yxt-Pagination-link')).call(_context, function (node) {
	      DOM.on(node, 'click', function () {
	        return _this2.updatePage((_parseInt$2(node.dataset.number) - 1) * limit);
	      });
	    });
	  };

	  _proto.updatePage = function updatePage(offset) {
	    var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
	    var currentOffset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
	    var currentPageNumber = currentOffset / this._limit + 1;
	    var newPageNumber = offset / this._limit + 1;

	    var maxPageCount = this._computeMaxPage(results.resultsCount);

	    this._onPaginate(newPageNumber, currentPageNumber, maxPageCount);

	    this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, offset);
	    this.core.persistentStorage.set(StorageKeys.SEARCH_OFFSET, offset);
	    this.core.verticalPage(this._verticalKey);
	  };

	  _proto.scrollToTop = function scrollToTop() {
	    document.documentElement.scrollTop = 0; // Safari

	    document.body.scrollTop = 0;
	  }
	  /**
	   * Computes the highest page number for a given amount of results
	   * @param {number} resultsCount
	   */
	  ;

	  _proto._computeMaxPage = function _computeMaxPage(resultsCount) {
	    return trunc$2((resultsCount - 1) / this._limit) + 1;
	  }
	  /**
	   * Pagination should evenly add page numbers in the "forward" and "backward" directions, unless
	   * one side has reached the max/min value, in which case the remaining side should be the only
	   * one to get more pages.
	   * @param {number} pageNumber the current page's number
	   * @param {number} maxPage the highest page number, acts as the upper bound
	   * @param {number} limit the maximum total number of pages that are allocated
	   * @returns {Array<number>} the backLimit and frontLimit, respectively
	   */
	  ;

	  _proto._allocate = function _allocate(pageNumber, maxPage, limit) {
	    var backLimit = pageNumber;
	    var frontLimit = pageNumber;

	    for (var i = 0; i < limit; i++) {
	      if (i % 2 === 0) {
	        if (backLimit > 0) {
	          backLimit--;
	        } else if (frontLimit < maxPage) {
	          frontLimit++;
	        }
	      } else {
	        if (frontLimit < maxPage) {
	          frontLimit++;
	        } else if (backLimit > 0) {
	          backLimit--;
	        }
	      }
	    }

	    return [backLimit, frontLimit];
	  }
	  /**
	   * Creates an object representing the view state of the page numbers and ellipses
	   * @param {number} pageNumber refers to the page number, not the page index
	   * @param {number} maxPage the highest page number, which also represents the total page count
	   * @returns {Object} the view-model for the page numbers displayed in the component, including whether to display ellipses
	   */
	  ;

	  _proto._createPageNumberViews = function _createPageNumberViews(pageNumber, maxPage) {
	    var _this$_allocate = this._allocate(pageNumber, maxPage, this._maxVisiblePagesMobile),
	        mobileBackLimit = _this$_allocate[0],
	        mobileFrontLimit = _this$_allocate[1];

	    var _this$_allocate2 = this._allocate(pageNumber, maxPage, this._maxVisiblePagesDesktop),
	        desktopBackLimit = _this$_allocate2[0],
	        desktopFrontLimit = _this$_allocate2[1];

	    var pageNumberViews = [];

	    for (var i = 1; i <= maxPage; i++) {
	      var num = {
	        number: i
	      };

	      if (i === pageNumber) {
	        num.active = true;

	        if (this._maxVisiblePagesDesktop > 1) {
	          num.activeDesktop = true;
	        }

	        if (this._maxVisiblePagesMobile > 1) {
	          num.activeMobile = true;
	        }
	      } else {
	        if (i <= mobileBackLimit || i > mobileFrontLimit) {
	          num.mobileHidden = true;
	        }

	        if (i <= desktopBackLimit || i > desktopFrontLimit) {
	          num.desktopHidden = true;
	        }
	      }

	      pageNumberViews.push(num);
	    }

	    return {
	      pinnedNumbers: {
	        mobileBack: this._pinFirstAndLastPage && mobileBackLimit > 0,
	        mobileFront: this._pinFirstAndLastPage && mobileFrontLimit < maxPage,
	        desktopBack: this._pinFirstAndLastPage && desktopBackLimit > 0,
	        desktopFront: this._pinFirstAndLastPage && desktopFrontLimit < maxPage
	      },
	      ellipses: {
	        mobileBack: this._pinFirstAndLastPage && mobileBackLimit > 1,
	        mobileFront: this._pinFirstAndLastPage && mobileFrontLimit < maxPage - 1,
	        desktopBack: this._pinFirstAndLastPage && desktopBackLimit > 1,
	        desktopFront: this._pinFirstAndLastPage && desktopFrontLimit < maxPage - 1
	      },
	      pageNumberViews: pageNumberViews
	    };
	  };

	  _proto.setState = function setState(data) {
	    var results = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
	    var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
	    var pageNumber = offset / this._limit + 1;
	    var isMoreResults = results.resultsCount > offset + this._limit;

	    var maxPage = this._computeMaxPage(results.resultsCount);

	    var _this$_createPageNumb = this._createPageNumberViews(pageNumber, maxPage),
	        pinnedNumbers = _this$_createPageNumb.pinnedNumbers,
	        ellipses = _this$_createPageNumb.ellipses,
	        pageNumberViews = _this$_createPageNumb.pageNumberViews;

	    return _Component.prototype.setState.call(this, objectSpread({
	      showControls: this.shouldShowControls(results, this._limit),
	      firstPageButtonEnabled: this._firstPageButtonEnabled,
	      lastPageButtonEnabled: this._lastPageButtonEnabled,
	      pageNumber: pageNumber,
	      pageLabel: this._pageLabel,
	      showFirstPageButton: pageNumber > 2,
	      showPreviousPageButton: pageNumber > 1,
	      showNextPageButton: isMoreResults,
	      showLastPageButton: pageNumber < maxPage - 1,
	      icons: this._icons,
	      pageNumbers: pageNumberViews,
	      pinnedNumbers: pinnedNumbers,
	      ellipses: ellipses,
	      pinPages: this._pinFirstAndLastPage,
	      nextPage: pageNumber + 1,
	      maxPage: maxPage
	    }, data));
	  };

	  createClass(PaginationComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'Pagination';
	    }
	  }]);

	  return PaginationComponent;
	}(Component);

	var CTACollectionComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(CTACollectionComponent, _Component);

	  function CTACollectionComponent(config, systemConfig) {
	    var _context, _context2;

	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;
	    var data = _this._config.data || {};
	    /**
	     * Result data
	     * @type {Result}
	     */

	    _this.result = data.result || {};
	    /**
	     * Whether the DOM should include legacy class names
	     * @type {boolean}
	     */

	    _this.includeLegacyClasses = _this._config.includeLegacyClasses || false;
	    /**
	     * Vertical key for the search.
	     * @type {string}
	     */

	    _this.verticalKey = data.verticalKey;
	    /**
	     * Whether this cta is part of a universal search.
	     * @type {boolean}
	     */

	    _this.isUniversal = _this._config.isUniversal || false;
	    /**
	     * Either a function that spits out an array of CTA config objects or an array of CTA config objects
	     * or api fieldnames
	     * @type {Function|Array<Object|string>}
	     */

	    var callsToAction = _this._config.callsToAction || [];
	    /**
	     * The config for each calls to action component to render.
	     * @type {Array<Object>}
	     */

	    _this.callsToAction = CTACollectionComponent.resolveCTAMapping.apply(CTACollectionComponent, concat$4(_context = [_this.result._raw]).call(_context, callsToAction)); // Assign any extra cta config that does not come from the cta mappings.

	    var _ctaModifiers = _this._config._ctaModifiers || [];

	    if (_this.callsToAction.length === 1) {
	      _ctaModifiers.push('solo');
	    }

	    _this.callsToAction = map$2(_context2 = _this.callsToAction).call(_context2, function (cta) {
	      return objectSpread({
	        eventOptions: _this.defaultEventOptions(_this.result),
	        _ctaModifiers: _ctaModifiers,
	        includeLegacyClasses: _this.includeLegacyClasses
	      }, cta);
	    });
	    return _this;
	  }
	  /**
	   * Handles resolving ctas from a cta mapping which are either
	   * 1. a function that returns a cta's config
	   * 2. an object that has a per-attribute mapping of either a
	   *    a) static value
	   *    b) function that takes in resut data and returns the given attributes value
	   * Note: Intentionally does not allow nesting functions.
	   * @param {Object} result
	   * @param {Function|...(Object|string)} ctas
	   * @returns {Array<Object>}
	   */


	  CTACollectionComponent.resolveCTAMapping = function resolveCTAMapping(result) {
	    var parsedCTAs = [];

	    for (var _len = arguments.length, ctas = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      ctas[_key - 1] = arguments[_key];
	    }

	    map$2(ctas).call(ctas, function (ctaMapping) {
	      if (typeof ctaMapping === 'function') {
	        parsedCTAs = concat$4(parsedCTAs).call(parsedCTAs, ctaMapping(result));
	      } else if (typeof ctaMapping === 'object') {
	        var ctaObject = objectSpread({}, ctaMapping);

	        for (var _i = 0, _Object$entries = entries$2(ctaMapping); _i < _Object$entries.length; _i++) {
	          var _Object$entries$_i = _Object$entries[_i],
	              ctaAttribute = _Object$entries$_i[0],
	              attributeMapping = _Object$entries$_i[1];

	          if (typeof attributeMapping === 'function') {
	            ctaObject[ctaAttribute] = attributeMapping(result);
	          }
	        }

	        parsedCTAs.push(ctaObject);
	      }
	    });

	    parsedCTAs = filter$4(parsedCTAs).call(parsedCTAs, function (cta) {
	      return cta;
	    });

	    forEach$4(parsedCTAs).call(parsedCTAs, function (cta) {
	      if (!cta.label && !cta.url) {
	        console.warn('Call to Action:', cta, 'is missing both a label and url attribute and is being automatically hidden');
	      } else if (!cta.label) {
	        console.warn('Call to Action:', cta, 'is missing a label attribute and is being automatically hidden');
	      } else if (!cta.url) {
	        console.warn('Call to Action:', cta, 'is missing a url attribute and is being automatically hidden');
	      }
	    });

	    return filter$4(parsedCTAs).call(parsedCTAs, function (cta) {
	      var _context3, _context4;

	      return cta.url && trim$3(_context3 = cta.url).call(_context3) && cta.label && trim$3(_context4 = cta.label).call(_context4);
	    });
	  };

	  CTACollectionComponent.hasCTAs = function hasCTAs(result, ctas) {
	    var _context5;

	    return CTACollectionComponent.resolveCTAMapping.apply(CTACollectionComponent, concat$4(_context5 = [result]).call(_context5, ctas)).length > 0;
	  };

	  var _proto = CTACollectionComponent.prototype;

	  _proto.defaultEventOptions = function defaultEventOptions(result) {
	    var eventOptions = {
	      verticalKey: this.verticalKey,
	      searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
	    };

	    if (result._raw.id) {
	      eventOptions.entityId = result._raw.id;
	    }

	    return eventOptions;
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      includeLegacyClasses: this.includeLegacyClasses,
	      callsToAction: this.callsToAction
	    }));
	  };

	  CTACollectionComponent.defaultTemplateName = function defaultTemplateName() {
	    return 'ctas/ctacollection';
	  };

	  createClass(CTACollectionComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'CTACollection';
	    }
	  }]);

	  return CTACollectionComponent;
	}(Component);

	var StandardCardConfig = function StandardCardConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  _extends_1(this, config);

	  var data = config.data || {};
	  /**
	   * The result data
	   * @type {Result}
	   */

	  var result = data.result || {};
	  /**
	   * The raw profile data
	   * @type {Object}
	   */

	  var rawResult = result._raw || {};
	  /**
	   * The dataMappings attribute of the config
	   * is either a function that returns additional config for
	   * a card or an object that is the additional config.
	   */

	  _extends_1(this, CardComponent.applyDataMappings(rawResult, config.dataMappings || {}));
	  /**
	   * The result data
	   * @type {Result}
	   */


	  this.result = config.data || {};
	  /**
	   * Title for the card
	   * @type {string}
	   */

	  this.title = this.title || result.title || rawResult.name || '';
	  /**
	   * Details for the card
	   * @type {string}
	   */

	  this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
	  /**
	   * Url when you click the title
	   * @type {string}
	   */

	  this.url = this.url === null ? '' : this.url || result.link || rawResult.website;
	  /**
	   * If showMoreLimit is set, the text that displays beneath it
	   * @type {string}
	   */

	  this.showMoreText = this.showMoreText || "Show More";
	  /**
	   * If showMoreLimit is set, the text that displays beneath it when all text is shown
	   * @type {string}
	   */

	  this.showLessText = this.showLessText || "Show Less";
	  /**
	   * Add a show more link if this number of characters is shown,
	   * and truncate the last 3 characters with an ellipses.
	   * Clicking show more should expand the results (but no “show less” link).
	   * @type {number}
	   */

	  this.showMoreLimit = this.showMoreLimit;
	  /**
	   * The target attribute for the title link.
	   * @type {string}
	   */

	  this.target = this.target;
	  /**
	   * Image url to display
	   * @type {string}
	   */

	  this.image = this.image;
	  /**
	   * Subtitle
	   * @type {string}
	   */

	  this.subtitle = this.subtitle;
	  /**
	   * Whether a 'show more' toggle button needs to be rendered at all
	   */

	  var detailsOverLimit = this.details.length > this.showMoreLimit;
	  this.showToggle = this.showMoreLimit && detailsOverLimit;
	  /**
	   * Either a function that spits out an array of CTA config objects or an array of CTA config objects
	   * or api fieldnames
	   * @type {Function|Array<Object|string>}
	   */

	  this.callsToAction = this.callsToAction || [];
	  /**
	   * Whether to show the ordinal of the card in the results.
	   * @type {boolean}
	   */

	  this.showOrdinal = this.showOrdinal || false;
	  /**
	   * Whether this card is part of a universal search.
	   * @type {boolean}
	   */

	  this.isUniversal = this.isUniversal || false;
	  /**
	   * The index of the card.
	   * @type {number}
	   */

	  this._index = config._index || 0;
	};
	/**
	 * Card components expect to receive a data config option, containing data regarding entity result
	 * each card is assigned to, including all field data in data._raw.
	 */


	var StandardCardComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(StandardCardComponent, _Component);

	  function StandardCardComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, new StandardCardConfig(config), systemConfig) || this;
	    _this.hideExcessDetails = _this._config.showToggle;
	    /**
	     * @type {Object}
	     */

	    var data = config.data || {};
	    /**
	     * Vertical key for the search.
	     * @type {string}
	     */

	    _this.verticalKey = data.verticalKey;
	    /**
	     * The result data
	     * @type {Result}
	     */

	    _this.result = data.result || {};
	    return _this;
	  }

	  var _proto = StandardCardComponent.prototype;

	  _proto.setState = function setState(data) {
	    var details = this._config.details;

	    if (this._config.showMoreLimit) {
	      details = this.hideExcessDetails ? this._config.details.substring(0, this._config.showMoreLimit) + "..." : this._config.details;
	    }

	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      hideExcessDetails: this.hideExcessDetails,
	      result: this.result,
	      hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction),
	      entityId: this.result._raw.id,
	      verticalKey: this.verticalKey,
	      details: details
	    }));
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    if (this._config.showToggle) {
	      var el = DOM.query(this._container, '.js-yxt-StandardCard-toggle');
	      DOM.on(el, 'click', function () {
	        _this2.hideExcessDetails = !_this2.hideExcessDetails;

	        _this2.setState();
	      });
	    }
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    if (type === CTACollectionComponent.type) {
	      var updatedData = {
	        verticalKey: this.verticalKey,
	        result: data
	      };
	      return _Component.prototype.addChild.call(this, updatedData, type, objectSpread({
	        callsToAction: this._config.callsToAction,
	        isUniversal: this._config.isUniversal,
	        _ctaModifiers: ['StandardCard']
	      }, opts));
	    }

	    return _Component.prototype.addChild.call(this, data, type, opts);
	  };

	  StandardCardComponent.defaultTemplateName = function defaultTemplateName() {
	    return cardTemplates.Standard;
	  };

	  StandardCardComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(StandardCardComponent, null, [{
	    key: "type",
	    get: function get() {
	      return cardTypes.Standard;
	    }
	  }]);

	  return StandardCardComponent;
	}(Component);

	var AccordionCardConfig = function AccordionCardConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  _extends_1(this, config);

	  var data = config.data || {};
	  /**
	   * The result data
	   * @type {Result}
	   */

	  var result = data.result || {};
	  /**
	   * The raw profile data
	   * @type {Object}
	   */

	  var rawResult = result._raw || {};
	  /**
	   * The dataMappings attribute of the config
	   * is either a function that returns additional config for
	   * a card or an object that is the additional config.
	   */

	  var dataMappings = config.dataMappings || {};

	  _extends_1(this, CardComponent.applyDataMappings(rawResult, dataMappings));
	  /**
	   * Vertical key for the card, added to analytics events sent by this component.
	   * @type {string}
	   */


	  this.verticalKey = config.verticalKey;
	  /**
	   * @type {string}
	   */

	  this.title = this.title || result.title || rawResult.name || '';
	  /**
	   * @type {string}
	   */

	  this.subtitle = this.subtitle;
	  /**
	   * @type {string}
	   */

	  this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
	  /**
	   * If expanded is true the first accordion in vertical/universal results renders on page load expanded.
	   * @type {boolean}
	   */

	  this.expanded = this.expanded || false;
	  /**
	   * Either a function that spits out an array of CTA config objects or an array of CTA config objects
	   * or api fieldnames
	   * @type {Function|Array<Object|string>}
	   */

	  this.callsToAction = this.callsToAction || [];
	  /**
	   * Whether this card is part of a universal search. Used in analytics.
	   * @type {boolean}
	   */

	  this.isUniversal = config.isUniversal || false;
	};

	var AccordionCardComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(AccordionCardComponent, _Component);

	  function AccordionCardComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, new AccordionCardConfig(config), systemConfig) || this;
	    /**
	     * Whether the accordion is collapsed or not.
	     * Defaults to true only if the expanded option is true
	     * and this is the first card in the results.
	     * @type {boolean}
	     */

	    _this.isExpanded = _this._config.expanded && config._index === 0;
	    /**
	     * @type {Object}
	     */

	    var data = config.data || {};
	    /**
	     * Vertical key for the card, added to analytics events sent by this component.
	     * @type {string}
	     */

	    _this.verticalKey = data.verticalKey;
	    /**
	     * The result data, sent to children CTA Components that need this.
	     * @type {Result}
	     */

	    _this.result = data.result || {};
	    return _this;
	  }

	  var _proto = AccordionCardComponent.prototype;

	  _proto.setState = function setState(data) {
	    var id = this.result.id || this.result.ordinal;
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      result: this.result,
	      isExpanded: this.isExpanded,
	      id: this.name + "-" + id + "-" + this.verticalKey,
	      hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction)
	    }));
	  }
	  /**
	   * Click handler for the accordion toggle button
	   * This is used over set state because it's a lot smoother, since
	   * it doesn't rip the whole component off of the page and remount it.
	   * Also reports an analytics event.
	   * @param {HTMLElement} toggleEl the toggle element
	   * @param {HTMLElement} accordionBodyEl the .js-yxt-AccordionCard-body element
	   * @param {HTMLElement} accordionEl the root accordion element
	   */
	  ;

	  _proto.handleClick = function handleClick(toggleEl, accordionBodyEl, accordionEl) {
	    this.isExpanded = !this.isExpanded;
	    accordionEl.classList.toggle('yxt-AccordionCard--expanded');
	    accordionBodyEl.style.height = (this.isExpanded ? accordionBodyEl.scrollHeight : 0) + "px";
	    toggleEl.setAttribute('aria-expanded', this.isExpanded ? 'true' : 'false');
	    accordionBodyEl.setAttribute('aria-hidden', this.isExpanded ? 'false' : 'true');
	    var event = new AnalyticsEvent(this.isExpanded ? 'ROW_EXPAND' : 'ROW_COLLAPSE').addOptions({
	      verticalKey: this.verticalKey,
	      entityId: this.result._raw.id,
	      searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
	    });
	    this.analyticsReporter.report(event);
	  };

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    if (this._config.details) {
	      var toggleEl = DOM.query(this._container, '.js-yxt-AccordionCard-toggle');
	      var accordionBodyEl = DOM.query(this._container, '.js-yxt-AccordionCard-body');
	      var accordionEl = DOM.query(this._container, '.js-yxt-AccordionCard');
	      accordionBodyEl.style.height = (this.isExpanded ? accordionBodyEl.scrollHeight : 0) + "px";
	      DOM.on(toggleEl, 'click', function () {
	        return _this2.handleClick(toggleEl, accordionBodyEl, accordionEl);
	      });
	    }
	  }
	  /**
	   * For passing functions to the config of children {@link CTACollectionComponent}
	   */
	  ;

	  _proto.addChild = function addChild(data, type, opts) {
	    if (type === CTACollectionComponent.type) {
	      var updatedData = {
	        verticalKey: this.verticalKey,
	        result: data
	      };
	      return _Component.prototype.addChild.call(this, updatedData, type, objectSpread({
	        callsToAction: this._config.callsToAction,
	        _ctaModifiers: ['AccordionCard'],
	        isUniversal: this._config.isUniversal
	      }, opts));
	    }

	    return _Component.prototype.addChild.call(this, data, type, opts);
	  };

	  AccordionCardComponent.defaultTemplateName = function defaultTemplateName() {
	    return cardTemplates.Accordion;
	  };

	  AccordionCardComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(AccordionCardComponent, null, [{
	    key: "type",
	    get: function get() {
	      return cardTypes.Accordion;
	    }
	  }]);

	  return AccordionCardComponent;
	}(Component);

	var LegacyCardConfig = function LegacyCardConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  _extends_1(this, config);

	  var data = config.data || {};
	  /**
	   * The result data
	   * @type {Result}
	   */

	  var result = data.result || {};
	  /**
	   * The raw profile data
	   * @type {Object}
	   */

	  var rawResult = result._raw || {};
	  /**
	   * The dataMappings attribute of the config
	   * is either a function that returns additional config for
	   * a card or an object that is the additional config.
	   */

	  _extends_1(this, CardComponent.applyDataMappings(rawResult, config.dataMappings || {}));
	  /**
	   * The result data
	   * @type {Result}
	   */


	  this.result = config.data || {};
	  /**
	   * Title for the card
	   * @type {string}
	   */

	  this.title = this.title || result.title || rawResult.name || '';
	  /**
	   * Details for the card
	   * @type {string}
	   */

	  this.details = this.details === null ? null : this.details || result.details || rawResult.description || '';
	  /**
	   * Url when you click the title
	   * @type {string}
	   */

	  this.url = this.url === null ? '' : this.url || result.link || rawResult.website;
	  /**
	   * The target attribute for the title link.
	   * @type {string}
	   */

	  this.target = this.target;
	  /**
	   * Image url to display
	   * @type {string}
	   */

	  this.image = this.image;
	  /**
	   * Subtitle
	   * @type {string}
	   */

	  this.subtitle = this.subtitle;
	  /**
	   * Either a function that spits out an array of CTA config objects or an array of CTA config objects
	   * or api fieldnames
	   * @type {Function|Array<Object|string>}
	   */

	  this.callsToAction = this.callsToAction || [];
	  /**
	   * Whether to show the ordinal of the card in the results.
	   * @type {boolean}
	   */

	  this.showOrdinal = this.showOrdinal || false;
	  /**
	   * Whether this card is part of a universal search.
	   * @type {boolean}
	   */

	  this.isUniversal = this.isUniversal || false;
	  /**
	   * The index of the card.
	   * @type {number}
	   */

	  this._index = config._index || 0;
	};
	/**
	 * Card components expect to receive a data config option, containing data regarding entity result
	 * each card is assigned to, including all field data in data._raw.
	 */


	var LegacyCardComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(LegacyCardComponent, _Component);

	  function LegacyCardComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, new LegacyCardConfig(config), systemConfig) || this;
	    /**
	     * @type {Object}
	     */

	    var data = config.data || {};
	    /**
	     * Vertical key for the search.
	     * @type {string}
	     */

	    _this.verticalKey = data.verticalKey;
	    /**
	     * The result data
	     * @type {Result}
	     */

	    _this.result = data.result || {};
	    return _this;
	  }

	  var _proto = LegacyCardComponent.prototype;

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      eventOptions: this._legacyEventOptions(this.result._raw.id, this.result.link),
	      result: this.result,
	      hasCTAs: CTACollectionComponent.hasCTAs(this.result._raw, this._config.callsToAction),
	      entityId: this.result._raw.id,
	      verticalKey: this.verticalKey
	    }));
	  };

	  _proto._legacyEventOptions = function _legacyEventOptions(entityId, url) {
	    var options = {
	      verticalConfigId: this.verticalKey,
	      searcher: this._config.isUniversal ? 'UNIVERSAL' : 'VERTICAL'
	    };

	    if (entityId) {
	      options.entityId = entityId;
	    } else {
	      options.url = url;
	    }

	    return stringify$2(options);
	  };

	  _proto.addChild = function addChild(data, type, opts) {
	    if (type === CTACollectionComponent.type) {
	      var updatedData = {
	        verticalKey: this.verticalKey,
	        result: data
	      };
	      return _Component.prototype.addChild.call(this, updatedData, type, objectSpread({
	        callsToAction: this._config.callsToAction,
	        isUniversal: this._config.isUniversal,
	        _ctaModifiers: ['LegacyCard'],
	        includeLegacyClasses: true
	      }, opts));
	    }

	    return _Component.prototype.addChild.call(this, data, type, opts);
	  };

	  LegacyCardComponent.defaultTemplateName = function defaultTemplateName() {
	    return cardTemplates.Legacy;
	  };

	  LegacyCardComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  createClass(LegacyCardComponent, null, [{
	    key: "type",
	    get: function get() {
	      return cardTypes.Legacy;
	    }
	  }]);

	  return LegacyCardComponent;
	}(Component);

	/**
	 * Configurable options for the component
	 * @type {Object}
	 */

	var DEFAULT_CONFIG$6 = {
	  /**
	   * The entity identifier that the question is associated with.
	   * This is typically an organization object
	   * @type {number}
	   */
	  'entityId': null,

	  /**
	   * The main CSS selector used to reference the form for the component.
	   * @type {string} CSS selector
	   */
	  'formSelector': 'form',

	  /**
	   * An optional label to use for the e-mail address input
	   * @type {string}
	   */
	  'emailLabel': "Email",

	  /**
	   * An optional label to use for the name input
	   * @type {string}
	   */
	  'nameLabel': "Name",

	  /**
	   * An optional label to use for the question
	   * @type {string}
	   */
	  'questionLabel': "Question",

	  /**
	   * An optional label to use for the Privacy Policy
	   * @type {string}
	   */
	  'privacyPolicyText': "By submitting my email address, I consent to being contacted via email at the address provided.",

	  /**
	   * The label to use for the Submit button
	   * @type {string}
	   */
	  'buttonLabel': "Submit",

	  /**
	   * The title to display in the title bar
	   * @type {string}
	   */
	  'sectionTitle': "Ask a Question",

	  /**
	   * The description to display in the title bar
	   * @type {string}
	   */
	  'teaser': "Can’t find what you're looking for? Ask a question below.",

	  /**
	   * The name of the icon to use in the title bar
	   * @type {string}
	   */
	  'sectionTitleIconName': 'support',

	  /**
	   * The text to display in the feedback form ahead of the Question input
	   * @type {string}
	   */
	  'description': "Enter your question and contact information, and we'll get back to you with a response shortly.",

	  /**
	   * The placeholder text for required inputs
	   * @type {string}
	   */
	  'requiredInputPlaceholder': "(required)",

	  /**
	   * The placeholder text for the question text area
	   * @type {string}
	   */
	  'questionInputPlaceholder': "Enter your question here",

	  /**
	   * The confirmation text to display after successfully submitting feedback
	   * @type {string}
	   */
	  'questionSubmissionConfirmationText': "Thank you for your question!",

	  /**
	   * The default privacy policy url label
	   * @type {string}
	  */
	  'privacyPolicyUrlLabel': "Learn more here.",

	  /**
	   * The default privacy policy url
	   * @type {string}
	   */
	  'privacyPolicyUrl': '',

	  /**
	   * The default privacy policy error text, shown when the user does not agree
	   * @type {string}
	   */
	  'privacyPolicyErrorText': "* You must agree to the privacy policy to submit a question.",

	  /**
	   * The default email format error text, shown when the user submits an invalid email
	   * @type {string}
	   */
	  'emailFormatErrorText': "* Please enter a valid email address.",

	  /**
	   * The default network error text, shown when there is an issue with the QA Submission
	   * request.
	   * @type {string}
	   */
	  'networkErrorText': "We're sorry, an error occurred.",

	  /**
	   * Whether or not this component is expanded by default.
	   * @type {boolean}
	   */
	  'expanded': true
	};
	/**
	 * QuestionSubmissionComponent is a component that creates a form
	 * thats displayed whenever a query is run. It enables the user
	 * to submit questions that they cant find the answer for.
	 */

	var QuestionSubmissionComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(QuestionSubmissionComponent, _Component);

	  function QuestionSubmissionComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, _extends_1({}, DEFAULT_CONFIG$6, config), systemConfig) || this;
	    /**
	     * Reference to the storage model
	     * @type {string}
	     */

	    _this.moduleId = StorageKeys.QUESTION_SUBMISSION;
	    /**
	     * Reference to the locale as set in the global config
	     * @type {string}
	     */

	    _this.locale = _this.core.globalStorage.getState(StorageKeys.LOCALE);
	    /**
	     * NOTE(billy) if this is a pattern we want to follow for configuration
	     * we should bake it into the core class.
	     */

	    _this.validateConfig();
	    /**
	     * The QuestionSubmission component should be rendered only once a search has completed. If the
	     * search results are still loading, the component should not be displayed.
	     */


	    var onResultsUpdate = function onResultsUpdate(results) {
	      if (results.searchState !== SearchStates.SEARCH_LOADING) {
	        var questionText = _this.core.globalStorage.getState(StorageKeys.QUERY);

	        _this.setState(new QuestionSubmission({
	          questionText: questionText,
	          expanded: _this._config.expanded
	        }));
	      } else {
	        _this.unMount();
	      }
	    };

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, onResultsUpdate);

	    _this.core.globalStorage.on('update', StorageKeys.UNIVERSAL_RESULTS, onResultsUpdate);

	    return _this;
	  }
	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */


	  QuestionSubmissionComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'questions/questionsubmission';
	  }
	  /**
	   * The public interface alias for the component
	   * @returns {string}
	   * @override
	   */
	  ;

	  var _proto = QuestionSubmissionComponent.prototype;

	  /**
	   * validationConfig contains a bunch of rules
	   * that are used to validate aginst configuration provided by the user
	   */
	  _proto.validateConfig = function validateConfig() {
	    if (this._config.entityId === null || this._config.entityId === undefined) {
	      throw new AnswersComponentError('`entityId` is a required configuration option for Question Submission', 'QuestionSubmission');
	    }
	  };

	  _proto.beforeMount = function beforeMount() {
	    // Avoid mounting the component if theres no data
	    // Note, 1 because `config` is always part of the state.
	    return keys$5(this.getState()).length > 1;
	  };

	  _proto.onMount = function onMount() {
	    var triggerEl = DOM.query(this._container, '.js-content-visibility-toggle');

	    if (triggerEl !== null) {
	      this.bindFormToggle(triggerEl);
	    }

	    var formEl = DOM.query(this._container, this._config.formSelector);

	    if (formEl === null) {
	      return;
	    }

	    this.bindFormFocus(formEl);
	    this.bindFormSubmit(formEl);
	  }
	  /**
	   * bindFormFocus will wire up the DOM focus event to serverside reporting
	   * @param {HTMLElement} formEl
	   */
	  ;

	  _proto.bindFormFocus = function bindFormFocus(formEl) {
	    var _this2 = this;

	    if (this.analyticsReporter === null) {
	      return;
	    }

	    var questionText = DOM.query(formEl, '.js-question-text');
	    DOM.on(questionText, 'focus', function () {
	      _this2.analyticsReporter.report(_this2.getAnalyticsEvent('QUESTION_FOCUS'));
	    });
	  }
	  /**
	   * bindFormSubmit handles submitting the question to the server,
	   * and submits an event to serverside reporting
	   * @param {HTMLElement} formEl
	   */
	  ;

	  _proto.bindFormSubmit = function bindFormSubmit(formEl) {
	    var _this3 = this;

	    DOM.on(formEl, 'submit', function (e) {
	      e.preventDefault();

	      _this3.analyticsReporter.report(_this3.getAnalyticsEvent('QUESTION_SUBMIT')); // TODO(billy) we probably want to disable the form from being submitted twice


	      var errors = _this3.validate(formEl);

	      var formData = _this3.parse(formEl);

	      if (keys$5(errors).length) {
	        return _this3.setState(new QuestionSubmission(formData, errors));
	      }

	      _this3.core.submitQuestion({
	        'entityId': _this3._config.entityId,
	        'questionLanguage': _this3.locale,
	        'site': 'FIRSTPARTY',
	        'name': formData.name,
	        'email': formData.email,
	        'questionText': formData.questionText,
	        'questionDescription': formData.questionDescription
	      })["catch"](function (error) {
	        _this3.setState(new QuestionSubmission(formData, {
	          'network': 'We\'re sorry, an error occurred.'
	        }));

	        throw error;
	      });
	    });
	  }
	  /**
	   * bindFormToggle handles expanding and mimimizing the component's form.
	   * @param {HTMLElement} triggerEl
	   */
	  ;

	  _proto.bindFormToggle = function bindFormToggle(triggerEl) {
	    var _this4 = this;

	    DOM.on(triggerEl, 'click', function (e) {
	      var formData = _this4.getState();

	      _this4.setState(new QuestionSubmission(objectSpread({}, formData, {
	        'expanded': !formData.questionExpanded,
	        'submitted': formData.questionSubmitted
	      }), formData.errors));
	    });
	  }
	  /**
	   * Takes the form, and builds a object that represents the input names
	   * and text fields.
	   * @param {HTMLElement} formEl
	   * @returns {object}
	   */
	  ;

	  _proto.parse = function parse(formEl) {
	    var inputFields = DOM.queryAll(formEl, '.js-question-field');

	    if (!inputFields || inputFields.length === 0) {
	      return {};
	    }

	    var obj = {};

	    for (var i = 0; i < inputFields.length; i++) {
	      var val = inputFields[i].value;

	      if (inputFields[i].type === 'checkbox') {
	        val = inputFields[i].checked;
	      }

	      obj[inputFields[i].name] = val;
	    }

	    return obj;
	  }
	  /**
	   * Validates the fields for correct formatting
	   * @param {HTMLElement} formEl
	   * @returns {Object} errors object if any errors found
	   */
	  ;

	  _proto.validate = function validate(formEl) {
	    var errors = {};
	    var fields = DOM.queryAll(formEl, '.js-question-field');

	    for (var i = 0; i < fields.length; i++) {
	      if (!fields[i].checkValidity()) {
	        if (i === 0) {
	          // set focus state on first error
	          fields[i].focus();
	        }

	        switch (fields[i].name) {
	          case 'email':
	            errors['emailError'] = true;

	            if (!fields[i].validity.valueMissing) {
	              errors['emailErrorText'] = this._config.emailFormatErrorText;
	            }

	            break;

	          case 'name':
	            errors['nameError'] = true;
	            break;

	          case 'privacyPolicy':
	            errors['privacyPolicyErrorText'] = this._config.privacyPolicyErrorText;
	            errors['privacyPolicyError'] = true;
	            break;

	          case 'questionText':
	            errors['questionTextError'] = true;
	            break;
	        }
	      }
	    }

	    return errors;
	  }
	  /**
	   * Returns an options object describing the context of a reportable event
	   */
	  ;

	  _proto.getAnalyticsEvent = function getAnalyticsEvent(eventType) {
	    var analyticsEvent = new AnalyticsEvent(eventType);
	    analyticsEvent.addOptions({
	      verticalConfigId: this._verticalKey,
	      searcher: this._verticalKey ? 'VERTICAL' : 'UNIVERSAL'
	    });
	    return analyticsEvent;
	  };

	  createClass(QuestionSubmissionComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'QASubmission';
	    }
	  }]);

	  return QuestionSubmissionComponent;
	}(Component);

	var IconComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(IconComponent, _Component);

	  /**
	   * IconComponent
	   * @param opts
	   * @param opts.iconName {string}
	   * @param opts.iconUrl {string}
	   */
	  function IconComponent(opts, systemOpts) {
	    var _this;

	    if (opts === void 0) {
	      opts = {};
	    }

	    if (systemOpts === void 0) {
	      systemOpts = {};
	    }

	    _this = _Component.call(this, opts, systemOpts) || this;
	    /**
	     * name of an icon from the default icon set
	     * @type {string}
	     */

	    _this.iconName = opts.iconName || 'default';
	    /**
	     * the url to a custom image icon
	     * @type {null}
	     */

	    _this.iconUrl = opts.iconUrl || null;
	    /**
	     * An additional string to append to the icon's css class. Multiple
	     * classes should be space delimited.
	     */

	    _this.classNames = opts.classNames || null;
	    /**
	     * A unique id to pass to the icon.
	     * @type {Object}
	     */

	    _this.complexContentsParams = opts.complexContentsParams || {};
	    return _this;
	  }

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  IconComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'icons/icon';
	  }
	  /**
	   * allowing duplicates
	   * @returns {boolean}
	   * @override
	   */
	  ;

	  IconComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  }
	  /**
	   * overrides default functionality to provide name and markup
	   * @param data
	   * @returns {IconComponent}
	   */
	  ;

	  var _proto = IconComponent.prototype;

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, _extends_1(data, {
	      iconUrl: this.iconUrl,
	      iconName: this.iconName,
	      name: this.iconName ? this.iconName : 'custom',
	      classNames: this.classNames,
	      complexContentsParams: this.complexContentsParams
	    }));
	  };

	  createClass(IconComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'IconComponent';
	    }
	  }]);

	  return IconComponent;
	}(Component);

	var CTAConfig = function CTAConfig(config) {
	  if (config === void 0) {
	    config = {};
	  }

	  _extends_1(this, config);
	  /**
	   * Label below the CTA icon
	   * @type {string}
	   */


	  this.label = config.label;
	  /**
	   * CTA icon, maps to a set of icons.
	   * @type {string}
	   */

	  this.icon = config.icon;
	  /**
	   * Url to custom icon, has priority over icon.
	   * @type {string}
	   */

	  this.iconUrl = config.iconUrl;
	  /**
	   * Whether the DOM should include legacy class names
	   * @type {boolean}
	   */

	  this.includeLegacyClasses = config.includeLegacyClasses || false;
	  /**
	   * Click through url for the icon and label
	   * @type {string}
	   */

	  this.url = config.url;
	  /**
	   * Analytics event that should fire:
	   * @type {string}
	   */

	  this.analyticsEventType = config.analytics || config.eventType || 'CTA_CLICK';
	  /**
	   * The target attribute for the CTA link.
	   * @type {boolean}
	   */

	  this.target = config.target || '_blank';
	  /**
	   * The eventOptions needed for the event to fire, passed as a string or Object
	   * from config.dataMappings || {}.
	   * @type {Object}
	   */

	  if (typeof config.eventOptions === 'string') {
	    this.eventOptions = JSON.parse(config.eventOptions);
	  }

	  this.eventOptions = this.eventOptions;
	  /**
	   * Additional css className modifiers for the cta
	   * @type {string}
	   */

	  this._ctaModifiers = config._ctaModifiers;
	  /**
	   * Whether the cta is the only one in its CTACollectionComponent
	   * @type {boolean}
	   */

	  this._isSolo = config._isSolo || false;
	};

	var CTAComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(CTAComponent, _Component);

	  function CTAComponent(config, systemConfig) {
	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    return _Component.call(this, new CTAConfig(config), systemConfig) || this;
	  }

	  var _proto = CTAComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this = this;

	    var el = DOM.query(this._container, ".js-yxt-CTA");

	    if (el && this._config.eventOptions) {
	      DOM.on(el, 'mousedown', function (e) {
	        if (e.button === 0 || e.button === 1) {
	          _this.reportAnalyticsEvent();
	        }
	      });
	    }
	  };

	  _proto.setState = function setState(data) {
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      hasIcon: this._config.icon || this._config.iconUrl
	    }));
	  };

	  _proto.reportAnalyticsEvent = function reportAnalyticsEvent() {
	    var analyticsEvent = new AnalyticsEvent(this._config.analyticsEventType);
	    analyticsEvent.addOptions(this._config.eventOptions);
	    this.analyticsReporter.report(analyticsEvent);
	  };

	  CTAComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'ctas/cta';
	  };

	  createClass(CTAComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'CTA';
	    }
	  }]);

	  return CTAComponent;
	}(Component);

	var VerticalResultsCountComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(VerticalResultsCountComponent, _Component);

	  function VerticalResultsCountComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, config, systemConfig) || this;

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (verticalResults) {
	      if (verticalResults.searchState === SearchStates.SEARCH_COMPLETE) {
	        _this.setState(verticalResults);
	      }
	    });
	    /**
	     * When the page is in a No Results state, whether to display the
	     * vertical results count.
	     * @type {boolean}
	     */


	    _this._visibleForNoResults = !!(config.noResults || {}).visible;
	    return _this;
	  }

	  VerticalResultsCountComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  var _proto = VerticalResultsCountComponent.prototype;

	  _proto.setState = function setState(data) {
	    var verticalResults = data || {};
	    /**
	     * Total number of results.
	     * @type {number}
	     */

	    var resultsCount = verticalResults.resultsCount || 0;
	    /**
	     * Number of results displayed on the page.
	     * @type {number}
	     */

	    var resultsLength = (verticalResults.results || []).length;
	    var offset = this.core.globalStorage.getState(StorageKeys.SEARCH_OFFSET) || 0;
	    var isNoResults = verticalResults.resultsContext === ResultsContext.NO_RESULTS;
	    var hasZeroResults = resultsCount === 0;
	    var isHidden = !this._visibleForNoResults && isNoResults || hasZeroResults;
	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      total: resultsCount,
	      pageStart: offset + 1,
	      pageEnd: offset + resultsLength,
	      isHidden: isHidden
	    }));
	  };

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  VerticalResultsCountComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/verticalresultscount';
	  };

	  createClass(VerticalResultsCountComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'VerticalResultsCount';
	    }
	  }]);

	  return VerticalResultsCountComponent;
	}(Component);

	var DEFAULT_CONFIG$7 = {
	  showFieldNames: false,
	  showChangeFilters: false,
	  removable: false,
	  delimiter: '|',
	  labelText: 'Filters applied to this search:',
	  removableLabelText: 'Remove this filter',
	  hiddenFields: ['builtin.entityType']
	};

	var AppliedFiltersComponent =
	/*#__PURE__*/
	function (_Component) {
	  inheritsLoose(AppliedFiltersComponent, _Component);

	  function AppliedFiltersComponent(config, systemConfig) {
	    var _this;

	    if (config === void 0) {
	      config = {};
	    }

	    if (systemConfig === void 0) {
	      systemConfig = {};
	    }

	    _this = _Component.call(this, objectSpread({}, DEFAULT_CONFIG$7, {}, config), systemConfig) || this;
	    _this._verticalKey = _this._config.verticalKey || _this.core.globalStorage.getState(StorageKeys.SEARCH_CONFIG).verticalKey;
	    _this.moduleId = StorageKeys.FACETS_LOADED;

	    _this.core.globalStorage.on('update', StorageKeys.VERTICAL_RESULTS, function (results) {
	      if (results.searchState === SearchStates.SEARCH_COMPLETE) {
	        _this.setState();
	      }
	    });

	    return _this;
	  }

	  AppliedFiltersComponent.areDuplicateNamesAllowed = function areDuplicateNamesAllowed() {
	    return true;
	  };

	  var _proto = AppliedFiltersComponent.prototype;

	  _proto.onMount = function onMount() {
	    var _this2 = this;

	    var removableFilterTags = DOM.queryAll(this._container, '.js-yxt-AppliedFilters-removableFilterTag');

	    forEach$4(removableFilterTags).call(removableFilterTags, function (tag) {
	      DOM.on(tag, 'click', function () {
	        return _this2._removeFilterTag(tag);
	      });
	    });
	  }
	  /**
	   * Call remove callback for the {@link FilterNode} corresponding to a specific
	   * removable filter tag.
	   * @param {HTMLElement} tag
	   */
	  ;

	  _proto._removeFilterTag = function _removeFilterTag(tag) {
	    var filterId = tag.dataset.filterId;
	    var filterNode = this.appliedFilterNodes[filterId];
	    filterNode.remove();
	    this.core.verticalSearch(this._verticalKey, {
	      setQueryParams: true,
	      resetPagination: true,
	      useFacets: true
	    });
	  }
	  /**
	   * Returns the currently applied nlp filter nodes, with nlp filter nodes that
	   * are duplicates of other filter nodes removed or filter on hiddenFields removed.
	   * @returns {Array<FilterNode>}
	   */
	  ;

	  _proto._getPrunedNlpFilterNodes = function _getPrunedNlpFilterNodes() {
	    var _context,
	        _this3 = this;

	    var duplicatesRemoved = filter$4(_context = this.nlpFilterNodes).call(_context, function (nlpNode) {
	      var _context2;

	      var isDuplicate = find$3(_context2 = _this3.appliedFilterNodes).call(_context2, function (appliedNode) {
	        return appliedNode.hasSameFilterAs(nlpNode);
	      });

	      return !isDuplicate;
	    });

	    return pruneFilterNodes(duplicatesRemoved, this._config.hiddenFields);
	  }
	  /**
	   * Combine all of the applied filters into a format the handlebars
	   * template can work with.
	   * Keys are the fieldName of the filter. Values are an array of objects with a
	   * displayValue and dataFilterId.
	   * @returns {Array<Object>}
	   */
	  ;

	  _proto._groupAppliedFilters = function _groupAppliedFilters() {
	    var _this4 = this;

	    var getFieldName = function getFieldName(filterNode) {
	      return filterNode.getMetadata().fieldName;
	    };

	    var parseNlpFilterDisplay = function parseNlpFilterDisplay(filterNode) {
	      return {
	        displayValue: filterNode.getMetadata().displayValue
	      };
	    };

	    var parseRemovableFilterDisplay = function parseRemovableFilterDisplay(filterNode, index) {
	      return {
	        displayValue: filterNode.getMetadata().displayValue,
	        dataFilterId: index,
	        removable: _this4._config.removable
	      };
	    };

	    var removableNodes = groupArray(this.appliedFilterNodes, getFieldName, parseRemovableFilterDisplay);

	    var prunedNlpFilterNodes = this._getPrunedNlpFilterNodes();

	    return groupArray(prunedNlpFilterNodes, getFieldName, parseNlpFilterDisplay, removableNodes);
	  }
	  /**
	   * Returns an array of object the handlebars can understand and render
	   * the applied filters bar from. Our handlebars can only loop through arrays,
	   * not objects, so we need to reformat the grouped applied filters.
	   * @returns {Array<Object>}
	   */
	  ;

	  _proto._createAppliedFiltersArray = function _createAppliedFiltersArray() {
	    var _context3;

	    var groupedFilters = this._groupAppliedFilters();

	    return map$2(_context3 = keys$5(groupedFilters)).call(_context3, function (label) {
	      return {
	        label: label,
	        filterDataArray: groupedFilters[label]
	      };
	    });
	  }
	  /**
	   * Pulls applied filter nodes from {@link FilterRegistry}, then retrives an array of
	   * the leaf nodes, and then removes hidden or empty {@link FilterNode}s. Then appends
	   * the currently applied nlp filters.
	   */
	  ;

	  _proto._calculateAppliedFilterNodes = function _calculateAppliedFilterNodes() {
	    var filterNodes = this.core.filterRegistry.getAllFilterNodes();
	    var simpleFilterNodes = flattenFilterNodes(filterNodes);
	    return pruneFilterNodes(simpleFilterNodes, this._config.hiddenFields);
	  };

	  _proto.setState = function setState(data) {
	    var verticalResults = this.core.globalStorage.getState(StorageKeys.VERTICAL_RESULTS) || {};
	    /**
	     * Array of nlp filters in the search response.
	     * @type {Array<AppliedQueryFilter>}
	     */

	    var nlpFilters = verticalResults.appliedQueryFilters || [];
	    this.nlpFilterNodes = convertNlpFiltersToFilterNodes(nlpFilters);
	    this.appliedFilterNodes = this._calculateAppliedFilterNodes();

	    var appliedFiltersArray = this._createAppliedFiltersArray();

	    return _Component.prototype.setState.call(this, objectSpread({}, data, {
	      appliedFiltersArray: appliedFiltersArray
	    }));
	  };

	  /**
	   * The template to render
	   * @returns {string}
	   * @override
	   */
	  AppliedFiltersComponent.defaultTemplateName = function defaultTemplateName(config) {
	    return 'results/appliedfilters';
	  };

	  createClass(AppliedFiltersComponent, null, [{
	    key: "type",
	    get: function get() {
	      return 'AppliedFilters';
	    }
	  }]);

	  return AppliedFiltersComponent;
	}(Component);

	var COMPONENT_CLASS_LIST = [// Core Component
	Component, // Navigation Components
	NavigationComponent, // Search Components
	SearchComponent, FilterSearchComponent, AutoCompleteComponent, SpellCheckComponent, LocationBiasComponent, // Filter Components
	FilterBoxComponent, FilterOptionsComponent, RangeFilterComponent, DateRangeFilterComponent, FacetsComponent, GeoLocationComponent, SortOptionsComponent, // Results Components
	DirectAnswerComponent, UniversalResultsComponent, VerticalResultsComponent, PaginationComponent, AccordionResultsComponent, MapComponent, AlternativeVerticalsComponent, ResultsHeaderComponent, // Card Components
	CardComponent, StandardCardComponent, AccordionCardComponent, LegacyCardComponent, // Questions Components
	QuestionSubmissionComponent, // Helper Components
	IconComponent, CTAComponent, CTACollectionComponent, VerticalResultsCountComponent, AppliedFiltersComponent];
	/**
	 * The component registry is a map that contains
	 * all available component classes used for creation or extension.
	 * Each component class has a unique type, which is used as the key for the registry
	 * @type {Object.<string, Component>}
	 */

	var COMPONENT_REGISTRY = reduce$2(COMPONENT_CLASS_LIST).call(COMPONENT_CLASS_LIST, function (registry, clazz) {
	  registry[clazz.type] = clazz;
	  return registry;
	}, {});

	/**
	 * ComponentManager is a Singletone that contains both an internal registry of
	 * eligible components to be created, as well as keeps track of the current
	 * instantiated and active components.
	 *
	 * ALL components should be constructed using the {ComponentManager} via its `create` method.
	 */

	var ComponentManager =
	/*#__PURE__*/
	function () {
	  function ComponentManager() {
	    /**
	     * The active components is an internal container to keep track
	     * of all of the components that have been constructed
	     */
	    this._activeComponents = [];
	    /**
	     * A local reference to the core library dependency
	     *
	     * The Core contains both the storage AND services that are needed for performing operations
	     * like search and auto complete.
	     *
	     * The storage is the source of truth for the state of ALL components.
	     * Whenever the storage is updated, the state gets pushed down to the necessary components.
	     * @type {Core}
	     */

	    this._core = null;
	    /**
	     * The primary renderer to use for all components
	     * @type {HandlebarsRenderer}
	     */

	    this._renderer = null;
	    /**
	     * A local reference to the analytics reporter dependency
	     */

	    this._analyticsReporter = null;
	    /**
	     * A mapping from component types to component names, as these may be configured by a user
	     */

	    this._componentTypeToComponentNames = {};
	  }

	  ComponentManager.getInstance = function getInstance() {
	    if (!this.instance) {
	      this.instance = new ComponentManager();
	    }

	    return this.instance;
	  };

	  var _proto = ComponentManager.prototype;

	  _proto.setRenderer = function setRenderer(renderer) {
	    this._renderer = renderer;
	    return this;
	  };

	  _proto.setCore = function setCore(core) {
	    this._core = core;
	    return this;
	  };

	  _proto.setAnalyticsReporter = function setAnalyticsReporter(reporter) {
	    this._analyticsReporter = reporter;
	    return this;
	  }
	  /**
	   * registers a component to be eligible for creation and override.
	   * @param {Component} The Component Class to register
	   */
	  ;

	  _proto.register = function register(componentClazz) {
	    COMPONENT_REGISTRY[componentClazz.type] = componentClazz;
	    return this;
	  }
	  /**
	   * Returns components with names similar to the passed in component class.
	   * @param {string} componentType
	   */
	  ;

	  _proto.getSimilarComponents = function getSimilarComponents(componentType) {
	    var _context;

	    var similarComponents = filter$4(_context = keys$5(COMPONENT_REGISTRY)).call(_context, function (type) {
	      return startsWith$2(type).call(type, componentType.substring(0, 2));
	    });

	    if (similarComponents.length === 0) {
	      similarComponents = keys$5(COMPONENT_REGISTRY);
	    }

	    return similarComponents;
	  }
	  /**
	   * create is the entry point for constructing any and all components.
	   * It will instantiate a new instance of the component, and both apply
	   * initial state from the storage and bind it to the storage for updates.
	   * @param {string} componentType The component type to create
	   * @param {Object} opts The options to pipe to the construction of the component
	   */
	  ;

	  _proto.create = function create(componentType, opts) {
	    var _context2, _context3;

	    // Every component needs local access to the component manager
	    // because sometimes components have subcomponents that need to be
	    // constructed during creation
	    var systemOpts = {
	      core: this._core,
	      renderer: this._renderer,
	      analyticsReporter: this._analyticsReporter,
	      componentManager: this
	    };
	    var componentClass = COMPONENT_REGISTRY[componentType];

	    if (!componentClass) {
	      throw new AnswersComponentError("Component type " + componentType + " is not recognized as a valid component." + (" You might have meant " + this.getSimilarComponents(componentType).join(', ') + "?"));
	    }

	    if (!componentClass.areDuplicateNamesAllowed() && some$2(_context2 = this._activeComponents).call(_context2, function (c) {
	      return c.name === opts.name;
	    })) {
	      throw new AnswersComponentError("Another component with name " + opts.name + " already exists", componentType);
	    }

	    var config = objectSpread({
	      isTwin: some$2(_context3 = this._activeComponents).call(_context3, function (component) {
	        return component.constructor.type === componentType;
	      })
	    }, opts); // Instantiate our new component and keep track of it


	    var component = new COMPONENT_REGISTRY[componentType](config, systemOpts).init(config);

	    this._activeComponents.push(component);

	    if (!this._componentTypeToComponentNames[componentType]) {
	      this._componentTypeToComponentNames[componentType] = [];
	    }

	    this._componentTypeToComponentNames[componentType].push(component.name); // If there is a global storage to power state, apply the state
	    // from the storage to the component, and then bind the component
	    // state to the storage via its updates


	    if (this._core && this._core.globalStorage !== null) {
	      if (component.moduleId === undefined || component.moduleId === null) {
	        return component;
	      }

	      this._core.globalStorage.on('update', component.moduleId, function (data) {
	        component.setState(data);
	      });
	    }

	    return component;
	  }
	  /**
	   * Remove the provided component from the list of active components and remove
	   * the associated storage event listener
	   * @param {Component} component The component to remove
	   */
	  ;

	  _proto.remove = function remove(component) {
	    var _context4, _context5;

	    this._core.globalStorage.off('update', component.moduleId);

	    var index = findIndex$2(_context4 = this._activeComponents).call(_context4, function (c) {
	      return c.name === component.name;
	    });

	    splice$2(_context5 = this._activeComponents).call(_context5, index, 1);
	  }
	  /**
	   * Remove the component with the given name
	   * @param {string} name The name of the compnent to remove
	   */
	  ;

	  _proto.removeByName = function removeByName(name) {
	    var _context6;

	    var component = find$3(_context6 = this._activeComponents).call(_context6, function (c) {
	      return c.name === name;
	    });

	    component.remove();
	    DOM.empty(component._container);
	  };

	  _proto.getActiveComponent = function getActiveComponent(type) {
	    var _context7;

	    return find$3(_context7 = this._activeComponents).call(_context7, function (c) {
	      return c.constructor.type === type;
	    });
	  }
	  /**
	   * Returns a concatenated list of all names associated with the given component types
	   * @param {string[]} type The types of the component
	   * @returns {string[]} The component names for the component types
	   */
	  ;

	  _proto.getComponentNamesForComponentTypes = function getComponentNamesForComponentTypes(types) {
	    var _this = this;

	    return reduce$2(types).call(types, function (names, type) {
	      return concat$4(names).call(names, _this._componentTypeToComponentNames[type] || []);
	    }, []);
	  };

	  return ComponentManager;
	}();

	/** @module VerticalPagesConfig */
	var VerticalPageConfig =
	/*#__PURE__*/
	function () {
	  function VerticalPageConfig(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    /**
	     * The name of the tab that is exposed for the link
	     * @type {string}
	     */
	    this.label = config.label || null;
	    /**
	     * The complete URL, including the params
	     * @type {string}
	     */

	    this.url = config.url || null;
	    /**
	     * The serverside vertical config id that this is referenced to.
	     * By providing this, enables dynamic sorting based on results.
	     * @type {string}
	     */

	    this.verticalKey = config.verticalKey || null;
	    /**
	     * Determines whether to show this tab in the navigation component
	     * @type {boolean}
	     */

	    this.hideInNavigation = config.hideInNavigation || false;
	    /**
	     * Determines whether to show this tab first in the order
	     * @type {boolean}
	     */

	    this.isFirst = config.isFirst || false;
	    /**
	     * Determines whether or not to apply a special class to the
	     * markup to determine if it's an active tab
	     * @type {boolean}
	     */

	    this.isActive = config.isActive || false;
	    /**
	     * URL of an icon
	     * @type {string}
	     */

	    this.iconUrl = config.iconUrl;
	    /**
	     * name of an icon from the default icon set
	     * @type {string}
	     */

	    this.icon = config.icon;

	    freeze$2(this);
	  }

	  var _proto = VerticalPageConfig.prototype;

	  _proto.validate = function validate() {};

	  return VerticalPageConfig;
	}();

	var VerticalPagesConfig =
	/*#__PURE__*/
	function () {
	  function VerticalPagesConfig(pages) {
	    if (pages === void 0) {
	      pages = [];
	    }

	    this.verticalPagesConfig = VerticalPagesConfig.from(pages);
	  }
	  /**
	   * Using a getter that copies the data instead of providing a reference prevents it from being mutated.
	   * This is important for global configuration.
	   * @returns {Array<VerticalPageConfig>}
	   */


	  var _proto2 = VerticalPagesConfig.prototype;

	  _proto2.get = function get() {
	    var _context;

	    return map$2(_context = this.verticalPagesConfig).call(_context, function (page) {
	      return objectSpread({}, page);
	    });
	  };

	  VerticalPagesConfig.from = function from(pages) {
	    return map$2(pages).call(pages, function (page) {
	      return new VerticalPageConfig(page);
	    });
	  };

	  return VerticalPagesConfig;
	}();

	/**
	 * This class provides access to the Answers Status page. This page indicates
	 * if the front-end for a particular experience should be temporarily disabled
	 * due to back-end issues.
	 */

	var MasterSwitchApi =
	/*#__PURE__*/
	function () {
	  function MasterSwitchApi(requestConfig, globalStorage) {
	    this._request = new ApiRequest(requestConfig, globalStorage);
	  }
	  /**
	   * Checks if the front-end for the given experience should be temporarily disabled.
	   * Note that this check errs on the side of enabling the front-end. If the network call
	   * does not complete successfully, due to timeout or other error, those failures are caught.
	   * In these failure cases, the assumption is that things are enabled.
	   *
	   * @returns {Promise<boolean>} A Promise containing a boolean indicating if the front-end
	   *                             should be disabled.
	   */


	  var _proto = MasterSwitchApi.prototype;

	  _proto.isDisabled = function isDisabled() {
	    var _this = this;

	    // A 100ms timeout is enforced on the status call.
	    var timeout = new promise$3(function (resolve, reject) {
	      setTimeout$2(reject, 100);
	    });
	    return new promise$3(function (resolve, reject) {
	      promise$3.race([_this._request.get({
	        credentials: 'omit'
	      }), timeout]).then(function (response) {
	        return response.json();
	      }).then(function (status) {
	        return status && status.disabled;
	      }).then(function (isDisabled) {
	        return resolve(!!isDisabled);
	      })["catch"](function () {
	        return resolve(false);
	      });
	    });
	  }
	  /**
	   * Creates a new {@link MasterSwitchApi} from the provided parameters.
	   *
	   * @param {string} apiKey The apiKey of the experience.
	   * @param {string} experienceKey The identifier of the experience.
	   * @param {GlobalStorage} globalStorage The {@link GlobalStorage} instance.
	   * @returns {MasterSwitchApi} The new {@link MasterSwitchApi} instance.
	   */
	  ;

	  MasterSwitchApi.from = function from(apiKey, experienceKey, globalStorage) {
	    var requestConfig = {
	      apiKey: apiKey,
	      baseUrl: 'https://answersstatus.pagescdn.com/',
	      endpoint: apiKey + "/" + experienceKey + "/status.json"
	    };
	    return new MasterSwitchApi(requestConfig, globalStorage);
	  };

	  return MasterSwitchApi;
	}();

	var markdownItForInline = function for_inline_plugin(md, ruleName, tokenType, iteartor) {

	  function scan(state) {
	    var i, blkIdx, inlineTokens;

	    for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
	      if (state.tokens[blkIdx].type !== 'inline') {
	        continue;
	      }

	      inlineTokens = state.tokens[blkIdx].children;

	      for (i = inlineTokens.length - 1; i >= 0; i--) {
	        if (inlineTokens[i].type !== tokenType) {
	          continue;
	        }

	        iteartor(inlineTokens, i);
	      }
	    }
	  }

	  md.core.ruler.push(ruleName, scan);
	};

	var rtfConverter_min = createCommonjsModule(function (module, exports) {
	!function(e,r){module.exports=r();}(commonjsGlobal,function(){var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof commonjsGlobal?commonjsGlobal:"undefined"!=typeof self?self:{};function r(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}var t,n=(function(t,n){t.exports=function e(t,n,o){function s(a,l){if(!n[a]){if(!t[a]){var c=r;if(!l&&c)return c(a,!0);if(i)return i(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var p=n[a]={exports:{}};t[a][0].call(p.exports,function(e){var r=t[a][1][e];return s(r||e)},p,p.exports,e,t,n,o);}return n[a].exports}for(var i=r,a=0;a<o.length;a++)s(o[a]);return s}({1:[function(e,r,t){r.exports=e("entities/lib/maps/entities.json");},{"entities/lib/maps/entities.json":52}],2:[function(e,r,t){r.exports=["address","article","aside","base","basefont","blockquote","body","caption","center","col","colgroup","dd","details","dialog","dir","div","dl","dt","fieldset","figcaption","figure","footer","form","frame","frameset","h1","h2","h3","h4","h5","h6","head","header","hr","html","iframe","legend","li","link","main","menu","menuitem","meta","nav","noframes","ol","optgroup","option","p","param","section","source","summary","table","tbody","td","tfoot","th","thead","title","tr","track","ul"];},{}],3:[function(e,r,t){var n="<[A-Za-z][A-Za-z0-9\\-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*\\/?>",o="<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>",s=new RegExp("^(?:"+n+"|"+o+"|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|<[?].*?[?]>|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),i=new RegExp("^(?:"+n+"|"+o+")");r.exports.HTML_TAG_RE=s,r.exports.HTML_OPEN_CLOSE_TAG_RE=i;},{}],4:[function(e,r,t){var n=Object.prototype.hasOwnProperty;function o(e,r){return n.call(e,r)}function s(e){return !(e>=55296&&e<=57343||e>=64976&&e<=65007||65535==(65535&e)||65534==(65535&e)||e>=0&&e<=8||11===e||e>=14&&e<=31||e>=127&&e<=159||e>1114111)}function i(e){if(e>65535){var r=55296+((e-=65536)>>10),t=56320+(1023&e);return String.fromCharCode(r,t)}return String.fromCharCode(e)}var a=/\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,l=new RegExp(a.source+"|"+/&([a-z#][a-z0-9]{1,31});/gi.source,"gi"),c=/^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,u=e("./entities"),p=/[&<>"]/,h=/[&<>"]/g,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};function d(e){return f[e]}var m=/[.?*+^$[\]\\(){}|-]/g,_=e("uc.micro/categories/P/regex");t.lib={},t.lib.mdurl=e("mdurl"),t.lib.ucmicro=e("uc.micro"),t.assign=function(e){return Array.prototype.slice.call(arguments,1).forEach(function(r){if(r){if("object"!=typeof r)throw new TypeError(r+"must be object");Object.keys(r).forEach(function(t){e[t]=r[t];});}}),e},t.isString=function(e){return "[object String]"===function(e){return Object.prototype.toString.call(e)}(e)},t.has=o,t.unescapeMd=function(e){return e.indexOf("\\")<0?e:e.replace(a,"$1")},t.unescapeAll=function(e){return e.indexOf("\\")<0&&e.indexOf("&")<0?e:e.replace(l,function(e,r,t){return r||function(e,r){var t=0;return o(u,r)?u[r]:35===r.charCodeAt(0)&&c.test(r)&&s(t="x"===r[1].toLowerCase()?parseInt(r.slice(2),16):parseInt(r.slice(1),10))?i(t):e}(e,t)})},t.isValidEntityCode=s,t.fromCodePoint=i,t.escapeHtml=function(e){return p.test(e)?e.replace(h,d):e},t.arrayReplaceAt=function(e,r,t){return [].concat(e.slice(0,r),t,e.slice(r+1))},t.isSpace=function(e){switch(e){case 9:case 32:return !0}return !1},t.isWhiteSpace=function(e){if(e>=8192&&e<=8202)return !0;switch(e){case 9:case 10:case 11:case 12:case 13:case 32:case 160:case 5760:case 8239:case 8287:case 12288:return !0}return !1},t.isMdAsciiPunct=function(e){switch(e){case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 43:case 44:case 45:case 46:case 47:case 58:case 59:case 60:case 61:case 62:case 63:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 124:case 125:case 126:return !0;default:return !1}},t.isPunctChar=function(e){return _.test(e)},t.escapeRE=function(e){return e.replace(m,"\\$&")},t.normalizeReference=function(e){return e=e.trim().replace(/\s+/g," "),"Ṿ"==="ẞ".toLowerCase()&&(e=e.replace(/ẞ/g,"ß")),e.toLowerCase().toUpperCase()};},{"./entities":1,mdurl:58,"uc.micro":65,"uc.micro/categories/P/regex":63}],5:[function(e,r,t){t.parseLinkLabel=e("./parse_link_label"),t.parseLinkDestination=e("./parse_link_destination"),t.parseLinkTitle=e("./parse_link_title");},{"./parse_link_destination":6,"./parse_link_label":7,"./parse_link_title":8}],6:[function(e,r,t){var n=e("../common/utils").unescapeAll;r.exports=function(e,r,t){var o,s,i=r,a={ok:!1,pos:0,lines:0,str:""};if(60===e.charCodeAt(r)){for(r++;r<t;){if(10===(o=e.charCodeAt(r)))return a;if(62===o)return a.pos=r+1,a.str=n(e.slice(i+1,r)),a.ok=!0,a;92===o&&r+1<t?r+=2:r++;}return a}for(s=0;r<t&&32!==(o=e.charCodeAt(r))&&!(o<32||127===o);)if(92===o&&r+1<t)r+=2;else{if(40===o&&s++,41===o){if(0===s)break;s--;}r++;}return i===r?a:0!==s?a:(a.str=n(e.slice(i,r)),a.lines=0,a.pos=r,a.ok=!0,a)};},{"../common/utils":4}],7:[function(e,r,t){r.exports=function(e,r,t){var n,o,s,i,a=-1,l=e.posMax,c=e.pos;for(e.pos=r+1,n=1;e.pos<l;){if(93===(s=e.src.charCodeAt(e.pos))&&0==--n){o=!0;break}if(i=e.pos,e.md.inline.skipToken(e),91===s)if(i===e.pos-1)n++;else if(t)return e.pos=c,-1}return o&&(a=e.pos),e.pos=c,a};},{}],8:[function(e,r,t){var n=e("../common/utils").unescapeAll;r.exports=function(e,r,t){var o,s,i=0,a=r,l={ok:!1,pos:0,lines:0,str:""};if(r>=t)return l;if(34!==(s=e.charCodeAt(r))&&39!==s&&40!==s)return l;for(r++,40===s&&(s=41);r<t;){if((o=e.charCodeAt(r))===s)return l.pos=r+1,l.lines=i,l.str=n(e.slice(a+1,r)),l.ok=!0,l;10===o?i++:92===o&&r+1<t&&(r++,10===e.charCodeAt(r)&&i++),r++;}return l};},{"../common/utils":4}],9:[function(e,r,t){var n=e("./common/utils"),o=e("./helpers"),s=e("./renderer"),i=e("./parser_core"),a=e("./parser_block"),l=e("./parser_inline"),c=e("linkify-it"),u=e("mdurl"),p=e("punycode"),h={default:e("./presets/default"),zero:e("./presets/zero"),commonmark:e("./presets/commonmark")},f=/^(vbscript|javascript|file|data):/,d=/^data:image\/(gif|png|jpeg|webp);/;function m(e){var r=e.trim().toLowerCase();return !f.test(r)||!!d.test(r)}var _=["http:","https:","mailto:"];function g(e){var r=u.parse(e,!0);if(r.hostname&&(!r.protocol||_.indexOf(r.protocol)>=0))try{r.hostname=p.toASCII(r.hostname);}catch(e){}return u.encode(u.format(r))}function k(e){var r=u.parse(e,!0);if(r.hostname&&(!r.protocol||_.indexOf(r.protocol)>=0))try{r.hostname=p.toUnicode(r.hostname);}catch(e){}return u.decode(u.format(r))}function b(e,r){if(!(this instanceof b))return new b(e,r);r||n.isString(e)||(r=e||{},e="default"),this.inline=new l,this.block=new a,this.core=new i,this.renderer=new s,this.linkify=new c,this.validateLink=m,this.normalizeLink=g,this.normalizeLinkText=k,this.utils=n,this.helpers=n.assign({},o),this.options={},this.configure(e),r&&this.set(r);}b.prototype.set=function(e){return n.assign(this.options,e),this},b.prototype.configure=function(e){var r,t=this;if(n.isString(e)&&!(e=h[r=e]))throw new Error('Wrong `markdown-it` preset "'+r+'", check name');if(!e)throw new Error("Wrong `markdown-it` preset, can't be empty");return e.options&&t.set(e.options),e.components&&Object.keys(e.components).forEach(function(r){e.components[r].rules&&t[r].ruler.enableOnly(e.components[r].rules),e.components[r].rules2&&t[r].ruler2.enableOnly(e.components[r].rules2);}),this},b.prototype.enable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(r){t=t.concat(this[r].ruler.enable(e,!0));},this),t=t.concat(this.inline.ruler2.enable(e,!0));var n=e.filter(function(e){return t.indexOf(e)<0});if(n.length&&!r)throw new Error("MarkdownIt. Failed to enable unknown rule(s): "+n);return this},b.prototype.disable=function(e,r){var t=[];Array.isArray(e)||(e=[e]),["core","block","inline"].forEach(function(r){t=t.concat(this[r].ruler.disable(e,!0));},this),t=t.concat(this.inline.ruler2.disable(e,!0));var n=e.filter(function(e){return t.indexOf(e)<0});if(n.length&&!r)throw new Error("MarkdownIt. Failed to disable unknown rule(s): "+n);return this},b.prototype.use=function(e){var r=[this].concat(Array.prototype.slice.call(arguments,1));return e.apply(e,r),this},b.prototype.parse=function(e,r){if("string"!=typeof e)throw new Error("Input data should be a String");var t=new this.core.State(e,this,r);return this.core.process(t),t.tokens},b.prototype.render=function(e,r){return r=r||{},this.renderer.render(this.parse(e,r),this.options,r)},b.prototype.parseInline=function(e,r){var t=new this.core.State(e,this,r);return t.inlineMode=!0,this.core.process(t),t.tokens},b.prototype.renderInline=function(e,r){return r=r||{},this.renderer.render(this.parseInline(e,r),this.options,r)},r.exports=b;},{"./common/utils":4,"./helpers":5,"./parser_block":10,"./parser_core":11,"./parser_inline":12,"./presets/commonmark":13,"./presets/default":14,"./presets/zero":15,"./renderer":16,"linkify-it":53,mdurl:58,punycode:60}],10:[function(e,r,t){var n=e("./ruler"),o=[["table",e("./rules_block/table"),["paragraph","reference"]],["code",e("./rules_block/code")],["fence",e("./rules_block/fence"),["paragraph","reference","blockquote","list"]],["blockquote",e("./rules_block/blockquote"),["paragraph","reference","blockquote","list"]],["hr",e("./rules_block/hr"),["paragraph","reference","blockquote","list"]],["list",e("./rules_block/list"),["paragraph","reference","blockquote"]],["reference",e("./rules_block/reference")],["heading",e("./rules_block/heading"),["paragraph","reference","blockquote"]],["lheading",e("./rules_block/lheading")],["html_block",e("./rules_block/html_block"),["paragraph","reference","blockquote"]],["paragraph",e("./rules_block/paragraph")]];function s(){this.ruler=new n;for(var e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1],{alt:(o[e][2]||[]).slice()});}s.prototype.tokenize=function(e,r,t){for(var n,o=this.ruler.getRules(""),s=o.length,i=r,a=!1,l=e.md.options.maxNesting;i<t&&(e.line=i=e.skipEmptyLines(i),!(i>=t))&&!(e.sCount[i]<e.blkIndent);){if(e.level>=l){e.line=t;break}for(n=0;n<s&&!o[n](e,i,t,!1);n++);e.tight=!a,e.isEmpty(e.line-1)&&(a=!0),(i=e.line)<t&&e.isEmpty(i)&&(a=!0,i++,e.line=i);}},s.prototype.parse=function(e,r,t,n){var o;e&&(o=new this.State(e,r,t,n),this.tokenize(o,o.line,o.lineMax));},s.prototype.State=e("./rules_block/state_block"),r.exports=s;},{"./ruler":17,"./rules_block/blockquote":18,"./rules_block/code":19,"./rules_block/fence":20,"./rules_block/heading":21,"./rules_block/hr":22,"./rules_block/html_block":23,"./rules_block/lheading":24,"./rules_block/list":25,"./rules_block/paragraph":26,"./rules_block/reference":27,"./rules_block/state_block":28,"./rules_block/table":29}],11:[function(e,r,t){var n=e("./ruler"),o=[["normalize",e("./rules_core/normalize")],["block",e("./rules_core/block")],["inline",e("./rules_core/inline")],["linkify",e("./rules_core/linkify")],["replacements",e("./rules_core/replacements")],["smartquotes",e("./rules_core/smartquotes")]];function s(){this.ruler=new n;for(var e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1]);}s.prototype.process=function(e){var r,t,n;for(n=this.ruler.getRules(""),r=0,t=n.length;r<t;r++)n[r](e);},s.prototype.State=e("./rules_core/state_core"),r.exports=s;},{"./ruler":17,"./rules_core/block":30,"./rules_core/inline":31,"./rules_core/linkify":32,"./rules_core/normalize":33,"./rules_core/replacements":34,"./rules_core/smartquotes":35,"./rules_core/state_core":36}],12:[function(e,r,t){var n=e("./ruler"),o=[["text",e("./rules_inline/text")],["newline",e("./rules_inline/newline")],["escape",e("./rules_inline/escape")],["backticks",e("./rules_inline/backticks")],["strikethrough",e("./rules_inline/strikethrough").tokenize],["emphasis",e("./rules_inline/emphasis").tokenize],["link",e("./rules_inline/link")],["image",e("./rules_inline/image")],["autolink",e("./rules_inline/autolink")],["html_inline",e("./rules_inline/html_inline")],["entity",e("./rules_inline/entity")]],s=[["balance_pairs",e("./rules_inline/balance_pairs")],["strikethrough",e("./rules_inline/strikethrough").postProcess],["emphasis",e("./rules_inline/emphasis").postProcess],["text_collapse",e("./rules_inline/text_collapse")]];function i(){var e;for(this.ruler=new n,e=0;e<o.length;e++)this.ruler.push(o[e][0],o[e][1]);for(this.ruler2=new n,e=0;e<s.length;e++)this.ruler2.push(s[e][0],s[e][1]);}i.prototype.skipToken=function(e){var r,t,n=e.pos,o=this.ruler.getRules(""),s=o.length,i=e.md.options.maxNesting,a=e.cache;if(void 0===a[n]){if(e.level<i)for(t=0;t<s&&(e.level++,r=o[t](e,!0),e.level--,!r);t++);else e.pos=e.posMax;r||e.pos++,a[n]=e.pos;}else e.pos=a[n];},i.prototype.tokenize=function(e){for(var r,t,n=this.ruler.getRules(""),o=n.length,s=e.posMax,i=e.md.options.maxNesting;e.pos<s;){if(e.level<i)for(t=0;t<o&&!(r=n[t](e,!1));t++);if(r){if(e.pos>=s)break}else e.pending+=e.src[e.pos++];}e.pending&&e.pushPending();},i.prototype.parse=function(e,r,t,n){var o,s,i,a=new this.State(e,r,t,n);for(this.tokenize(a),s=this.ruler2.getRules(""),i=s.length,o=0;o<i;o++)s[o](a);},i.prototype.State=e("./rules_inline/state_inline"),r.exports=i;},{"./ruler":17,"./rules_inline/autolink":37,"./rules_inline/backticks":38,"./rules_inline/balance_pairs":39,"./rules_inline/emphasis":40,"./rules_inline/entity":41,"./rules_inline/escape":42,"./rules_inline/html_inline":43,"./rules_inline/image":44,"./rules_inline/link":45,"./rules_inline/newline":46,"./rules_inline/state_inline":47,"./rules_inline/strikethrough":48,"./rules_inline/text":49,"./rules_inline/text_collapse":50}],13:[function(e,r,t){r.exports={options:{html:!0,xhtmlOut:!0,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["blockquote","code","fence","heading","hr","html_block","lheading","list","reference","paragraph"]},inline:{rules:["autolink","backticks","emphasis","entity","escape","html_inline","image","link","newline","text"],rules2:["balance_pairs","emphasis","text_collapse"]}}};},{}],14:[function(e,r,t){r.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:100},components:{core:{},block:{},inline:{}}};},{}],15:[function(e,r,t){r.exports={options:{html:!1,xhtmlOut:!1,breaks:!1,langPrefix:"language-",linkify:!1,typographer:!1,quotes:"“”‘’",highlight:null,maxNesting:20},components:{core:{rules:["normalize","block","inline"]},block:{rules:["paragraph"]},inline:{rules:["text"],rules2:["balance_pairs","text_collapse"]}}};},{}],16:[function(e,r,t){var n=e("./common/utils").assign,o=e("./common/utils").unescapeAll,s=e("./common/utils").escapeHtml,i={};function a(){this.rules=n({},i);}i.code_inline=function(e,r,t,n,o){var i=e[r];return "<code"+o.renderAttrs(i)+">"+s(e[r].content)+"</code>"},i.code_block=function(e,r,t,n,o){var i=e[r];return "<pre"+o.renderAttrs(i)+"><code>"+s(e[r].content)+"</code></pre>\n"},i.fence=function(e,r,t,n,i){var a,l,c,u,p=e[r],h=p.info?o(p.info).trim():"",f="";return h&&(f=h.split(/\s+/g)[0]),0===(a=t.highlight&&t.highlight(p.content,f)||s(p.content)).indexOf("<pre")?a+"\n":h?(l=p.attrIndex("class"),c=p.attrs?p.attrs.slice():[],l<0?c.push(["class",t.langPrefix+f]):c[l][1]+=" "+t.langPrefix+f,u={attrs:c},"<pre><code"+i.renderAttrs(u)+">"+a+"</code></pre>\n"):"<pre><code"+i.renderAttrs(p)+">"+a+"</code></pre>\n"},i.image=function(e,r,t,n,o){var s=e[r];return s.attrs[s.attrIndex("alt")][1]=o.renderInlineAsText(s.children,t,n),o.renderToken(e,r,t)},i.hardbreak=function(e,r,t){return t.xhtmlOut?"<br />\n":"<br>\n"},i.softbreak=function(e,r,t){return t.breaks?t.xhtmlOut?"<br />\n":"<br>\n":"\n"},i.text=function(e,r){return s(e[r].content)},i.html_block=function(e,r){return e[r].content},i.html_inline=function(e,r){return e[r].content},a.prototype.renderAttrs=function(e){var r,t,n;if(!e.attrs)return "";for(n="",r=0,t=e.attrs.length;r<t;r++)n+=" "+s(e.attrs[r][0])+'="'+s(e.attrs[r][1])+'"';return n},a.prototype.renderToken=function(e,r,t){var n,o="",s=!1,i=e[r];return i.hidden?"":(i.block&&-1!==i.nesting&&r&&e[r-1].hidden&&(o+="\n"),o+=(-1===i.nesting?"</":"<")+i.tag,o+=this.renderAttrs(i),0===i.nesting&&t.xhtmlOut&&(o+=" /"),i.block&&(s=!0,1===i.nesting&&r+1<e.length&&("inline"===(n=e[r+1]).type||n.hidden?s=!1:-1===n.nesting&&n.tag===i.tag&&(s=!1))),o+=s?">\n":">")},a.prototype.renderInline=function(e,r,t){for(var n,o="",s=this.rules,i=0,a=e.length;i<a;i++)n=e[i].type,void 0!==s[n]?o+=s[n](e,i,r,t,this):o+=this.renderToken(e,i,r);return o},a.prototype.renderInlineAsText=function(e,r,t){for(var n="",o=0,s=e.length;o<s;o++)"text"===e[o].type?n+=e[o].content:"image"===e[o].type&&(n+=this.renderInlineAsText(e[o].children,r,t));return n},a.prototype.render=function(e,r,t){var n,o,s,i="",a=this.rules;for(n=0,o=e.length;n<o;n++)"inline"===(s=e[n].type)?i+=this.renderInline(e[n].children,r,t):void 0!==a[s]?i+=a[e[n].type](e,n,r,t,this):i+=this.renderToken(e,n,r,t);return i},r.exports=a;},{"./common/utils":4}],17:[function(e,r,t){function n(){this.__rules__=[],this.__cache__=null;}n.prototype.__find__=function(e){for(var r=0;r<this.__rules__.length;r++)if(this.__rules__[r].name===e)return r;return -1},n.prototype.__compile__=function(){var e=this,r=[""];e.__rules__.forEach(function(e){e.enabled&&e.alt.forEach(function(e){r.indexOf(e)<0&&r.push(e);});}),e.__cache__={},r.forEach(function(r){e.__cache__[r]=[],e.__rules__.forEach(function(t){t.enabled&&(r&&t.alt.indexOf(r)<0||e.__cache__[r].push(t.fn));});});},n.prototype.at=function(e,r,t){var n=this.__find__(e),o=t||{};if(-1===n)throw new Error("Parser rule not found: "+e);this.__rules__[n].fn=r,this.__rules__[n].alt=o.alt||[],this.__cache__=null;},n.prototype.before=function(e,r,t,n){var o=this.__find__(e),s=n||{};if(-1===o)throw new Error("Parser rule not found: "+e);this.__rules__.splice(o,0,{name:r,enabled:!0,fn:t,alt:s.alt||[]}),this.__cache__=null;},n.prototype.after=function(e,r,t,n){var o=this.__find__(e),s=n||{};if(-1===o)throw new Error("Parser rule not found: "+e);this.__rules__.splice(o+1,0,{name:r,enabled:!0,fn:t,alt:s.alt||[]}),this.__cache__=null;},n.prototype.push=function(e,r,t){var n=t||{};this.__rules__.push({name:e,enabled:!0,fn:r,alt:n.alt||[]}),this.__cache__=null;},n.prototype.enable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!0,t.push(e);},this),this.__cache__=null,t},n.prototype.enableOnly=function(e,r){Array.isArray(e)||(e=[e]),this.__rules__.forEach(function(e){e.enabled=!1;}),this.enable(e,r);},n.prototype.disable=function(e,r){Array.isArray(e)||(e=[e]);var t=[];return e.forEach(function(e){var n=this.__find__(e);if(n<0){if(r)return;throw new Error("Rules manager: invalid rule name "+e)}this.__rules__[n].enabled=!1,t.push(e);},this),this.__cache__=null,t},n.prototype.getRules=function(e){return null===this.__cache__&&this.__compile__(),this.__cache__[e]||[]},r.exports=n;},{}],18:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w=e.lineMax,D=e.bMarks[r]+e.tShift[r],E=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(62!==e.src.charCodeAt(D++))return !1;if(o)return !0;for(l=f=e.sCount[r]+D-(e.bMarks[r]+e.tShift[r]),32===e.src.charCodeAt(D)?(D++,l++,f++,s=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[r]+f)%4==3?(D++,l++,f++,s=!1):s=!0):v=!1,d=[e.bMarks[r]],e.bMarks[r]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[r]+(s?1:0))%4:f++,D++;for(m=[e.bsCount[r]],e.bsCount[r]=e.sCount[r]+1+(v?1:0),u=D>=E,k=[e.sCount[r]],e.sCount[r]=f-l,b=[e.tShift[r]],e.tShift[r]=D-e.bMarks[r],x=e.md.block.ruler.getRules("blockquote"),g=e.parentType,e.parentType="blockquote",A=!1,h=r+1;h<t&&(e.sCount[h]<e.blkIndent&&(A=!0),D=e.bMarks[h]+e.tShift[h],E=e.eMarks[h],!(D>=E));h++)if(62!==e.src.charCodeAt(D++)||A){if(u)break;for(y=!1,a=0,c=x.length;a<c;a++)if(x[a](e,h,t,!0)){y=!0;break}if(y){e.lineMax=h,0!==e.blkIndent&&(d.push(e.bMarks[h]),m.push(e.bsCount[h]),b.push(e.tShift[h]),k.push(e.sCount[h]),e.sCount[h]-=e.blkIndent);break}d.push(e.bMarks[h]),m.push(e.bsCount[h]),b.push(e.tShift[h]),k.push(e.sCount[h]),e.sCount[h]=-1;}else{for(l=f=e.sCount[h]+D-(e.bMarks[h]+e.tShift[h]),32===e.src.charCodeAt(D)?(D++,l++,f++,s=!1,v=!0):9===e.src.charCodeAt(D)?(v=!0,(e.bsCount[h]+f)%4==3?(D++,l++,f++,s=!1):s=!0):v=!1,d.push(e.bMarks[h]),e.bMarks[h]=D;D<E&&(i=e.src.charCodeAt(D),n(i));)9===i?f+=4-(f+e.bsCount[h]+(s?1:0))%4:f++,D++;u=D>=E,m.push(e.bsCount[h]),e.bsCount[h]=e.sCount[h]+1+(v?1:0),k.push(e.sCount[h]),e.sCount[h]=f-l,b.push(e.tShift[h]),e.tShift[h]=D-e.bMarks[h];}for(_=e.blkIndent,e.blkIndent=0,(C=e.push("blockquote_open","blockquote",1)).markup=">",C.map=p=[r,0],e.md.block.tokenize(e,r,h),(C=e.push("blockquote_close","blockquote",-1)).markup=">",e.lineMax=w,e.parentType=g,p[1]=e.line,a=0;a<b.length;a++)e.bMarks[a+r]=d[a],e.tShift[a+r]=b[a],e.sCount[a+r]=k[a],e.bsCount[a+r]=m[a];return e.blkIndent=_,!0};},{"../common/utils":4}],19:[function(e,r,t){r.exports=function(e,r,t){var n,o,s;if(e.sCount[r]-e.blkIndent<4)return !1;for(o=n=r+1;n<t;)if(e.isEmpty(n))n++;else{if(!(e.sCount[n]-e.blkIndent>=4))break;o=++n;}return e.line=o,(s=e.push("code_block","code",0)).content=e.getLines(r,o,4+e.blkIndent,!0),s.map=[r,e.line],!0};},{}],20:[function(e,r,t){r.exports=function(e,r,t,n){var o,s,i,a,l,c,u,p=!1,h=e.bMarks[r]+e.tShift[r],f=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(h+3>f)return !1;if(126!==(o=e.src.charCodeAt(h))&&96!==o)return !1;if(l=h,h=e.skipChars(h,o),(s=h-l)<3)return !1;if(u=e.src.slice(l,h),i=e.src.slice(h,f),96===o&&i.indexOf(String.fromCharCode(o))>=0)return !1;if(n)return !0;for(a=r;!(++a>=t||(h=l=e.bMarks[a]+e.tShift[a],f=e.eMarks[a],h<f&&e.sCount[a]<e.blkIndent));)if(e.src.charCodeAt(h)===o&&!(e.sCount[a]-e.blkIndent>=4||(h=e.skipChars(h,o))-l<s||(h=e.skipSpaces(h))<f)){p=!0;break}return s=e.sCount[r],e.line=a+(p?1:0),(c=e.push("fence","code",0)).info=i,c.content=e.getLines(r+1,a,s,!0),c.markup=u,c.map=[r,e.line],!0};},{}],21:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(35!==(s=e.src.charCodeAt(c))||c>=u)return !1;for(i=1,s=e.src.charCodeAt(++c);35===s&&c<u&&i<=6;)i++,s=e.src.charCodeAt(++c);return !(i>6||c<u&&!n(s)||!o&&(u=e.skipSpacesBack(u,c),(a=e.skipCharsBack(u,35,c))>c&&n(e.src.charCodeAt(a-1))&&(u=a),e.line=r+1,(l=e.push("heading_open","h"+String(i),1)).markup="########".slice(0,i),l.map=[r,e.line],(l=e.push("inline","",0)).content=e.src.slice(c,u).trim(),l.map=[r,e.line],l.children=[],(l=e.push("heading_close","h"+String(i),-1)).markup="########".slice(0,i),0))};},{"../common/utils":4}],22:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r,t,o){var s,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(42!==(s=e.src.charCodeAt(c++))&&45!==s&&95!==s)return !1;for(i=1;c<u;){if((a=e.src.charCodeAt(c++))!==s&&!n(a))return !1;a===s&&i++;}return !(i<3||!o&&(e.line=r+1,(l=e.push("hr","hr",0)).map=[r,e.line],l.markup=Array(i+1).join(String.fromCharCode(s)),0))};},{"../common/utils":4}],23:[function(e,r,t){var n=e("../common/html_blocks"),o=e("../common/html_re").HTML_OPEN_CLOSE_TAG_RE,s=[[/^<(script|pre|style)(?=(\s|>|$))/i,/<\/(script|pre|style)>/i,!0],[/^<!--/,/-->/,!0],[/^<\?/,/\?>/,!0],[/^<![A-Z]/,/>/,!0],[/^<!\[CDATA\[/,/\]\]>/,!0],[new RegExp("^</?("+n.join("|")+")(?=(\\s|/?>|$))","i"),/^$/,!0],[new RegExp(o.source+"\\s*$"),/^$/,!1]];r.exports=function(e,r,t,n){var o,i,a,l,c=e.bMarks[r]+e.tShift[r],u=e.eMarks[r];if(e.sCount[r]-e.blkIndent>=4)return !1;if(!e.md.options.html)return !1;if(60!==e.src.charCodeAt(c))return !1;for(l=e.src.slice(c,u),o=0;o<s.length&&!s[o][0].test(l);o++);if(o===s.length)return !1;if(n)return s[o][2];if(i=r+1,!s[o][1].test(l))for(;i<t&&!(e.sCount[i]<e.blkIndent);i++)if(c=e.bMarks[i]+e.tShift[i],u=e.eMarks[i],l=e.src.slice(c,u),s[o][1].test(l)){0!==l.length&&i++;break}return e.line=i,(a=e.push("html_block","",0)).map=[r,i],a.content=e.getLines(r,i,e.blkIndent,!0),!0};},{"../common/html_blocks":2,"../common/html_re":3}],24:[function(e,r,t){r.exports=function(e,r,t){var n,o,s,i,a,l,c,u,p,h,f=r+1,d=e.md.block.ruler.getRules("paragraph");if(e.sCount[r]-e.blkIndent>=4)return !1;for(h=e.parentType,e.parentType="paragraph";f<t&&!e.isEmpty(f);f++)if(!(e.sCount[f]-e.blkIndent>3)){if(e.sCount[f]>=e.blkIndent&&(l=e.bMarks[f]+e.tShift[f],c=e.eMarks[f],l<c&&(45===(p=e.src.charCodeAt(l))||61===p)&&(l=e.skipChars(l,p),(l=e.skipSpaces(l))>=c))){u=61===p?1:2;break}if(!(e.sCount[f]<0)){for(o=!1,s=0,i=d.length;s<i;s++)if(d[s](e,f,t,!0)){o=!0;break}if(o)break}}return !!u&&(n=e.getLines(r,f,e.blkIndent,!1).trim(),e.line=f+1,(a=e.push("heading_open","h"+String(u),1)).markup=String.fromCharCode(p),a.map=[r,e.line],(a=e.push("inline","",0)).content=n,a.map=[r,e.line-1],a.children=[],(a=e.push("heading_close","h"+String(u),-1)).markup=String.fromCharCode(p),e.parentType=h,!0)};},{}],25:[function(e,r,t){var n=e("../common/utils").isSpace;function o(e,r){var t,o,s,i;return o=e.bMarks[r]+e.tShift[r],s=e.eMarks[r],42!==(t=e.src.charCodeAt(o++))&&45!==t&&43!==t?-1:o<s&&(i=e.src.charCodeAt(o),!n(i))?-1:o}function s(e,r){var t,o=e.bMarks[r]+e.tShift[r],s=o,i=e.eMarks[r];if(s+1>=i)return -1;if((t=e.src.charCodeAt(s++))<48||t>57)return -1;for(;;){if(s>=i)return -1;if(!((t=e.src.charCodeAt(s++))>=48&&t<=57)){if(41===t||46===t)break;return -1}if(s-o>=10)return -1}return s<i&&(t=e.src.charCodeAt(s),!n(t))?-1:s}r.exports=function(e,r,t,n){var i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w,D,E,q,F,S,L,z,T,I=!1,R=!0;if(e.sCount[r]-e.blkIndent>=4)return !1;if(e.listIndent>=0&&e.sCount[r]-e.listIndent>=4&&e.sCount[r]<e.blkIndent)return !1;if(n&&"paragraph"===e.parentType&&e.tShift[r]>=e.blkIndent&&(I=!0),(q=s(e,r))>=0){if(h=!0,S=e.bMarks[r]+e.tShift[r],k=Number(e.src.substr(S,q-S-1)),I&&1!==k)return !1}else{if(!((q=o(e,r))>=0))return !1;h=!1;}if(I&&e.skipSpaces(q)>=e.eMarks[r])return !1;if(g=e.src.charCodeAt(q-1),n)return !0;for(_=e.tokens.length,h?(T=e.push("ordered_list_open","ol",1),1!==k&&(T.attrs=[["start",k]])):T=e.push("bullet_list_open","ul",1),T.map=m=[r,0],T.markup=String.fromCharCode(g),v=r,F=!1,z=e.md.block.ruler.getRules("list"),C=e.parentType,e.parentType="list";v<t;){for(E=q,b=e.eMarks[v],p=y=e.sCount[v]+q-(e.bMarks[r]+e.tShift[r]);E<b;){if(9===(i=e.src.charCodeAt(E)))y+=4-(y+e.bsCount[v])%4;else{if(32!==i)break;y++;}E++;}if((u=(a=E)>=b?1:y-p)>4&&(u=1),c=p+u,(T=e.push("list_item_open","li",1)).markup=String.fromCharCode(g),T.map=f=[r,0],D=e.tight,w=e.tShift[r],A=e.sCount[r],x=e.listIndent,e.listIndent=e.blkIndent,e.blkIndent=c,e.tight=!0,e.tShift[r]=a-e.bMarks[r],e.sCount[r]=y,a>=b&&e.isEmpty(r+1)?e.line=Math.min(e.line+2,t):e.md.block.tokenize(e,r,t,!0),e.tight&&!F||(R=!1),F=e.line-r>1&&e.isEmpty(e.line-1),e.blkIndent=e.listIndent,e.listIndent=x,e.tShift[r]=w,e.sCount[r]=A,e.tight=D,(T=e.push("list_item_close","li",-1)).markup=String.fromCharCode(g),v=r=e.line,f[1]=v,a=e.bMarks[r],v>=t)break;if(e.sCount[v]<e.blkIndent)break;if(e.sCount[r]-e.blkIndent>=4)break;for(L=!1,l=0,d=z.length;l<d;l++)if(z[l](e,v,t,!0)){L=!0;break}if(L)break;if(h){if((q=s(e,v))<0)break}else if((q=o(e,v))<0)break;if(g!==e.src.charCodeAt(q-1))break}return (T=h?e.push("ordered_list_close","ol",-1):e.push("bullet_list_close","ul",-1)).markup=String.fromCharCode(g),m[1]=v,e.line=v,e.parentType=C,R&&function(e,r){var t,n,o=e.level+2;for(t=r+2,n=e.tokens.length-2;t<n;t++)e.tokens[t].level===o&&"paragraph_open"===e.tokens[t].type&&(e.tokens[t+2].hidden=!0,e.tokens[t].hidden=!0,t+=2);}(e,_),!0};},{"../common/utils":4}],26:[function(e,r,t){r.exports=function(e,r){var t,n,o,s,i,a,l=r+1,c=e.md.block.ruler.getRules("paragraph"),u=e.lineMax;for(a=e.parentType,e.parentType="paragraph";l<u&&!e.isEmpty(l);l++)if(!(e.sCount[l]-e.blkIndent>3||e.sCount[l]<0)){for(n=!1,o=0,s=c.length;o<s;o++)if(c[o](e,l,u,!0)){n=!0;break}if(n)break}return t=e.getLines(r,l,e.blkIndent,!1).trim(),e.line=l,(i=e.push("paragraph_open","p",1)).map=[r,e.line],(i=e.push("inline","",0)).content=t,i.map=[r,e.line],i.children=[],i=e.push("paragraph_close","p",-1),e.parentType=a,!0};},{}],27:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r,t,s){var i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y,x=0,C=e.bMarks[r]+e.tShift[r],A=e.eMarks[r],w=r+1;if(e.sCount[r]-e.blkIndent>=4)return !1;if(91!==e.src.charCodeAt(C))return !1;for(;++C<A;)if(93===e.src.charCodeAt(C)&&92!==e.src.charCodeAt(C-1)){if(C+1===A)return !1;if(58!==e.src.charCodeAt(C+1))return !1;break}for(c=e.lineMax,v=e.md.block.ruler.getRules("reference"),m=e.parentType,e.parentType="reference";w<c&&!e.isEmpty(w);w++)if(!(e.sCount[w]-e.blkIndent>3||e.sCount[w]<0)){for(b=!1,p=0,h=v.length;p<h;p++)if(v[p](e,w,c,!0)){b=!0;break}if(b)break}for(k=e.getLines(r,w,e.blkIndent,!1).trim(),A=k.length,C=1;C<A;C++){if(91===(i=k.charCodeAt(C)))return !1;if(93===i){d=C;break}10===i?x++:92===i&&++C<A&&10===k.charCodeAt(C)&&x++;}if(d<0||58!==k.charCodeAt(d+1))return !1;for(C=d+2;C<A;C++)if(10===(i=k.charCodeAt(C)))x++;else if(!o(i))break;if(!(_=e.md.helpers.parseLinkDestination(k,C,A)).ok)return !1;if(u=e.md.normalizeLink(_.str),!e.md.validateLink(u))return !1;for(C=_.pos,x+=_.lines,a=C,l=x,g=C;C<A;C++)if(10===(i=k.charCodeAt(C)))x++;else if(!o(i))break;for(_=e.md.helpers.parseLinkTitle(k,C,A),C<A&&g!==C&&_.ok?(y=_.str,C=_.pos,x+=_.lines):(y="",C=a,x=l);C<A&&(i=k.charCodeAt(C),o(i));)C++;if(C<A&&10!==k.charCodeAt(C)&&y)for(y="",C=a,x=l;C<A&&(i=k.charCodeAt(C),o(i));)C++;return !(C<A&&10!==k.charCodeAt(C)||!(f=n(k.slice(1,d)))||!s&&(void 0===e.env.references&&(e.env.references={}),void 0===e.env.references[f]&&(e.env.references[f]={title:y,href:u}),e.parentType=m,e.line=r+x+1,0))};},{"../common/utils":4}],28:[function(e,r,t){var n=e("../token"),o=e("../common/utils").isSpace;function s(e,r,t,n){var s,i,a,l,c,u,p,h;for(this.src=e,this.md=r,this.env=t,this.tokens=n,this.bMarks=[],this.eMarks=[],this.tShift=[],this.sCount=[],this.bsCount=[],this.blkIndent=0,this.line=0,this.lineMax=0,this.tight=!1,this.ddIndent=-1,this.listIndent=-1,this.parentType="root",this.level=0,this.result="",i=this.src,h=!1,a=l=u=p=0,c=i.length;l<c;l++){if(s=i.charCodeAt(l),!h){if(o(s)){u++,9===s?p+=4-p%4:p++;continue}h=!0;}10!==s&&l!==c-1||(10!==s&&l++,this.bMarks.push(a),this.eMarks.push(l),this.tShift.push(u),this.sCount.push(p),this.bsCount.push(0),h=!1,u=0,p=0,a=l+1);}this.bMarks.push(i.length),this.eMarks.push(i.length),this.tShift.push(0),this.sCount.push(0),this.bsCount.push(0),this.lineMax=this.bMarks.length-1;}s.prototype.push=function(e,r,t){var o=new n(e,r,t);return o.block=!0,t<0&&this.level--,o.level=this.level,t>0&&this.level++,this.tokens.push(o),o},s.prototype.isEmpty=function(e){return this.bMarks[e]+this.tShift[e]>=this.eMarks[e]},s.prototype.skipEmptyLines=function(e){for(var r=this.lineMax;e<r&&!(this.bMarks[e]+this.tShift[e]<this.eMarks[e]);e++);return e},s.prototype.skipSpaces=function(e){for(var r,t=this.src.length;e<t&&(r=this.src.charCodeAt(e),o(r));e++);return e},s.prototype.skipSpacesBack=function(e,r){if(e<=r)return e;for(;e>r;)if(!o(this.src.charCodeAt(--e)))return e+1;return e},s.prototype.skipChars=function(e,r){for(var t=this.src.length;e<t&&this.src.charCodeAt(e)===r;e++);return e},s.prototype.skipCharsBack=function(e,r,t){if(e<=t)return e;for(;e>t;)if(r!==this.src.charCodeAt(--e))return e+1;return e},s.prototype.getLines=function(e,r,t,n){var s,i,a,l,c,u,p,h=e;if(e>=r)return "";for(u=new Array(r-e),s=0;h<r;h++,s++){for(i=0,p=l=this.bMarks[h],c=h+1<r||n?this.eMarks[h]+1:this.eMarks[h];l<c&&i<t;){if(a=this.src.charCodeAt(l),o(a))9===a?i+=4-(i+this.bsCount[h])%4:i++;else{if(!(l-p<this.tShift[h]))break;i++;}l++;}u[s]=i>t?new Array(i-t+1).join(" ")+this.src.slice(l,c):this.src.slice(l,c);}return u.join("")},s.prototype.Token=n,r.exports=s;},{"../common/utils":4,"../token":51}],29:[function(e,r,t){var n=e("../common/utils").isSpace;function o(e,r){var t=e.bMarks[r]+e.blkIndent,n=e.eMarks[r];return e.src.substr(t,n-t)}function s(e){var r,t=[],n=0,o=e.length,s=0,i=0,a=!1,l=0;for(r=e.charCodeAt(n);n<o;)96===r?a?(a=!1,l=n):s%2==0&&(a=!0,l=n):124!==r||s%2!=0||a||(t.push(e.substring(i,n)),i=n+1),92===r?s++:s=0,++n===o&&a&&(a=!1,n=l+1),r=e.charCodeAt(n);return t.push(e.substring(i)),t}r.exports=function(e,r,t,i){var a,l,c,u,p,h,f,d,m,_,g,k;if(r+2>t)return !1;if(p=r+1,e.sCount[p]<e.blkIndent)return !1;if(e.sCount[p]-e.blkIndent>=4)return !1;if((c=e.bMarks[p]+e.tShift[p])>=e.eMarks[p])return !1;if(124!==(a=e.src.charCodeAt(c++))&&45!==a&&58!==a)return !1;for(;c<e.eMarks[p];){if(124!==(a=e.src.charCodeAt(c))&&45!==a&&58!==a&&!n(a))return !1;c++;}for(l=o(e,r+1),h=l.split("|"),m=[],u=0;u<h.length;u++){if(!(_=h[u].trim())){if(0===u||u===h.length-1)continue;return !1}if(!/^:?-+:?$/.test(_))return !1;58===_.charCodeAt(_.length-1)?m.push(58===_.charCodeAt(0)?"center":"right"):58===_.charCodeAt(0)?m.push("left"):m.push("");}if(-1===(l=o(e,r).trim()).indexOf("|"))return !1;if(e.sCount[r]-e.blkIndent>=4)return !1;if(h=s(l.replace(/^\||\|$/g,"")),(f=h.length)>m.length)return !1;if(i)return !0;for((d=e.push("table_open","table",1)).map=g=[r,0],(d=e.push("thead_open","thead",1)).map=[r,r+1],(d=e.push("tr_open","tr",1)).map=[r,r+1],u=0;u<h.length;u++)(d=e.push("th_open","th",1)).map=[r,r+1],m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=e.push("inline","",0)).content=h[u].trim(),d.map=[r,r+1],d.children=[],d=e.push("th_close","th",-1);for(d=e.push("tr_close","tr",-1),d=e.push("thead_close","thead",-1),(d=e.push("tbody_open","tbody",1)).map=k=[r+2,0],p=r+2;p<t&&!(e.sCount[p]<e.blkIndent)&&-1!==(l=o(e,p).trim()).indexOf("|")&&!(e.sCount[p]-e.blkIndent>=4);p++){for(h=s(l.replace(/^\||\|$/g,"")),d=e.push("tr_open","tr",1),u=0;u<f;u++)d=e.push("td_open","td",1),m[u]&&(d.attrs=[["style","text-align:"+m[u]]]),(d=e.push("inline","",0)).content=h[u]?h[u].trim():"",d.children=[],d=e.push("td_close","td",-1);d=e.push("tr_close","tr",-1);}return d=e.push("tbody_close","tbody",-1),d=e.push("table_close","table",-1),g[1]=k[1]=p,e.line=p,!0};},{"../common/utils":4}],30:[function(e,r,t){r.exports=function(e){var r;e.inlineMode?((r=new e.Token("inline","",0)).content=e.src,r.map=[0,1],r.children=[],e.tokens.push(r)):e.md.block.parse(e.src,e.md,e.env,e.tokens);};},{}],31:[function(e,r,t){r.exports=function(e){var r,t,n,o=e.tokens;for(t=0,n=o.length;t<n;t++)"inline"===(r=o[t]).type&&e.md.inline.parse(r.content,e.md,e.env,r.children);};},{}],32:[function(e,r,t){var n=e("../common/utils").arrayReplaceAt;function o(e){return /^<\/a\s*>/i.test(e)}r.exports=function(e){var r,t,s,i,a,l,c,u,p,h,f,d,m,_,g,k,b,v,y=e.tokens;if(e.md.options.linkify)for(t=0,s=y.length;t<s;t++)if("inline"===y[t].type&&e.md.linkify.pretest(y[t].content))for(i=y[t].children,m=0,r=i.length-1;r>=0;r--)if("link_close"!==(l=i[r]).type){if("html_inline"===l.type&&(v=l.content,/^<a[>\s]/i.test(v)&&m>0&&m--,o(l.content)&&m++),!(m>0)&&"text"===l.type&&e.md.linkify.test(l.content)){for(p=l.content,b=e.md.linkify.match(p),c=[],d=l.level,f=0,u=0;u<b.length;u++)_=b[u].url,g=e.md.normalizeLink(_),e.md.validateLink(g)&&(k=b[u].text,k=b[u].schema?"mailto:"!==b[u].schema||/^mailto:/i.test(k)?e.md.normalizeLinkText(k):e.md.normalizeLinkText("mailto:"+k).replace(/^mailto:/,""):e.md.normalizeLinkText("http://"+k).replace(/^http:\/\//,""),(h=b[u].index)>f&&((a=new e.Token("text","",0)).content=p.slice(f,h),a.level=d,c.push(a)),(a=new e.Token("link_open","a",1)).attrs=[["href",g]],a.level=d++,a.markup="linkify",a.info="auto",c.push(a),(a=new e.Token("text","",0)).content=k,a.level=d,c.push(a),(a=new e.Token("link_close","a",-1)).level=--d,a.markup="linkify",a.info="auto",c.push(a),f=b[u].lastIndex);f<p.length&&((a=new e.Token("text","",0)).content=p.slice(f),a.level=d,c.push(a)),y[t].children=i=n(i,r,c);}}else for(r--;i[r].level!==l.level&&"link_open"!==i[r].type;)r--;};},{"../common/utils":4}],33:[function(e,r,t){var n=/\r\n?|\n/g,o=/\0/g;r.exports=function(e){var r;r=(r=e.src.replace(n,"\n")).replace(o,"�"),e.src=r;};},{}],34:[function(e,r,t){var n=/\+-|\.\.|\?\?\?\?|!!!!|,,|--/,o=/\((c|tm|r|p)\)/i,s=/\((c|tm|r|p)\)/gi,i={c:"©",r:"®",p:"§",tm:"™"};function a(e,r){return i[r.toLowerCase()]}function l(e){var r,t,n=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||n||(t.content=t.content.replace(s,a)),"link_open"===t.type&&"auto"===t.info&&n--,"link_close"===t.type&&"auto"===t.info&&n++;}function c(e){var r,t,o=0;for(r=e.length-1;r>=0;r--)"text"!==(t=e[r]).type||o||n.test(t.content)&&(t.content=t.content.replace(/\+-/g,"±").replace(/\.{2,}/g,"…").replace(/([?!])…/g,"$1..").replace(/([?!]){4,}/g,"$1$1$1").replace(/,{2,}/g,",").replace(/(^|[^-])---([^-]|$)/gm,"$1—$2").replace(/(^|\s)--(\s|$)/gm,"$1–$2").replace(/(^|[^-\s])--([^-\s]|$)/gm,"$1–$2")),"link_open"===t.type&&"auto"===t.info&&o--,"link_close"===t.type&&"auto"===t.info&&o++;}r.exports=function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&(o.test(e.tokens[r].content)&&l(e.tokens[r].children),n.test(e.tokens[r].content)&&c(e.tokens[r].children));};},{}],35:[function(e,r,t){var n=e("../common/utils").isWhiteSpace,o=e("../common/utils").isPunctChar,s=e("../common/utils").isMdAsciiPunct,i=/['"]/,a=/['"]/g,l="’";function c(e,r,t){return e.substr(0,r)+t+e.substr(r+1)}function u(e,r){var t,i,u,p,h,f,d,m,_,g,k,b,v,y,x,C,A,w,D,E,q;for(D=[],t=0;t<e.length;t++){for(i=e[t],d=e[t].level,A=D.length-1;A>=0&&!(D[A].level<=d);A--);if(D.length=A+1,"text"===i.type){u=i.content,h=0,f=u.length;e:for(;h<f&&(a.lastIndex=h,p=a.exec(u));){if(x=C=!0,h=p.index+1,w="'"===p[0],_=32,p.index-1>=0)_=u.charCodeAt(p.index-1);else for(A=t-1;A>=0&&"softbreak"!==e[A].type&&"hardbreak"!==e[A].type;A--)if("text"===e[A].type){_=e[A].content.charCodeAt(e[A].content.length-1);break}if(g=32,h<f)g=u.charCodeAt(h);else for(A=t+1;A<e.length&&"softbreak"!==e[A].type&&"hardbreak"!==e[A].type;A++)if("text"===e[A].type){g=e[A].content.charCodeAt(0);break}if(k=s(_)||o(String.fromCharCode(_)),b=s(g)||o(String.fromCharCode(g)),v=n(_),(y=n(g))?x=!1:b&&(v||k||(x=!1)),v?C=!1:k&&(y||b||(C=!1)),34===g&&'"'===p[0]&&_>=48&&_<=57&&(C=x=!1),x&&C&&(x=!1,C=b),x||C){if(C)for(A=D.length-1;A>=0&&(m=D[A],!(D[A].level<d));A--)if(m.single===w&&D[A].level===d){m=D[A],w?(E=r.md.options.quotes[2],q=r.md.options.quotes[3]):(E=r.md.options.quotes[0],q=r.md.options.quotes[1]),i.content=c(i.content,p.index,q),e[m.token].content=c(e[m.token].content,m.pos,E),h+=q.length-1,m.token===t&&(h+=E.length-1),u=i.content,f=u.length,D.length=A;continue e}x?D.push({token:t,pos:p.index,single:w,level:d}):C&&w&&(i.content=c(i.content,p.index,l));}else w&&(i.content=c(i.content,p.index,l));}}}}r.exports=function(e){var r;if(e.md.options.typographer)for(r=e.tokens.length-1;r>=0;r--)"inline"===e.tokens[r].type&&i.test(e.tokens[r].content)&&u(e.tokens[r].children,e);};},{"../common/utils":4}],36:[function(e,r,t){var n=e("../token");function o(e,r,t){this.src=e,this.env=t,this.tokens=[],this.inlineMode=!1,this.md=r;}o.prototype.Token=n,r.exports=o;},{"../token":51}],37:[function(e,r,t){var n=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,o=/^<([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)>/;r.exports=function(e,r){var t,s,i,a,l,c,u=e.pos;return !(60!==e.src.charCodeAt(u)||(t=e.src.slice(u)).indexOf(">")<0||(o.test(t)?(s=t.match(o),a=s[0].slice(1,-1),l=e.md.normalizeLink(a),!e.md.validateLink(l)||(r||((c=e.push("link_open","a",1)).attrs=[["href",l]],c.markup="autolink",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(a),(c=e.push("link_close","a",-1)).markup="autolink",c.info="auto"),e.pos+=s[0].length,0)):!n.test(t)||(i=t.match(n),a=i[0].slice(1,-1),l=e.md.normalizeLink("mailto:"+a),!e.md.validateLink(l)||(r||((c=e.push("link_open","a",1)).attrs=[["href",l]],c.markup="autolink",c.info="auto",(c=e.push("text","",0)).content=e.md.normalizeLinkText(a),(c=e.push("link_close","a",-1)).markup="autolink",c.info="auto"),e.pos+=i[0].length,0))))};},{}],38:[function(e,r,t){r.exports=function(e,r){var t,n,o,s,i,a,l=e.pos,c=e.src.charCodeAt(l);if(96!==c)return !1;for(t=l,l++,n=e.posMax;l<n&&96===e.src.charCodeAt(l);)l++;for(o=e.src.slice(t,l),s=i=l;-1!==(s=e.src.indexOf("`",i));){for(i=s+1;i<n&&96===e.src.charCodeAt(i);)i++;if(i-s===o.length)return r||((a=e.push("code_inline","code",0)).markup=o,a.content=e.src.slice(l,s).replace(/\n/g," ").replace(/^ (.+) $/,"$1")),e.pos=i,!0}return r||(e.pending+=o),e.pos+=o.length,!0};},{}],39:[function(e,r,t){function n(e,r){var t,n,o,s,i,a,l,c,u={},p=r.length;for(t=0;t<p;t++)if((o=r[t]).length=o.length||0,o.close){for(u.hasOwnProperty(o.marker)||(u[o.marker]=[-1,-1,-1]),i=u[o.marker][o.length%3],a=-1,n=t-o.jump-1;n>i;n-=s.jump+1)if((s=r[n]).marker===o.marker&&(-1===a&&(a=n),s.open&&s.end<0&&s.level===o.level&&(l=!1,(s.close||o.open)&&(s.length+o.length)%3==0&&(s.length%3==0&&o.length%3==0||(l=!0)),!l))){c=n>0&&!r[n-1].open?r[n-1].jump+1:0,o.jump=t-n+c,o.open=!1,s.end=t,s.jump=c,s.close=!1,a=-1;break}-1!==a&&(u[o.marker][(o.length||0)%3]=a);}}r.exports=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(0,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(0,t[r].delimiters);};},{}],40:[function(e,r,t){function n(e,r){var t,n,o,s,i,a,l=r.length;for(t=l-1;t>=0;t--)95!==(n=r[t]).marker&&42!==n.marker||-1!==n.end&&(o=r[n.end],a=t>0&&r[t-1].end===n.end+1&&r[t-1].token===n.token-1&&r[n.end+1].token===o.token+1&&r[t-1].marker===n.marker,i=String.fromCharCode(n.marker),(s=e.tokens[n.token]).type=a?"strong_open":"em_open",s.tag=a?"strong":"em",s.nesting=1,s.markup=a?i+i:i,s.content="",(s=e.tokens[o.token]).type=a?"strong_close":"em_close",s.tag=a?"strong":"em",s.nesting=-1,s.markup=a?i+i:i,s.content="",a&&(e.tokens[r[t-1].token].content="",e.tokens[r[n.end+1].token].content="",t--));}r.exports.tokenize=function(e,r){var t,n,o=e.pos,s=e.src.charCodeAt(o);if(r)return !1;if(95!==s&&42!==s)return !1;for(n=e.scanDelims(e.pos,42===s),t=0;t<n.length;t++)e.push("text","",0).content=String.fromCharCode(s),e.delimiters.push({marker:s,length:n.length,jump:t,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},r.exports.postProcess=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(e,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(e,t[r].delimiters);};},{}],41:[function(e,r,t){var n=e("../common/entities"),o=e("../common/utils").has,s=e("../common/utils").isValidEntityCode,i=e("../common/utils").fromCodePoint,a=/^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i,l=/^&([a-z][a-z0-9]{1,31});/i;r.exports=function(e,r){var t,c,u=e.pos,p=e.posMax;if(38!==e.src.charCodeAt(u))return !1;if(u+1<p)if(35===e.src.charCodeAt(u+1)){if(c=e.src.slice(u).match(a))return r||(t="x"===c[1][0].toLowerCase()?parseInt(c[1].slice(1),16):parseInt(c[1],10),e.pending+=s(t)?i(t):i(65533)),e.pos+=c[0].length,!0}else if((c=e.src.slice(u).match(l))&&o(n,c[1]))return r||(e.pending+=n[c[1]]),e.pos+=c[0].length,!0;return r||(e.pending+="&"),e.pos++,!0};},{"../common/entities":1,"../common/utils":4}],42:[function(e,r,t){for(var n=e("../common/utils").isSpace,o=[],s=0;s<256;s++)o.push(0);"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(e){o[e.charCodeAt(0)]=1;}),r.exports=function(e,r){var t,s=e.pos,i=e.posMax;if(92!==e.src.charCodeAt(s))return !1;if(++s<i){if((t=e.src.charCodeAt(s))<256&&0!==o[t])return r||(e.pending+=e.src[s]),e.pos+=2,!0;if(10===t){for(r||e.push("hardbreak","br",0),s++;s<i&&(t=e.src.charCodeAt(s),n(t));)s++;return e.pos=s,!0}}return r||(e.pending+="\\"),e.pos++,!0};},{"../common/utils":4}],43:[function(e,r,t){var n=e("../common/html_re").HTML_TAG_RE;r.exports=function(e,r){var t,o,s,i=e.pos;return !(!e.md.options.html||(s=e.posMax,60!==e.src.charCodeAt(i)||i+2>=s||33!==(t=e.src.charCodeAt(i+1))&&63!==t&&47!==t&&!function(e){var r=32|e;return r>=97&&r<=122}(t)||!(o=e.src.slice(i).match(n))||(r||(e.push("html_inline","",0).content=e.src.slice(i,i+o[0].length)),e.pos+=o[0].length,0)))};},{"../common/html_re":3}],44:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r){var t,s,i,a,l,c,u,p,h,f,d,m,_,g="",k=e.pos,b=e.posMax;if(33!==e.src.charCodeAt(e.pos))return !1;if(91!==e.src.charCodeAt(e.pos+1))return !1;if(c=e.pos+2,(l=e.md.helpers.parseLinkLabel(e,e.pos+1,!1))<0)return !1;if((u=l+1)<b&&40===e.src.charCodeAt(u)){for(u++;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);if(u>=b)return !1;for(_=u,(h=e.md.helpers.parseLinkDestination(e.src,u,e.posMax)).ok&&(g=e.md.normalizeLink(h.str),e.md.validateLink(g)?u=h.pos:g=""),_=u;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);if(h=e.md.helpers.parseLinkTitle(e.src,u,e.posMax),u<b&&_!==u&&h.ok)for(f=h.str,u=h.pos;u<b&&(s=e.src.charCodeAt(u),o(s)||10===s);u++);else f="";if(u>=b||41!==e.src.charCodeAt(u))return e.pos=k,!1;u++;}else{if(void 0===e.env.references)return !1;if(u<b&&91===e.src.charCodeAt(u)?(_=u+1,(u=e.md.helpers.parseLinkLabel(e,u))>=0?a=e.src.slice(_,u++):u=l+1):u=l+1,a||(a=e.src.slice(c,l)),!(p=e.env.references[n(a)]))return e.pos=k,!1;g=p.href,f=p.title;}return r||(i=e.src.slice(c,l),e.md.inline.parse(i,e.md,e.env,m=[]),(d=e.push("image","img",0)).attrs=t=[["src",g],["alt",""]],d.children=m,d.content=i,f&&t.push(["title",f])),e.pos=u,e.posMax=b,!0};},{"../common/utils":4}],45:[function(e,r,t){var n=e("../common/utils").normalizeReference,o=e("../common/utils").isSpace;r.exports=function(e,r){var t,s,i,a,l,c,u,p,h,f="",d=e.pos,m=e.posMax,_=e.pos,g=!0;if(91!==e.src.charCodeAt(e.pos))return !1;if(l=e.pos+1,(a=e.md.helpers.parseLinkLabel(e,e.pos,!0))<0)return !1;if((c=a+1)<m&&40===e.src.charCodeAt(c)){for(g=!1,c++;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);if(c>=m)return !1;for(_=c,(u=e.md.helpers.parseLinkDestination(e.src,c,e.posMax)).ok&&(f=e.md.normalizeLink(u.str),e.md.validateLink(f)?c=u.pos:f=""),_=c;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);if(u=e.md.helpers.parseLinkTitle(e.src,c,e.posMax),c<m&&_!==c&&u.ok)for(h=u.str,c=u.pos;c<m&&(s=e.src.charCodeAt(c),o(s)||10===s);c++);else h="";(c>=m||41!==e.src.charCodeAt(c))&&(g=!0),c++;}if(g){if(void 0===e.env.references)return !1;if(c<m&&91===e.src.charCodeAt(c)?(_=c+1,(c=e.md.helpers.parseLinkLabel(e,c))>=0?i=e.src.slice(_,c++):c=a+1):c=a+1,i||(i=e.src.slice(l,a)),!(p=e.env.references[n(i)]))return e.pos=d,!1;f=p.href,h=p.title;}return r||(e.pos=l,e.posMax=a,e.push("link_open","a",1).attrs=t=[["href",f]],h&&t.push(["title",h]),e.md.inline.tokenize(e),e.push("link_close","a",-1)),e.pos=c,e.posMax=m,!0};},{"../common/utils":4}],46:[function(e,r,t){var n=e("../common/utils").isSpace;r.exports=function(e,r){var t,o,s=e.pos;if(10!==e.src.charCodeAt(s))return !1;for(t=e.pending.length-1,o=e.posMax,r||(t>=0&&32===e.pending.charCodeAt(t)?t>=1&&32===e.pending.charCodeAt(t-1)?(e.pending=e.pending.replace(/ +$/,""),e.push("hardbreak","br",0)):(e.pending=e.pending.slice(0,-1),e.push("softbreak","br",0)):e.push("softbreak","br",0)),s++;s<o&&n(e.src.charCodeAt(s));)s++;return e.pos=s,!0};},{"../common/utils":4}],47:[function(e,r,t){var n=e("../token"),o=e("../common/utils").isWhiteSpace,s=e("../common/utils").isPunctChar,i=e("../common/utils").isMdAsciiPunct;function a(e,r,t,n){this.src=e,this.env=t,this.md=r,this.tokens=n,this.tokens_meta=Array(n.length),this.pos=0,this.posMax=this.src.length,this.level=0,this.pending="",this.pendingLevel=0,this.cache={},this.delimiters=[],this._prev_delimiters=[];}a.prototype.pushPending=function(){var e=new n("text","",0);return e.content=this.pending,e.level=this.pendingLevel,this.tokens.push(e),this.pending="",e},a.prototype.push=function(e,r,t){this.pending&&this.pushPending();var o=new n(e,r,t),s=null;return t<0&&(this.level--,this.delimiters=this._prev_delimiters.pop()),o.level=this.level,t>0&&(this.level++,this._prev_delimiters.push(this.delimiters),this.delimiters=[],s={delimiters:this.delimiters}),this.pendingLevel=this.level,this.tokens.push(o),this.tokens_meta.push(s),o},a.prototype.scanDelims=function(e,r){var t,n,a,l,c,u,p,h,f,d=e,m=!0,_=!0,g=this.posMax,k=this.src.charCodeAt(e);for(t=e>0?this.src.charCodeAt(e-1):32;d<g&&this.src.charCodeAt(d)===k;)d++;return a=d-e,n=d<g?this.src.charCodeAt(d):32,p=i(t)||s(String.fromCharCode(t)),f=i(n)||s(String.fromCharCode(n)),u=o(t),(h=o(n))?m=!1:f&&(u||p||(m=!1)),u?_=!1:p&&(h||f||(_=!1)),r?(l=m,c=_):(l=m&&(!_||p),c=_&&(!m||f)),{can_open:l,can_close:c,length:a}},a.prototype.Token=n,r.exports=a;},{"../common/utils":4,"../token":51}],48:[function(e,r,t){function n(e,r){var t,n,o,s,i,a=[],l=r.length;for(t=0;t<l;t++)126===(o=r[t]).marker&&-1!==o.end&&(s=r[o.end],(i=e.tokens[o.token]).type="s_open",i.tag="s",i.nesting=1,i.markup="~~",i.content="",(i=e.tokens[s.token]).type="s_close",i.tag="s",i.nesting=-1,i.markup="~~",i.content="","text"===e.tokens[s.token-1].type&&"~"===e.tokens[s.token-1].content&&a.push(s.token-1));for(;a.length;){for(t=a.pop(),n=t+1;n<e.tokens.length&&"s_close"===e.tokens[n].type;)n++;t!==--n&&(i=e.tokens[n],e.tokens[n]=e.tokens[t],e.tokens[t]=i);}}r.exports.tokenize=function(e,r){var t,n,o,s,i=e.pos,a=e.src.charCodeAt(i);if(r)return !1;if(126!==a)return !1;if(n=e.scanDelims(e.pos,!0),o=n.length,s=String.fromCharCode(a),o<2)return !1;for(o%2&&(e.push("text","",0).content=s,o--),t=0;t<o;t+=2)e.push("text","",0).content=s+s,e.delimiters.push({marker:a,length:0,jump:t,token:e.tokens.length-1,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0},r.exports.postProcess=function(e){var r,t=e.tokens_meta,o=e.tokens_meta.length;for(n(e,e.delimiters),r=0;r<o;r++)t[r]&&t[r].delimiters&&n(e,t[r].delimiters);};},{}],49:[function(e,r,t){function n(e){switch(e){case 10:case 33:case 35:case 36:case 37:case 38:case 42:case 43:case 45:case 58:case 60:case 61:case 62:case 64:case 91:case 92:case 93:case 94:case 95:case 96:case 123:case 125:case 126:return !0;default:return !1}}r.exports=function(e,r){for(var t=e.pos;t<e.posMax&&!n(e.src.charCodeAt(t));)t++;return t!==e.pos&&(r||(e.pending+=e.src.slice(e.pos,t)),e.pos=t,!0)};},{}],50:[function(e,r,t){r.exports=function(e){var r,t,n=0,o=e.tokens,s=e.tokens.length;for(r=t=0;r<s;r++)o[r].nesting<0&&n--,o[r].level=n,o[r].nesting>0&&n++,"text"===o[r].type&&r+1<s&&"text"===o[r+1].type?o[r+1].content=o[r].content+o[r+1].content:(r!==t&&(o[t]=o[r]),t++);r!==t&&(o.length=t);};},{}],51:[function(e,r,t){function n(e,r,t){this.type=e,this.tag=r,this.attrs=null,this.map=null,this.nesting=t,this.level=0,this.children=null,this.content="",this.markup="",this.info="",this.meta=null,this.block=!1,this.hidden=!1;}n.prototype.attrIndex=function(e){var r,t,n;if(!this.attrs)return -1;for(r=this.attrs,t=0,n=r.length;t<n;t++)if(r[t][0]===e)return t;return -1},n.prototype.attrPush=function(e){this.attrs?this.attrs.push(e):this.attrs=[e];},n.prototype.attrSet=function(e,r){var t=this.attrIndex(e),n=[e,r];t<0?this.attrPush(n):this.attrs[t]=n;},n.prototype.attrGet=function(e){var r=this.attrIndex(e),t=null;return r>=0&&(t=this.attrs[r][1]),t},n.prototype.attrJoin=function(e,r){var t=this.attrIndex(e);t<0?this.attrPush([e,r]):this.attrs[t][1]=this.attrs[t][1]+" "+r;},r.exports=n;},{}],52:[function(e,r,t){r.exports={Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"};},{}],53:[function(e,r,t){function n(e){var r=Array.prototype.slice.call(arguments,1);return r.forEach(function(r){r&&Object.keys(r).forEach(function(t){e[t]=r[t];});}),e}function o(e){return Object.prototype.toString.call(e)}function s(e){return "[object Function]"===o(e)}function i(e){return e.replace(/[.?*+^$[\]\\(){}|-]/g,"\\$&")}var a={fuzzyLink:!0,fuzzyEmail:!0,fuzzyIP:!1},l={"http:":{validate:function(e,r,t){var n=e.slice(r);return t.re.http||(t.re.http=new RegExp("^\\/\\/"+t.re.src_auth+t.re.src_host_port_strict+t.re.src_path,"i")),t.re.http.test(n)?n.match(t.re.http)[0].length:0}},"https:":"http:","ftp:":"http:","//":{validate:function(e,r,t){var n=e.slice(r);return t.re.no_http||(t.re.no_http=new RegExp("^"+t.re.src_auth+"(?:localhost|(?:(?:"+t.re.src_domain+")\\.)+"+t.re.src_domain_root+")"+t.re.src_port+t.re.src_host_terminator+t.re.src_path,"i")),t.re.no_http.test(n)?r>=3&&":"===e[r-3]?0:r>=3&&"/"===e[r-3]?0:n.match(t.re.no_http)[0].length:0}},"mailto:":{validate:function(e,r,t){var n=e.slice(r);return t.re.mailto||(t.re.mailto=new RegExp("^"+t.re.src_email_name+"@"+t.re.src_host_strict,"i")),t.re.mailto.test(n)?n.match(t.re.mailto)[0].length:0}}},c="a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]",u="biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");function p(r){var t=r.re=e("./lib/re")(r.__opts__),n=r.__tlds__.slice();function a(e){return e.replace("%TLDS%",t.src_tlds)}r.onCompile(),r.__tlds_replaced__||n.push(c),n.push(t.src_xn),t.src_tlds=n.join("|"),t.email_fuzzy=RegExp(a(t.tpl_email_fuzzy),"i"),t.link_fuzzy=RegExp(a(t.tpl_link_fuzzy),"i"),t.link_no_ip_fuzzy=RegExp(a(t.tpl_link_no_ip_fuzzy),"i"),t.host_fuzzy_test=RegExp(a(t.tpl_host_fuzzy_test),"i");var l=[];function u(e,r){throw new Error('(LinkifyIt) Invalid schema "'+e+'": '+r)}r.__compiled__={},Object.keys(r.__schemas__).forEach(function(e){var t=r.__schemas__[e];if(null!==t){var n,i={validate:null,link:null};if(r.__compiled__[e]=i,"[object Object]"===o(t))return function(e){return "[object RegExp]"===o(e)}(t.validate)?i.validate=(n=t.validate,function(e,r){var t=e.slice(r);return n.test(t)?t.match(n)[0].length:0}):s(t.validate)?i.validate=t.validate:u(e,t),void(s(t.normalize)?i.normalize=t.normalize:t.normalize?u(e,t):i.normalize=function(e,r){r.normalize(e);});!function(e){return "[object String]"===o(e)}(t)?u(e,t):l.push(e);}}),l.forEach(function(e){r.__compiled__[r.__schemas__[e]]&&(r.__compiled__[e].validate=r.__compiled__[r.__schemas__[e]].validate,r.__compiled__[e].normalize=r.__compiled__[r.__schemas__[e]].normalize);}),r.__compiled__[""]={validate:null,normalize:function(e,r){r.normalize(e);}};var p=Object.keys(r.__compiled__).filter(function(e){return e.length>0&&r.__compiled__[e]}).map(i).join("|");r.re.schema_test=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","i"),r.re.schema_search=RegExp("(^|(?!_)(?:[><｜]|"+t.src_ZPCc+"))("+p+")","ig"),r.re.pretest=RegExp("("+r.re.schema_test.source+")|("+r.re.host_fuzzy_test.source+")|@","i"),function(e){e.__index__=-1,e.__text_cache__="";}(r);}function h(e,r){var t=e.__index__,n=e.__last_index__,o=e.__text_cache__.slice(t,n);this.schema=e.__schema__.toLowerCase(),this.index=t+r,this.lastIndex=n+r,this.raw=o,this.text=o,this.url=o;}function f(e,r){var t=new h(e,r);return e.__compiled__[t.schema].normalize(t,e),t}function d(e,r){if(!(this instanceof d))return new d(e,r);var t;r||(t=e,Object.keys(t||{}).reduce(function(e,r){return e||a.hasOwnProperty(r)},!1)&&(r=e,e={})),this.__opts__=n({},a,r),this.__index__=-1,this.__last_index__=-1,this.__schema__="",this.__text_cache__="",this.__schemas__=n({},l,e),this.__compiled__={},this.__tlds__=u,this.__tlds_replaced__=!1,this.re={},p(this);}d.prototype.add=function(e,r){return this.__schemas__[e]=r,p(this),this},d.prototype.set=function(e){return this.__opts__=n(this.__opts__,e),this},d.prototype.test=function(e){if(this.__text_cache__=e,this.__index__=-1,!e.length)return !1;var r,t,n,o,s,i,a,l;if(this.re.schema_test.test(e))for((a=this.re.schema_search).lastIndex=0;null!==(r=a.exec(e));)if(o=this.testSchemaAt(e,r[2],a.lastIndex)){this.__schema__=r[2],this.__index__=r.index+r[1].length,this.__last_index__=r.index+r[0].length+o;break}return this.__opts__.fuzzyLink&&this.__compiled__["http:"]&&(l=e.search(this.re.host_fuzzy_test))>=0&&(this.__index__<0||l<this.__index__)&&null!==(t=e.match(this.__opts__.fuzzyIP?this.re.link_fuzzy:this.re.link_no_ip_fuzzy))&&(s=t.index+t[1].length,(this.__index__<0||s<this.__index__)&&(this.__schema__="",this.__index__=s,this.__last_index__=t.index+t[0].length)),this.__opts__.fuzzyEmail&&this.__compiled__["mailto:"]&&e.indexOf("@")>=0&&null!==(n=e.match(this.re.email_fuzzy))&&(s=n.index+n[1].length,i=n.index+n[0].length,(this.__index__<0||s<this.__index__||s===this.__index__&&i>this.__last_index__)&&(this.__schema__="mailto:",this.__index__=s,this.__last_index__=i)),this.__index__>=0},d.prototype.pretest=function(e){return this.re.pretest.test(e)},d.prototype.testSchemaAt=function(e,r,t){return this.__compiled__[r.toLowerCase()]?this.__compiled__[r.toLowerCase()].validate(e,t,this):0},d.prototype.match=function(e){var r=0,t=[];this.__index__>=0&&this.__text_cache__===e&&(t.push(f(this,r)),r=this.__last_index__);for(var n=r?e.slice(r):e;this.test(n);)t.push(f(this,r)),n=n.slice(this.__last_index__),r+=this.__last_index__;return t.length?t:null},d.prototype.tlds=function(e,r){return e=Array.isArray(e)?e:[e],r?(this.__tlds__=this.__tlds__.concat(e).sort().filter(function(e,r,t){return e!==t[r-1]}).reverse(),p(this),this):(this.__tlds__=e.slice(),this.__tlds_replaced__=!0,p(this),this)},d.prototype.normalize=function(e){e.schema||(e.url="http://"+e.url),"mailto:"!==e.schema||/^mailto:/i.test(e.url)||(e.url="mailto:"+e.url);},d.prototype.onCompile=function(){},r.exports=d;},{"./lib/re":54}],54:[function(e,r,t){r.exports=function(r){var t={};return t.src_Any=e("uc.micro/properties/Any/regex").source,t.src_Cc=e("uc.micro/categories/Cc/regex").source,t.src_Z=e("uc.micro/categories/Z/regex").source,t.src_P=e("uc.micro/categories/P/regex").source,t.src_ZPCc=[t.src_Z,t.src_P,t.src_Cc].join("|"),t.src_ZCc=[t.src_Z,t.src_Cc].join("|"),t.src_pseudo_letter="(?:(?![><｜]|"+t.src_ZPCc+")"+t.src_Any+")",t.src_ip4="(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)",t.src_auth="(?:(?:(?!"+t.src_ZCc+"|[@/\\[\\]()]).)+@)?",t.src_port="(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?",t.src_host_terminator="(?=$|[><｜]|"+t.src_ZPCc+")(?!-|_|:\\d|\\.-|\\.(?!$|"+t.src_ZPCc+"))",t.src_path="(?:[/?#](?:(?!"+t.src_ZCc+"|[><｜]|[()[\\]{}.,\"'?!\\-]).|\\[(?:(?!"+t.src_ZCc+"|\\]).)*\\]|\\((?:(?!"+t.src_ZCc+"|[)]).)*\\)|\\{(?:(?!"+t.src_ZCc+'|[}]).)*\\}|\\"(?:(?!'+t.src_ZCc+'|["]).)+\\"|\\\'(?:(?!'+t.src_ZCc+"|[']).)+\\'|\\'(?="+t.src_pseudo_letter+"|[-]).|\\.{2,4}[a-zA-Z0-9%/]|\\.(?!"+t.src_ZCc+"|[.]).|"+(r&&r["---"]?"\\-(?!--(?:[^-]|$))(?:-*)|":"\\-+|")+"\\,(?!"+t.src_ZCc+").|\\!(?!"+t.src_ZCc+"|[!]).|\\?(?!"+t.src_ZCc+"|[?]).)+|\\/)?",t.src_email_name='[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*',t.src_xn="xn--[a-z0-9\\-]{1,59}",t.src_domain_root="(?:"+t.src_xn+"|"+t.src_pseudo_letter+"{1,63})",t.src_domain="(?:"+t.src_xn+"|(?:"+t.src_pseudo_letter+")|(?:"+t.src_pseudo_letter+"(?:-|"+t.src_pseudo_letter+"){0,61}"+t.src_pseudo_letter+"))",t.src_host="(?:(?:(?:(?:"+t.src_domain+")\\.)*"+t.src_domain+"))",t.tpl_host_fuzzy="(?:"+t.src_ip4+"|(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%)))",t.tpl_host_no_ip_fuzzy="(?:(?:(?:"+t.src_domain+")\\.)+(?:%TLDS%))",t.src_host_strict=t.src_host+t.src_host_terminator,t.tpl_host_fuzzy_strict=t.tpl_host_fuzzy+t.src_host_terminator,t.src_host_port_strict=t.src_host+t.src_port+t.src_host_terminator,t.tpl_host_port_fuzzy_strict=t.tpl_host_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_port_no_ip_fuzzy_strict=t.tpl_host_no_ip_fuzzy+t.src_port+t.src_host_terminator,t.tpl_host_fuzzy_test="localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:"+t.src_ZPCc+"|>|$))",t.tpl_email_fuzzy='(^|[><｜]|"|\\(|'+t.src_ZCc+")("+t.src_email_name+"@"+t.tpl_host_fuzzy_strict+")",t.tpl_link_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_fuzzy_strict+t.src_path+")",t.tpl_link_no_ip_fuzzy="(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|"+t.src_ZPCc+"))((?![$+<=>^`|｜])"+t.tpl_host_port_no_ip_fuzzy_strict+t.src_path+")",t};},{"uc.micro/categories/Cc/regex":61,"uc.micro/categories/P/regex":63,"uc.micro/categories/Z/regex":64,"uc.micro/properties/Any/regex":66}],55:[function(e,r,t){var n={};function o(e,r){var t;return "string"!=typeof r&&(r=o.defaultChars),t=function(e){var r,t,o=n[e];if(o)return o;for(o=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),o.push(t);for(r=0;r<e.length;r++)t=e.charCodeAt(r),o[t]="%"+("0"+t.toString(16).toUpperCase()).slice(-2);return o}(r),e.replace(/(%[a-f0-9]{2})+/gi,function(e){var r,n,o,s,i,a,l,c="";for(r=0,n=e.length;r<n;r+=3)(o=parseInt(e.slice(r+1,r+3),16))<128?c+=t[o]:192==(224&o)&&r+3<n&&128==(192&(s=parseInt(e.slice(r+4,r+6),16)))?(c+=(l=o<<6&1984|63&s)<128?"��":String.fromCharCode(l),r+=3):224==(240&o)&&r+6<n&&(s=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),128==(192&s)&&128==(192&i))?(c+=(l=o<<12&61440|s<<6&4032|63&i)<2048||l>=55296&&l<=57343?"���":String.fromCharCode(l),r+=6):240==(248&o)&&r+9<n&&(s=parseInt(e.slice(r+4,r+6),16),i=parseInt(e.slice(r+7,r+9),16),a=parseInt(e.slice(r+10,r+12),16),128==(192&s)&&128==(192&i)&&128==(192&a))?((l=o<<18&1835008|s<<12&258048|i<<6&4032|63&a)<65536||l>1114111?c+="����":(l-=65536,c+=String.fromCharCode(55296+(l>>10),56320+(1023&l))),r+=9):c+="�";return c})}o.defaultChars=";/?:@&=+$,#",o.componentChars="",r.exports=o;},{}],56:[function(e,r,t){var n={};function o(e,r,t){var s,i,a,l,c,u="";for("string"!=typeof r&&(t=r,r=o.defaultChars),void 0===t&&(t=!0),c=function(e){var r,t,o=n[e];if(o)return o;for(o=n[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),/^[0-9a-z]$/i.test(t)?o.push(t):o.push("%"+("0"+r.toString(16).toUpperCase()).slice(-2));for(r=0;r<e.length;r++)o[e.charCodeAt(r)]=e[r];return o}(r),s=0,i=e.length;s<i;s++)if(a=e.charCodeAt(s),t&&37===a&&s+2<i&&/^[0-9a-f]{2}$/i.test(e.slice(s+1,s+3)))u+=e.slice(s,s+3),s+=2;else if(a<128)u+=c[a];else if(a>=55296&&a<=57343){if(a>=55296&&a<=56319&&s+1<i&&(l=e.charCodeAt(s+1))>=56320&&l<=57343){u+=encodeURIComponent(e[s]+e[s+1]),s++;continue}u+="%EF%BF%BD";}else u+=encodeURIComponent(e[s]);return u}o.defaultChars=";/?:@&=+$,-_.!~*'()#",o.componentChars="-_.!~*'()",r.exports=o;},{}],57:[function(e,r,t){r.exports=function(e){var r="";return r+=e.protocol||"",r+=e.slashes?"//":"",r+=e.auth?e.auth+"@":"",e.hostname&&-1!==e.hostname.indexOf(":")?r+="["+e.hostname+"]":r+=e.hostname||"",r+=e.port?":"+e.port:"",r+=e.pathname||"",r+=e.search||"",r+=e.hash||""};},{}],58:[function(e,r,t){r.exports.encode=e("./encode"),r.exports.decode=e("./decode"),r.exports.format=e("./format"),r.exports.parse=e("./parse");},{"./decode":55,"./encode":56,"./format":57,"./parse":59}],59:[function(e,r,t){function n(){this.protocol=null,this.slashes=null,this.auth=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.pathname=null;}var o=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,i=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,a=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(a),c=["%","/","?",";","#"].concat(l),u=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,f={javascript:!0,"javascript:":!0},d={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};n.prototype.parse=function(e,r){var t,n,s,a,l,m=e;if(m=m.trim(),!r&&1===e.split("#").length){var _=i.exec(m);if(_)return this.pathname=_[1],_[2]&&(this.search=_[2]),this}var g=o.exec(m);if(g&&(g=g[0],s=g.toLowerCase(),this.protocol=g,m=m.substr(g.length)),(r||g||m.match(/^\/\/[^@\/]+@[^@\/]+/))&&(!(l="//"===m.substr(0,2))||g&&f[g]||(m=m.substr(2),this.slashes=!0)),!f[g]&&(l||g&&!d[g])){var k,b,v=-1;for(t=0;t<u.length;t++)-1!==(a=m.indexOf(u[t]))&&(-1===v||a<v)&&(v=a);for(-1!==(b=-1===v?m.lastIndexOf("@"):m.lastIndexOf("@",v))&&(k=m.slice(0,b),m=m.slice(b+1),this.auth=k),v=-1,t=0;t<c.length;t++)-1!==(a=m.indexOf(c[t]))&&(-1===v||a<v)&&(v=a);-1===v&&(v=m.length),":"===m[v-1]&&v--;var y=m.slice(0,v);m=m.slice(v),this.parseHost(y),this.hostname=this.hostname||"";var x="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!x){var C=this.hostname.split(/\./);for(t=0,n=C.length;t<n;t++){var A=C[t];if(A&&!A.match(p)){for(var w="",D=0,E=A.length;D<E;D++)A.charCodeAt(D)>127?w+="x":w+=A[D];if(!w.match(p)){var q=C.slice(0,t),F=C.slice(t+1),S=A.match(h);S&&(q.push(S[1]),F.unshift(S[2])),F.length&&(m=F.join(".")+m),this.hostname=q.join(".");break}}}}this.hostname.length>255&&(this.hostname=""),x&&(this.hostname=this.hostname.substr(1,this.hostname.length-2));}var L=m.indexOf("#");-1!==L&&(this.hash=m.substr(L),m=m.slice(0,L));var z=m.indexOf("?");return -1!==z&&(this.search=m.substr(z),m=m.slice(0,z)),m&&(this.pathname=m),d[s]&&this.hostname&&!this.pathname&&(this.pathname=""),this},n.prototype.parseHost=function(e){var r=s.exec(e);r&&(":"!==(r=r[0])&&(this.port=r.substr(1)),e=e.substr(0,e.length-r.length)),e&&(this.hostname=e);},r.exports=function(e,r){if(e&&e instanceof n)return e;var t=new n;return t.parse(e,r),t};},{}],60:[function(r,t,n){(function(e){!function(r){var o="object"==typeof n&&n&&!n.nodeType&&n,s="object"==typeof t&&t&&!t.nodeType&&t,i="object"==typeof e&&e;i.global!==i&&i.window!==i&&i.self!==i||(r=i);var a,l,c=2147483647,u=36,p=1,h=26,f=38,d=700,m=72,_=128,g="-",k=/^xn--/,b=/[^\x20-\x7E]/,v=/[\x2E\u3002\uFF0E\uFF61]/g,y={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=u-p,C=Math.floor,A=String.fromCharCode;function w(e){throw new RangeError(y[e])}function D(e,r){for(var t=e.length,n=[];t--;)n[t]=r(e[t]);return n}function E(e,r){var t=e.split("@"),n="";t.length>1&&(n=t[0]+"@",e=t[1]);var o=(e=e.replace(v,".")).split("."),s=D(o,r).join(".");return n+s}function q(e){for(var r,t,n=[],o=0,s=e.length;o<s;)(r=e.charCodeAt(o++))>=55296&&r<=56319&&o<s?56320==(64512&(t=e.charCodeAt(o++)))?n.push(((1023&r)<<10)+(1023&t)+65536):(n.push(r),o--):n.push(r);return n}function F(e){return D(e,function(e){var r="";return e>65535&&(r+=A((e-=65536)>>>10&1023|55296),e=56320|1023&e),r+=A(e)}).join("")}function S(e,r){return e+22+75*(e<26)-((0!=r)<<5)}function L(e,r,t){var n=0;for(e=t?C(e/d):e>>1,e+=C(e/r);e>x*h>>1;n+=u)e=C(e/x);return C(n+(x+1)*e/(e+f))}function z(e){var r,t,n,o,s,i,a,l,f,d,k,b=[],v=e.length,y=0,x=_,A=m;for((t=e.lastIndexOf(g))<0&&(t=0),n=0;n<t;++n)e.charCodeAt(n)>=128&&w("not-basic"),b.push(e.charCodeAt(n));for(o=t>0?t+1:0;o<v;){for(s=y,i=1,a=u;o>=v&&w("invalid-input"),k=e.charCodeAt(o++),((l=k-48<10?k-22:k-65<26?k-65:k-97<26?k-97:u)>=u||l>C((c-y)/i))&&w("overflow"),y+=l*i,!(l<(f=a<=A?p:a>=A+h?h:a-A));a+=u)i>C(c/(d=u-f))&&w("overflow"),i*=d;r=b.length+1,A=L(y-s,r,0==s),C(y/r)>c-x&&w("overflow"),x+=C(y/r),y%=r,b.splice(y++,0,x);}return F(b)}function T(e){var r,t,n,o,s,i,a,l,f,d,k,b,v,y,x,D=[];for(e=q(e),b=e.length,r=_,t=0,s=m,i=0;i<b;++i)(k=e[i])<128&&D.push(A(k));for(n=o=D.length,o&&D.push(g);n<b;){for(a=c,i=0;i<b;++i)(k=e[i])>=r&&k<a&&(a=k);for(a-r>C((c-t)/(v=n+1))&&w("overflow"),t+=(a-r)*v,r=a,i=0;i<b;++i)if((k=e[i])<r&&++t>c&&w("overflow"),k==r){for(l=t,f=u;!(l<(d=f<=s?p:f>=s+h?h:f-s));f+=u)x=l-d,y=u-d,D.push(A(S(d+x%y,0))),l=C(x/y);D.push(A(S(l,0))),s=L(t,v,n==o),t=0,++n;}++t,++r;}return D.join("")}if(a={version:"1.4.1",ucs2:{decode:q,encode:F},decode:z,encode:T,toASCII:function(e){return E(e,function(e){return b.test(e)?"xn--"+T(e):e})},toUnicode:function(e){return E(e,function(e){return k.test(e)?z(e.slice(4).toLowerCase()):e})}},o&&s)if(t.exports==o)s.exports=a;else for(l in a)a.hasOwnProperty(l)&&(o[l]=a[l]);else r.punycode=a;}(this);}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});},{}],61:[function(e,r,t){r.exports=/[\0-\x1F\x7F-\x9F]/;},{}],62:[function(e,r,t){r.exports=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;},{}],63:[function(e,r,t){r.exports=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;},{}],64:[function(e,r,t){r.exports=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;},{}],65:[function(e,r,t){t.Any=e("./properties/Any/regex"),t.Cc=e("./categories/Cc/regex"),t.Cf=e("./categories/Cf/regex"),t.P=e("./categories/P/regex"),t.Z=e("./categories/Z/regex");},{"./categories/Cc/regex":61,"./categories/Cf/regex":62,"./categories/P/regex":63,"./categories/Z/regex":64,"./properties/Any/regex":66}],66:[function(e,r,t){r.exports=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;},{}],67:[function(e,r,t){r.exports=e("./lib/");},{"./lib/":9}]},{},[67])(67);}(t={exports:{}},t.exports),t.exports);function o(e,r){var t,n,o,s,i=e.pos,a=e.src.charCodeAt(i);if(r)return !1;if(43!==a)return !1;if(o=(n=e.scanDelims(e.pos,!0)).length,s=String.fromCharCode(a),o<2)return !1;for(o%2&&(e.push("text","",0).content=s,o--),t=0;t<o;t+=2)e.push("text","",0).content=s+s,e.delimiters.push({marker:a,jump:t,token:e.tokens.length-1,level:e.level,end:-1,open:n.can_open,close:n.can_close});return e.pos+=n.length,!0}function s(e){var r,t,n,o,s,i=[],a=e.delimiters,l=e.delimiters.length;for(r=0;r<l;r++)43===(n=a[r]).marker&&-1!==n.end&&(o=a[n.end],(s=e.tokens[n.token]).type="u_open",s.tag="u",s.nesting=1,s.markup="++",s.content="",(s=e.tokens[o.token]).type="u_close",s.tag="u",s.nesting=-1,s.markup="++",s.content="","text"===e.tokens[o.token-1].type&&"+"===e.tokens[o.token-1].content&&i.push(o.token-1));for(;i.length;){for(t=(r=i.pop())+1;t<e.tokens.length&&"u_close"===e.tokens[t].type;)t++;r!==--t&&(s=e.tokens[t],e.tokens[t]=e.tokens[r],e.tokens[r]=s);}}var i=function(e){e.inline.ruler.after("emphasis","underline",o),e.inline.ruler2.after("emphasis","underline",s);};return new(function(){function e(){this._md=n("commonmark"),this.addPlugin(i);}var r=e.prototype;return r.addPlugin=function(e){for(var r=arguments.length,t=new Array(r>1?r-1:0),n=1;n<r;n++)t[n-1]=arguments[n];t.unshift(e),this._md.use.apply(this._md,t);},r.disablePlugin=function(e){this._md.disable(e,!0);},r.toHTML=function(e){return this._md.render(e)},e}())});
	});

	/**
	 * This class leverages the {@link RtfConverter} library to perform Rich Text to
	 * HTML conversions.
	 */

	var RichTextFormatterImpl =
	/*#__PURE__*/
	function () {
	  function RichTextFormatterImpl() {}

	  var _proto = RichTextFormatterImpl.prototype;

	  /**
	   * Generates an HTML representation of the provided Rich Text field value. Note that
	   * the HTML will contain a wrapper div. This is to support click analytics for Rich Text
	   * links.
	   *
	   * @param {string} fieldValue A Rich Text field value.
	   * @param {string} fieldName The name of the field, to be included in the payload of a click
	   *                           analytics event. This parameter is optional.
	   * @param {Object|string} targetConfig Configuration object specifying the 'target' behavior for
	   *                          the various types of links. If a string is provided, it is assumed that
	   *                          is the 'target' behavior across all types of links. This parameter is optional.
	   * @returns {string} The HTML representation of the field value, serialized as a string.
	   */
	  _proto.format = function format(fieldValue, fieldName, targetConfig) {
	    var _this = this;

	    if (typeof fieldValue !== 'string') {
	      throw new AnswersCoreError("Rich text \"" + fieldValue + "\" needs to be a string. Currently is a " + typeof fieldValue);
	    }

	    var pluginName = this._generatePluginName();

	    rtfConverter_min.addPlugin(markdownItForInline, pluginName, 'link_open', function (tokens, idx) {
	      return _this._urlTransformer(tokens, idx, targetConfig);
	    });
	    fieldName = fieldName || '';
	    var html = "<div class=\"js-yxt-rtfValue\" data-field-name=\"" + fieldName + "\">\n" + ("" + rtfConverter_min.toHTML(fieldValue)) + '</div>'; // Because all invocations of this method share the same {@link RtfConverter}, we must make sure to
	    // disable the plugin added above. Otherwise, it will be applied in all subsequent conversions.

	    rtfConverter_min.disablePlugin(pluginName);
	    return html;
	  }
	  /**
	   * An inline token parser for use with the {@link iterator} Markdown-it plugin.
	   * This token parser adds a cta-type data attribute to any link it encounters.
	   */
	  ;

	  _proto._urlTransformer = function _urlTransformer(tokens, idx, targetConfig) {
	    targetConfig = targetConfig || {};
	    var target;

	    if (typeof targetConfig === 'string') {
	      target = targetConfig;
	    }

	    var href = tokens[idx].attrGet('href');
	    var ctaType;

	    if (startsWith$2(href).call(href, 'mailto')) {
	      ctaType = 'EMAIL';
	      target = target || targetConfig.email;
	    } else if (startsWith$2(href).call(href, 'tel')) {
	      ctaType = 'TAP_TO_CALL';
	      target = target || targetConfig.phone;
	    } else {
	      ctaType = 'VIEW_WEBSITE';
	      target = target || targetConfig.url;
	    }

	    tokens[idx].attrSet('data-cta-type', ctaType);
	    target && tokens[idx].attrSet('target', target);
	  }
	  /**
	   * A function that generates a unique UUID to serve as the name for a
	   * Markdown-it plugin.
	   *
	   * @returns {string} the UUID.
	   */
	  ;

	  _proto._generatePluginName = function _generatePluginName() {
	    function s4() {
	      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	    }

	    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	  };

	  return RichTextFormatterImpl;
	}();

	var RichTextFormatter = new RichTextFormatterImpl();

	function isValidContext(context) {
	  // should be both valid JSON and a map
	  var parsed;

	  try {
	    parsed = JSON.parse(context);
	  } catch (e) {
	    return false;
	  }

	  if (!parsed) {
	    return false;
	  }

	  return typeof parsed === 'object' && !isArray$3(parsed);
	}

	/** @typedef {import('./core/services/searchservice').default} SearchService */

	/** @typedef {import('./core/services/autocompleteservice').default} AutoCompleteService */

	/** @typedef {import('./core/services/questionanswerservice').default} QuestionAnswerService */

	/** @typedef {import('./core/services/errorreporterservice').default} ErrorReporterService */

	/** @typedef {import('./core/services/analyticsreporterservice').default} AnalyticsReporterService */

	/**
	 * @typedef Services
	 * @property {SearchService} searchService
	 * @property {AutoCompleteService} autoCompleteService
	 * @property {QuestionAnswerService} questionAnswerService
	 * @property {ErrorReporterService} errorReporterService
	 */

	var DEFAULTS = {
	  locale: LOCALE,
	  querySource: QUERY_SOURCE
	};
	/**
	 * The main Answers interface
	 */

	var Answers =
	/*#__PURE__*/
	function () {
	  function Answers() {
	    if (!Answers.setInstance(this)) {
	      return Answers.getInstance();
	    }
	    /**
	     * A reference to the Component base class for custom
	     * components to extend
	     */


	    this.Component = Component;
	    /**
	     * A reference to the AnalyticsEvent base class for reporting
	     * custom analytics
	     */

	    this.AnalyticsEvent = AnalyticsEvent;
	    /**
	     * A reference to the FilterNodeFactory class for creating {@link FilterNode}s.
	     */

	    this.FilterNodeFactory = FilterNodeFactory;
	    /**
	     * A reference of the renderer to use for the components
	     * This is provided during initialization.
	     * @type {Renderer}
	     */

	    this.renderer = new Renderers.Handlebars();
	    /**
	     * A reference to the formatRichText function.
	     * @type {Function}
	     */

	    this.formatRichText = function (markdown, eventOptionsFieldName, targetConfig) {
	      return RichTextFormatter.format(markdown, eventOptionsFieldName, targetConfig);
	    };
	    /**
	     * A local reference to the component manager
	     * @type {ComponentManager}
	     */


	    this.components = ComponentManager.getInstance();
	    /**
	     * A local reference to the core api
	     * @type {Core}
	     */

	    this.core = null;
	    /**
	     * A callback function to invoke once the library is ready.
	     * Typically fired after templates are fetched from server for rendering.
	     */

	    this._onReady = function () {};
	    /**
	     * @type {boolean}
	     * @private
	     */


	    this._eligibleForAnalytics = false;
	    /**
	     * @type {Services}
	     * @private
	     */

	    this._services = null;
	    /**
	     * @type {AnalyticsReporterService}
	     * @private
	     */

	    this._analyticsReporterService = null;
	    /**
	     * @type {boolean}
	     * @private
	     */

	    this._disabledByMasterSwitch = false;
	  }

	  Answers.setInstance = function setInstance(instance) {
	    if (!this.instance) {
	      this.instance = instance;
	      return true;
	    }

	    return false;
	  };

	  Answers.getInstance = function getInstance() {
	    return this.instance;
	  }
	  /**
	   * Initializes the SDK with the provided configuration. Note that before onReady
	   * is ever called, a check to the relevant Answers Status page is made.
	   *
	   * @param {Object} config The Answers configuration.
	   * @param {Object} statusPage An override for the baseUrl and endpoint of the
	   *                            experience's Answers Status page.
	   */
	  ;

	  var _proto = Answers.prototype;

	  _proto.init = function init(config, statusPage) {
	    var _this = this;

	    window.performance.mark('yext.answers.initStart');
	    var parsedConfig = this.parseConfig(config);
	    this.validateConfig(parsedConfig);
	    parsedConfig.search = new SearchConfig(parsedConfig.search);
	    parsedConfig.verticalPages = new VerticalPagesConfig(parsedConfig.verticalPages);
	    var globalStorage = new GlobalStorage();
	    var persistentStorage = new PersistentStorage({
	      updateListener: parsedConfig.onStateChange,
	      resetListener: function resetListener(data) {
	        if (!data[StorageKeys.QUERY]) {
	          _this.core.clearResults();
	        } else {
	          _this.core.globalStorage.set(StorageKeys.QUERY_TRIGGER, QueryTriggers.QUERY_PARAMETER);
	        }

	        if (!data[StorageKeys.SEARCH_OFFSET]) {
	          _this.core.globalStorage.set(StorageKeys.SEARCH_OFFSET, 0);
	        }

	        globalStorage.setAll(data);
	      }
	    });
	    globalStorage.setAll(persistentStorage.getAll());
	    globalStorage.set(StorageKeys.SEARCH_CONFIG, parsedConfig.search);
	    globalStorage.set(StorageKeys.VERTICAL_PAGES_CONFIG, parsedConfig.verticalPages);
	    globalStorage.set(StorageKeys.LOCALE, parsedConfig.locale);
	    globalStorage.set(StorageKeys.QUERY_SOURCE, parsedConfig.querySource); // Check if sessionsOptIn data is stored in the URL. If it is, prefer that over
	    // what is in parsedConfig.

	    var sessionOptIn = globalStorage.getState(StorageKeys.SESSIONS_OPT_IN);

	    if (!sessionOptIn) {
	      globalStorage.set(StorageKeys.SESSIONS_OPT_IN, {
	        value: parsedConfig.sessionTrackingEnabled,
	        setDynamically: false
	      });
	    } else {
	      // If sessionsOptIn was stored in the URL, it was stored only as a string.
	      // Parse this value and add it back to globalStorage.
	      globalStorage.set(StorageKeys.SESSIONS_OPT_IN, {
	        value: /^true$/i.test(sessionOptIn),
	        setDynamically: true
	      });
	    }

	    parsedConfig.noResults && globalStorage.set(StorageKeys.NO_RESULTS_CONFIG, parsedConfig.noResults);

	    if (globalStorage.getState(StorageKeys.QUERY)) {
	      globalStorage.set(StorageKeys.QUERY_TRIGGER, QueryTriggers.QUERY_PARAMETER);
	    }

	    var context = globalStorage.getState(StorageKeys.API_CONTEXT);

	    if (context && !isValidContext(context)) {
	      persistentStorage["delete"](StorageKeys.API_CONTEXT, true);
	      globalStorage["delete"](StorageKeys.API_CONTEXT);
	      console.error("Context parameter \"" + context + "\" is invalid, omitting from the search.");
	    }

	    if (globalStorage.getState(StorageKeys.REFERRER_PAGE_URL) === null) {
	      globalStorage.set(StorageKeys.REFERRER_PAGE_URL, urlWithoutQueryParamsAndHash(document.referrer));
	    }

	    this._masterSwitchApi = statusPage ? new MasterSwitchApi(objectSpread({
	      apiKey: parsedConfig.apiKey
	    }, statusPage), globalStorage) : MasterSwitchApi.from(parsedConfig.apiKey, parsedConfig.experienceKey, globalStorage);
	    this._services = parsedConfig.mock ? getMockServices() : getServices(parsedConfig, globalStorage);
	    this._eligibleForAnalytics = parsedConfig.businessId != null; // TODO(amullings): Initialize with other services

	    if (this._eligibleForAnalytics && parsedConfig.mock) {
	      this._analyticsReporterService = new NoopAnalyticsReporter();
	    } else if (this._eligibleForAnalytics) {
	      this._analyticsReporterService = new AnalyticsReporter(parsedConfig.experienceKey, parsedConfig.experienceVersion, parsedConfig.businessId, parsedConfig.analyticsOptions, parsedConfig.environment); // listen to query id updates

	      globalStorage.on('update', StorageKeys.QUERY_ID, function (id) {
	        return _this._analyticsReporterService.setQueryId(id);
	      });
	      this.components.setAnalyticsReporter(this._analyticsReporterService);
	      initScrollListener(this._analyticsReporterService);
	    }

	    this.core = new Core({
	      apiKey: parsedConfig.apiKey,
	      globalStorage: globalStorage,
	      persistentStorage: persistentStorage,
	      experienceKey: parsedConfig.experienceKey,
	      fieldFormatters: parsedConfig.fieldFormatters,
	      experienceVersion: parsedConfig.experienceVersion,
	      locale: parsedConfig.locale,
	      searchService: this._services.searchService,
	      autoCompleteService: this._services.autoCompleteService,
	      questionAnswerService: this._services.questionAnswerService,
	      analyticsReporter: this._analyticsReporterService,
	      onVerticalSearch: parsedConfig.onVerticalSearch,
	      onUniversalSearch: parsedConfig.onUniversalSearch
	    });

	    if (parsedConfig.onStateChange && typeof parsedConfig.onStateChange === 'function') {
	      parsedConfig.onStateChange(persistentStorage.getAll(), window.location.search.substr(1));
	    }

	    this.components.setCore(this.core).setRenderer(this.renderer);

	    this._setDefaultInitialSearch(parsedConfig.search);

	    this._onReady = parsedConfig.onReady || function () {};

	    var asyncDeps = this._loadAsyncDependencies(parsedConfig);

	    return asyncDeps["finally"](function () {
	      if (_this._disabledByMasterSwitch) {
	        throw new Error('MasterSwitchApi determined the front-end should be disabled');
	      }

	      _this._onReady();
	    });
	  };

	  _proto._loadAsyncDependencies = function _loadAsyncDependencies(parsedConfig) {
	    var loadTemplates = this._loadTemplates(parsedConfig);

	    var ponyfillCssVariables = this._handlePonyfillCssVariables(parsedConfig.disableCssVariablesPonyfill);

	    var masterSwitch = this._checkMasterSwitch();

	    return promise$3.all([loadTemplates, ponyfillCssVariables, masterSwitch]);
	  };

	  _proto._loadTemplates = function _loadTemplates(_ref) {
	    var _this2 = this;

	    var useTemplates = _ref.useTemplates,
	        templateBundle = _ref.templateBundle;

	    if (useTemplates === false || templateBundle) {
	      if (templateBundle) {
	        this.renderer.init(templateBundle, this._getInitLocale());
	        return promise$3.resolve();
	      }
	    } else {
	      // Templates are currently downloaded separately from the CORE and UI bundle.
	      // Future enhancement is to ship the components with templates in a separate bundle.
	      this.templates = new DefaultTemplatesLoader(function (templates) {
	        _this2.renderer.init(templates, _this2._getInitLocale());
	      });
	      return this.templates.fetchTemplates();
	    }
	  };

	  _proto._checkMasterSwitch = function _checkMasterSwitch() {
	    var _this3 = this;

	    window.performance.mark('yext.answers.statusStart');

	    var handleFulfilledMasterSwitch = function handleFulfilledMasterSwitch(isDisabled) {
	      _this3._disabledByMasterSwitch = isDisabled;
	    };

	    var handleRejectedMasterSwitch = function handleRejectedMasterSwitch() {
	      _this3._disabledByMasterSwitch = false;
	    };

	    return this._masterSwitchApi.isDisabled().then(handleFulfilledMasterSwitch, handleRejectedMasterSwitch)["finally"](function () {
	      return window.performance.mark('yext.answers.statusEnd');
	    });
	  };

	  _proto.domReady = function domReady(cb) {
	    DOM.onReady(cb);
	  };

	  _proto.onReady = function onReady(cb) {
	    this._onReady = cb;
	    return this;
	  }
	  /**
	   * Parses the config provided by the user. In the parsed config, any options not supplied by the
	   * user are given default values.
	   * @param {Object} config The user supplied config.
	   */
	  ;

	  _proto.parseConfig = function parseConfig(config) {
	    var _context;

	    var parsedConfig = _extends_1({}, DEFAULTS, config);

	    var sessionTrackingEnabled = true;

	    if (typeof config.sessionTrackingEnabled === 'boolean') {
	      sessionTrackingEnabled = config.sessionTrackingEnabled;
	    }

	    parsedConfig.sessionTrackingEnabled = sessionTrackingEnabled;
	    var sandboxPrefix = SANDBOX + "-";
	    includes$4(_context = parsedConfig.apiKey).call(_context, sandboxPrefix) ? parsedConfig.environment = SANDBOX : parsedConfig.environment = PRODUCTION;
	    parsedConfig.apiKey = parsedConfig.apiKey.replace(sandboxPrefix, '');
	    return parsedConfig;
	  }
	  /**
	   * Validates the Answers config object to ensure things like api key and experience key are
	   * properly set.
	   * @param {Object} config The Answers config.
	   */
	  ;

	  _proto.validateConfig = function validateConfig(config) {
	    // TODO (tmeyer): Extract this method into it's own class. Investigate the use of JSON schema
	    // to validate these configs.
	    if (typeof config.apiKey !== 'string') {
	      throw new Error('Missing required `apiKey`. Type must be {string}');
	    }

	    if (typeof config.experienceKey !== 'string') {
	      throw new Error('Missing required `experienceKey`. Type must be {string}');
	    }

	    if (config.onVerticalSearch && typeof config.onVerticalSearch !== 'function') {
	      throw new Error('onVerticalSearch must be a function. Current type is: ' + typeof config.onVerticalSearch);
	    }

	    if (config.onUniversalSearch && typeof config.onUniversalSearch !== 'function') {
	      throw new Error('onUniversalSearch must be a function. Current type is: ' + typeof config.onUniversalSearch);
	    }
	  }
	  /**
	   * Register a custom component type so it can be created via
	   * addComponent and used as a child component
	   * @param {Component} componentClass
	   */
	  ;

	  _proto.registerComponentType = function registerComponentType(componentClass) {
	    this.components.register(componentClass);
	  };

	  _proto.addComponent = function addComponent(type, opts) {
	    if (typeof opts === 'string') {
	      opts = {
	        container: opts
	      };
	    }

	    try {
	      this.components.create(type, opts).mount();
	    } catch (e) {
	      throw new AnswersComponentError('Failed to add component', type, e);
	    }

	    return this;
	  }
	  /**
	   * Remove the component - and all of its children - with the given name
	   * @param {string} name The name of the component to remove
	   */
	  ;

	  _proto.removeComponent = function removeComponent(name) {
	    this.components.removeByName(name);
	  };

	  _proto.createComponent = function createComponent(opts) {
	    return this.components.create('Component', opts).mount();
	  }
	  /**
	   * Conducts a search in the Answers experience
	   *
	   * @param {string} query
	   */
	  ;

	  _proto.search = function search(query) {
	    this.core.setQuery(query, {
	      setQueryParams: true
	    });
	    this.core.persistentStorage.set(StorageKeys.QUERY, query);
	  };

	  _proto.registerHelper = function registerHelper(name, cb) {
	    this.renderer.registerHelper(name, cb);
	    return this;
	  }
	  /**
	   * Compile and add a template to the current renderer
	   * @param {string} templateName The unique name for the template
	   * @param {string} template The handlebars template string
	   */
	  ;

	  _proto.registerTemplate = function registerTemplate(templateName, template) {
	    this.renderer.registerTemplate(templateName, template);
	  }
	  /**
	   * Opt in or out of convertion tracking analytics
	   * @param {boolean} optIn
	   */
	  ;

	  _proto.setConversionsOptIn = function setConversionsOptIn(optIn) {
	    if (this._eligibleForAnalytics) {
	      this._analyticsReporterService.setConversionTrackingEnabled(optIn);
	    }
	  }
	  /**
	   * Opt in or out of session cookies
	   * @param {boolean} optIn
	   */
	  ;

	  _proto.setSessionsOptIn = function setSessionsOptIn(optIn) {
	    this.core.globalStorage.set(StorageKeys.SESSIONS_OPT_IN, {
	      value: optIn,
	      setDynamically: true
	    });
	  }
	  /**
	   * Sets a search query on initialization for vertical searchers that have a
	   * defaultInitialSearch provided, if the user hasn't already provided their
	   * own via URL param.
	   * @param {SearchConfig} searchConfig
	   * @private
	   */
	  ;

	  _proto._setDefaultInitialSearch = function _setDefaultInitialSearch(searchConfig) {
	    if (searchConfig.defaultInitialSearch == null || !searchConfig.verticalKey) {
	      return;
	    }

	    var prepopulatedQuery = this.core.globalStorage.getState(StorageKeys.QUERY);

	    if (prepopulatedQuery != null) {
	      return;
	    }

	    this.core.globalStorage.set(StorageKeys.QUERY_TRIGGER, QueryTriggers.INITIALIZE);
	    this.core.setQuery(searchConfig.defaultInitialSearch);
	  }
	  /**
	   * Sets the geolocation tag in global storage, overriding other inputs. Do not use in conjunction
	   * with other components that will set the geolocation internally.
	   * @param {number} lat
	   * @param {number} long
	   */
	  ;

	  _proto.setGeolocation = function setGeolocation(lat, lng) {
	    this.core.globalStorage.set(StorageKeys.GEOLOCATION, {
	      lat: lat,
	      lng: lng,
	      radius: 0
	    });
	  }
	  /**
	   * A promise that resolves when ponyfillCssVariables resolves,
	   * or resolves immediately if ponyfill is disabled
	   * @param {boolean} option to opt out of the css variables ponyfill
	   * @return {Promise} resolves after ponyfillCssVariables, or immediately if disabled
	   */
	  ;

	  _proto._handlePonyfillCssVariables = function _handlePonyfillCssVariables(ponyfillDisabled) {
	    var _this4 = this;

	    window.performance.mark('yext.answers.ponyfillStart');

	    if (ponyfillDisabled) {
	      window.performance.mark('yext.answers.ponyfillEnd');
	      return promise$3.resolve();
	    }

	    return new promise$3(function (resolve, reject) {
	      _this4.ponyfillCssVariables({
	        onFinally: function onFinally() {
	          window.performance.mark('yext.answers.ponyfillEnd');
	          resolve();
	        }
	      });
	    });
	  }
	  /*
	   * Updates the css styles with new current variables. This is useful when the css
	   * variables are updated dynamically (e.g. through js) or if the css variables are
	   * added after the ANSWERS.init
	   *
	   * To solve issues with non-zero max-age cache controls for link/script assets in IE11,
	   * we add a cache busting parameter so that XMLHttpRequests succeed.
	   *
	   * @param {Object} config Additional config to pass to the ponyfill
	   */
	  ;

	  _proto.ponyfillCssVariables = function ponyfillCssVariables(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    cssVars({
	      onlyLegacy: true,
	      onError: config.onError || function () {},
	      onSuccess: config.onSuccess || function () {},
	      onFinally: config.onFinally || function () {},
	      onBeforeSend: function onBeforeSend(xhr, node, url) {
	        try {
	          var uriWithCacheBust = new url$2(url);
	          var params = new SearchParams(uriWithCacheBust.search);
	          params.set('_', new Date().getTime());
	          uriWithCacheBust.search = params.toString();
	          xhr.open('GET', uriWithCacheBust.toString());
	        } catch (e) {// Catch the error and continue if the URL provided in the asset is not a valid URL
	        }
	      }
	    });
	  }
	  /*
	   * Adds context as a parameter for the query API calls.
	   * @param {Object} context The context object passed in the API calls
	   */
	  ;

	  _proto.setContext = function setContext(context) {
	    var contextString = stringify$2(context);

	    if (!isValidContext(contextString)) {
	      console.error("Context parameter \"" + context + "\" is invalid, omitting from the search.");
	      return;
	    }

	    this.core.globalStorage.set(StorageKeys.API_CONTEXT, contextString);
	  }
	  /**
	   * Processes a translation which includes performing interpolation, pluralization, or
	   * both
	   * @param {string | Object} translations The translation, or an object containing
	   * translated plural forms
	   * @param {Object} interpolationParams Params to use during interpolation
	   * @param {number} count The count associated with the pluralization
	   * @param {string} language The langauge associated with the pluralization
	   * @returns {string} The translation with any interpolation or pluralization applied
	   */
	  ;

	  _proto.processTranslation = function processTranslation(translations, interpolationParams, count, language) {
	    var initLocale = this._getInitLocale();

	    language = language || initLocale.substring(0, 2);
	    return TranslationProcessor.process(translations, interpolationParams, count, language);
	  }
	  /**
	   * Gets the locale that ANSWERS was initialized to
	   *
	   * @returns {string}
	   */
	  ;

	  _proto._getInitLocale = function _getInitLocale() {
	    return this.core.globalStorage.getState(StorageKeys.LOCALE);
	  };

	  return Answers;
	}();
	/**
	 * @param {Object} config
	 * @param {GlobalStorage} globalStorage
	 * @returns {Services}
	 */


	function getServices(config, globalStorage) {
	  return {
	    searchService: new SearchApi({
	      apiKey: config.apiKey,
	      experienceKey: config.experienceKey,
	      experienceVersion: config.experienceVersion,
	      locale: config.locale,
	      environment: config.environment
	    }),
	    autoCompleteService: new AutoCompleteApi({
	      apiKey: config.apiKey,
	      experienceKey: config.experienceKey,
	      experienceVersion: config.experienceVersion,
	      locale: config.locale,
	      environment: config.environment
	    }, globalStorage),
	    questionAnswerService: new QuestionAnswerApi({
	      apiKey: config.apiKey,
	      environment: config.environment
	    }, globalStorage),
	    errorReporterService: new ErrorReporter({
	      apiKey: config.apiKey,
	      experienceKey: config.experienceKey,
	      experienceVersion: config.experienceVersion,
	      printVerbose: config.debug,
	      sendToServer: !config.suppressErrorReports,
	      environment: config.environment
	    }, globalStorage)
	  };
	}
	/**
	 * @returns {Services}
	 */


	function getMockServices() {
	  return {
	    searchService: new MockSearchService(),
	    autoCompleteService: new MockAutoCompleteService(),
	    questionAnswerService: new MockQuestionAnswerService(),
	    errorReporterService: new ConsoleErrorReporter()
	  };
	}
	/**
	 * Initialize the scroll event listener to send analytics events
	 * when the user scrolls to the bottom. Debounces scroll events so
	 * they are processed after the user stops scrolling
	 */


	function initScrollListener(reporter) {
	  var DEBOUNCE_TIME = 100;
	  var timeout = null;

	  var sendEvent = function sendEvent() {
	    if (window.innerHeight + window.pageYOffset >= document.body.scrollHeight) {
	      var event = new AnalyticsEvent('SCROLL_TO_BOTTOM_OF_PAGE');

	      if (reporter.getQueryId()) {
	        reporter.report(event);
	      }
	    }
	  };

	  document.addEventListener('scroll', function () {
	    clearTimeout(timeout);
	    timeout = setTimeout$2(sendEvent, DEBOUNCE_TIME);
	  });
	}

	var ANSWERS = new Answers();

	return ANSWERS;

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,