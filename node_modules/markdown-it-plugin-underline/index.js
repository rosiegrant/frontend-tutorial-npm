//modified code from
// https://github.com/markdown-it/markdown-it/blob/1ad3aec2041cd2defa7e299543cc1e42184b680d/lib/rules_inline/strikethrough.js

// Insert each marker as a separate text token, and add it to delimiter list
//
function tokenize(state, silent) {
  var i,
    scanned,
    token,
    len,
    ch,
    start = state.pos,
    marker = state.src.charCodeAt(start)

  if (silent) {
    return false
  }

  if (marker !== 43 /* + */) {
    return false
  }

  scanned = state.scanDelims(state.pos, true)
  len = scanned.length
  ch = String.fromCharCode(marker)

  if (len < 2) {
    return false
  }

  if (len % 2) {
    token = state.push('text', '', 0)
    token.content = ch
    len--
  }

  for (i = 0; i < len; i += 2) {
    token = state.push('text', '', 0)
    token.content = ch + ch

    state.delimiters.push({
      marker: marker,
      jump: i,
      token: state.tokens.length - 1,
      level: state.level,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    })
  }

  state.pos += scanned.length

  return true
}

// Walk through delimiter list and replace text tokens with tags
//
function postProcess(state) {
  var i,
    j,
    startDelim,
    endDelim,
    token,
    loneMarkers = [],
    delimiters = state.delimiters,
    max = state.delimiters.length

  for (i = 0; i < max; i++) {
    startDelim = delimiters[i]

    if (startDelim.marker !== 43 /* + */) {
      continue
    }

    if (startDelim.end === -1) {
      continue
    }

    endDelim = delimiters[startDelim.end]

    token = state.tokens[startDelim.token]
    token.type = 'u_open'
    token.tag = 'u'
    token.nesting = 1
    token.markup = '++'
    token.content = ''

    token = state.tokens[endDelim.token]
    token.type = 'u_close'
    token.tag = 'u'
    token.nesting = -1
    token.markup = '++'
    token.content = ''

    if (
      state.tokens[endDelim.token - 1].type === 'text' &&
      state.tokens[endDelim.token - 1].content === '+'
    ) {
      loneMarkers.push(endDelim.token - 1)
    }
  }

  while (loneMarkers.length) {
    i = loneMarkers.pop()
    j = i + 1

    while (j < state.tokens.length && state.tokens[j].type === 'u_close') {
      j++
    }

    j--

    if (i !== j) {
      token = state.tokens[j]
      state.tokens[j] = state.tokens[i]
      state.tokens[i] = token
    }
  }
}

module.exports = function( md) {
  md.inline.ruler.after('emphasis', 'underline', tokenize)
  md.inline.ruler2.after('emphasis', 'underline', postProcess)
}
